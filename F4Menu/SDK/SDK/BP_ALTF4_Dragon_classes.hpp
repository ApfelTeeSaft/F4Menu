#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ALTF4_Dragon

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DynamicNode_structs.hpp"
#include "DynamicNode_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ALTF4_Dragon.BP_ALTF4_Dragon_C
// 0x0050 (0x0610 - 0x05C0)
class ABP_ALTF4_Dragon_C final : public ADNCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UAudioComponent*                        DragonFlying_Cue;                                  // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ______Cue;                                         // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Ball_Spawner;                                      // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Up_Alpha_DB0252244CC331A1A109AA9627E05AF9;         // 0x05E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            Up__Direction_DB0252244CC331A1A109AA9627E05AF9;    // 0x05E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Up;                                                // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ABP_ALTF4_Pawn_SoloPlay_C*              ALTF4_SP;                                          // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Attak;                                             // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAt_;                                           // 0x05FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WakeUP_;                                           // 0x05FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE[0x2];                                      // 0x05FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DragonLocation;                                    // 0x0600(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Stack_Priority;                                    // 0x060C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sleep_;                                            // 0x060D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Attack_;                                           // 0x060E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ALTF4_Dragon(int32 EntryPoint);
	void DragonOnlyAttackStop();
	void ReTarget();
	void DragonReset();
	void AttackStop();
	void AttackLoop();
	void Attack__0();
	void WakeUP__0();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UP__UpdateFunc();
	void UP__FinishedFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ALTF4_Dragon_C">();
	}
	static class ABP_ALTF4_Dragon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ALTF4_Dragon_C>();
	}
};
static_assert(alignof(ABP_ALTF4_Dragon_C) == 0x000010, "Wrong alignment on ABP_ALTF4_Dragon_C");
static_assert(sizeof(ABP_ALTF4_Dragon_C) == 0x000610, "Wrong size on ABP_ALTF4_Dragon_C");
static_assert(offsetof(ABP_ALTF4_Dragon_C, UberGraphFrame) == 0x0005C0, "Member 'ABP_ALTF4_Dragon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, DragonFlying_Cue) == 0x0005C8, "Member 'ABP_ALTF4_Dragon_C::DragonFlying_Cue' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, ______Cue) == 0x0005D0, "Member 'ABP_ALTF4_Dragon_C::______Cue' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Ball_Spawner) == 0x0005D8, "Member 'ABP_ALTF4_Dragon_C::Ball_Spawner' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Up_Alpha_DB0252244CC331A1A109AA9627E05AF9) == 0x0005E0, "Member 'ABP_ALTF4_Dragon_C::Up_Alpha_DB0252244CC331A1A109AA9627E05AF9' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Up__Direction_DB0252244CC331A1A109AA9627E05AF9) == 0x0005E4, "Member 'ABP_ALTF4_Dragon_C::Up__Direction_DB0252244CC331A1A109AA9627E05AF9' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Up) == 0x0005E8, "Member 'ABP_ALTF4_Dragon_C::Up' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, ALTF4_SP) == 0x0005F0, "Member 'ABP_ALTF4_Dragon_C::ALTF4_SP' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Attak) == 0x0005F8, "Member 'ABP_ALTF4_Dragon_C::Attak' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, LookAt_) == 0x0005FC, "Member 'ABP_ALTF4_Dragon_C::LookAt_' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, WakeUP_) == 0x0005FD, "Member 'ABP_ALTF4_Dragon_C::WakeUP_' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, DragonLocation) == 0x000600, "Member 'ABP_ALTF4_Dragon_C::DragonLocation' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Stack_Priority) == 0x00060C, "Member 'ABP_ALTF4_Dragon_C::Stack_Priority' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Sleep_) == 0x00060D, "Member 'ABP_ALTF4_Dragon_C::Sleep_' has a wrong offset!");
static_assert(offsetof(ABP_ALTF4_Dragon_C, Attack_) == 0x00060E, "Member 'ABP_ALTF4_Dragon_C::Attack_' has a wrong offset!");

}

