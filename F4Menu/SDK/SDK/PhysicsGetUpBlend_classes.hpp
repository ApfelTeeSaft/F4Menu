#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsGetUpBlend

#include "Basic.hpp"

#include "PhysicsGetUpBlend_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class PhysicsGetUpBlend.PhysicsGetUpBlendAnimInstance
// 0x0000 (0x02C0 - 0x02C0)
class UPhysicsGetUpBlendAnimInstance final : public UAnimInstance
{
public:
	EActionType                                   Action;                                            // 0x02B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActionType                                   LastAction;                                        // 0x02B9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetUpOrientation                             GetUpOrientation;                                  // 0x02BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetUpOrientation                             RagdollOrientation;                                // 0x02BB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RagdollFalling;                                    // 0x02BC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetUpFinish();
	void OnActionSet();
	void SetAction(const EActionType NewAction);

	bool IsGetUpAnimation() const;
	bool IsRagdoll() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsGetUpBlendAnimInstance">();
	}
	static class UPhysicsGetUpBlendAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsGetUpBlendAnimInstance>();
	}
};
static_assert(alignof(UPhysicsGetUpBlendAnimInstance) == 0x000010, "Wrong alignment on UPhysicsGetUpBlendAnimInstance");
static_assert(sizeof(UPhysicsGetUpBlendAnimInstance) == 0x0002C0, "Wrong size on UPhysicsGetUpBlendAnimInstance");
static_assert(offsetof(UPhysicsGetUpBlendAnimInstance, Action) == 0x0002B8, "Member 'UPhysicsGetUpBlendAnimInstance::Action' has a wrong offset!");
static_assert(offsetof(UPhysicsGetUpBlendAnimInstance, LastAction) == 0x0002B9, "Member 'UPhysicsGetUpBlendAnimInstance::LastAction' has a wrong offset!");
static_assert(offsetof(UPhysicsGetUpBlendAnimInstance, GetUpOrientation) == 0x0002BA, "Member 'UPhysicsGetUpBlendAnimInstance::GetUpOrientation' has a wrong offset!");
static_assert(offsetof(UPhysicsGetUpBlendAnimInstance, RagdollOrientation) == 0x0002BB, "Member 'UPhysicsGetUpBlendAnimInstance::RagdollOrientation' has a wrong offset!");
static_assert(offsetof(UPhysicsGetUpBlendAnimInstance, RagdollFalling) == 0x0002BC, "Member 'UPhysicsGetUpBlendAnimInstance::RagdollFalling' has a wrong offset!");

// Class PhysicsGetUpBlend.PhysicsGetUpBlendCharacter
// 0x00F0 (0x05B0 - 0x04C0)
class APhysicsGetUpBlendCharacter final : public ACharacter
{
public:
	class USpringArmComponent*                    CameraBoom;                                        // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCameraComponent*                       FollowCamera;                                      // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         BaseTurnRate;                                      // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLookUpRate;                                    // 0x04CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainBoneGetUpVelocityTreshold;                     // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RagdollProcessing;                                 // 0x04D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RootBone;                                          // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MainBone;                                          // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrientationBone;                                   // 0x04F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OrientationSocket;                                 // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceNetUpdate;                                   // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_519[0x3];                                      // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BodiesSyncDelayMin;                                // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodiesSyncDelayMax;                                // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialDelay;                                      // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_52C[0x64];                                     // 0x052C(0x0064)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GetUpDelay;                                        // 0x0590(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRepBodyState>                  BodiesStates;                                      // 0x0598(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Fall(float Delay);
	void Fall_NetMulticast(float Delay);
	void Fall_Server(float Delay);
	void FallImpulse(const struct FVector& Origin, float Radius, float Strength, float Delay, ERadialImpulseFalloff Falloff, bool bVelChange);
	void FallImpulse_NetMulticast(const struct FVector& Origin, float Radius, float Strength, float Delay, ERadialImpulseFalloff Falloff, bool bVelChange);
	void FallImpulse_Server(const struct FVector& Origin, float Radius, float Strength, float Delay, ERadialImpulseFalloff Falloff, bool bVelChange);
	void FallInput();
	void K2_SetGetUpOrientation(EGetUpOrientation GetUpOrientation);
	bool SetAction(EActionType NewAction);
	void SetGetUpOrientation_NetMulticast(EGetUpOrientation GetUpOrientation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsGetUpBlendCharacter">();
	}
	static class APhysicsGetUpBlendCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicsGetUpBlendCharacter>();
	}
};
static_assert(alignof(APhysicsGetUpBlendCharacter) == 0x000010, "Wrong alignment on APhysicsGetUpBlendCharacter");
static_assert(sizeof(APhysicsGetUpBlendCharacter) == 0x0005B0, "Wrong size on APhysicsGetUpBlendCharacter");
static_assert(offsetof(APhysicsGetUpBlendCharacter, CameraBoom) == 0x0004B8, "Member 'APhysicsGetUpBlendCharacter::CameraBoom' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, FollowCamera) == 0x0004C0, "Member 'APhysicsGetUpBlendCharacter::FollowCamera' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, BaseTurnRate) == 0x0004C8, "Member 'APhysicsGetUpBlendCharacter::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, BaseLookUpRate) == 0x0004CC, "Member 'APhysicsGetUpBlendCharacter::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, MainBoneGetUpVelocityTreshold) == 0x0004D0, "Member 'APhysicsGetUpBlendCharacter::MainBoneGetUpVelocityTreshold' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, RagdollProcessing) == 0x0004D4, "Member 'APhysicsGetUpBlendCharacter::RagdollProcessing' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, RootBone) == 0x0004D8, "Member 'APhysicsGetUpBlendCharacter::RootBone' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, MainBone) == 0x0004E8, "Member 'APhysicsGetUpBlendCharacter::MainBone' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, OrientationBone) == 0x0004F8, "Member 'APhysicsGetUpBlendCharacter::OrientationBone' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, OrientationSocket) == 0x000508, "Member 'APhysicsGetUpBlendCharacter::OrientationSocket' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, bForceNetUpdate) == 0x000518, "Member 'APhysicsGetUpBlendCharacter::bForceNetUpdate' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, BodiesSyncDelayMin) == 0x00051C, "Member 'APhysicsGetUpBlendCharacter::BodiesSyncDelayMin' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, BodiesSyncDelayMax) == 0x000520, "Member 'APhysicsGetUpBlendCharacter::BodiesSyncDelayMax' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, InitialDelay) == 0x000528, "Member 'APhysicsGetUpBlendCharacter::InitialDelay' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, GetUpDelay) == 0x000590, "Member 'APhysicsGetUpBlendCharacter::GetUpDelay' has a wrong offset!");
static_assert(offsetof(APhysicsGetUpBlendCharacter, BodiesStates) == 0x000598, "Member 'APhysicsGetUpBlendCharacter::BodiesStates' has a wrong offset!");

}

