#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JumpJumpTrap_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass JumpJumpTrap_BP.JumpJumpTrap_BP_C
// 0x00B0 (0x02D0 - 0x0220)
class AJumpJumpTrap_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        One0______Cue;                                     // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FootRest;                                          // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bot;                                               // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             BladeRotation;                                     // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RootRotation;                                      // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blade;                                             // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RotaRoot;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_05;                                         // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_08;                                         // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_07;                                         // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_06;                                         // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_02;                                         // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_01;                                         // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_04;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Blocks_03;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Blocks_G;                                          // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Terminus_Pillar_D;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RootRotationRate;                                  // 0x02B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               BladeRotationRate;                                 // 0x02C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_JumpJumpTrap_BP(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Stop();
	void BndEvt__JumpJumpTrap_BP_Blade_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Active();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"JumpJumpTrap_BP_C">();
	}
	static class AJumpJumpTrap_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AJumpJumpTrap_BP_C>();
	}
};
static_assert(alignof(AJumpJumpTrap_BP_C) == 0x000008, "Wrong alignment on AJumpJumpTrap_BP_C");
static_assert(sizeof(AJumpJumpTrap_BP_C) == 0x0002D0, "Wrong size on AJumpJumpTrap_BP_C");
static_assert(offsetof(AJumpJumpTrap_BP_C, UberGraphFrame) == 0x000220, "Member 'AJumpJumpTrap_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, One0______Cue) == 0x000228, "Member 'AJumpJumpTrap_BP_C::One0______Cue' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, FootRest) == 0x000230, "Member 'AJumpJumpTrap_BP_C::FootRest' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Bot) == 0x000238, "Member 'AJumpJumpTrap_BP_C::Bot' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, BladeRotation) == 0x000240, "Member 'AJumpJumpTrap_BP_C::BladeRotation' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, RootRotation) == 0x000248, "Member 'AJumpJumpTrap_BP_C::RootRotation' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blade) == 0x000250, "Member 'AJumpJumpTrap_BP_C::Blade' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, RotaRoot) == 0x000258, "Member 'AJumpJumpTrap_BP_C::RotaRoot' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_05) == 0x000260, "Member 'AJumpJumpTrap_BP_C::Blocks_05' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_08) == 0x000268, "Member 'AJumpJumpTrap_BP_C::Blocks_08' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_07) == 0x000270, "Member 'AJumpJumpTrap_BP_C::Blocks_07' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_06) == 0x000278, "Member 'AJumpJumpTrap_BP_C::Blocks_06' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_02) == 0x000280, "Member 'AJumpJumpTrap_BP_C::Blocks_02' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_01) == 0x000288, "Member 'AJumpJumpTrap_BP_C::Blocks_01' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_04) == 0x000290, "Member 'AJumpJumpTrap_BP_C::Blocks_04' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_03) == 0x000298, "Member 'AJumpJumpTrap_BP_C::Blocks_03' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Blocks_G) == 0x0002A0, "Member 'AJumpJumpTrap_BP_C::Blocks_G' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, Terminus_Pillar_D) == 0x0002A8, "Member 'AJumpJumpTrap_BP_C::Terminus_Pillar_D' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, DefaultSceneRoot) == 0x0002B0, "Member 'AJumpJumpTrap_BP_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, RootRotationRate) == 0x0002B8, "Member 'AJumpJumpTrap_BP_C::RootRotationRate' has a wrong offset!");
static_assert(offsetof(AJumpJumpTrap_BP_C, BladeRotationRate) == 0x0002C4, "Member 'AJumpJumpTrap_BP_C::BladeRotationRate' has a wrong offset!");

}

