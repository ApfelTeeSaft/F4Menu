#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MenuSystemPro

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class MenuSystemPro.MenuSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UMenuSystemLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString ActionKeyMappingToString(const struct FInputActionKeyMapping& InputActionKeyMapping);
	static void ApplyPostProcessingSettings(bool MotionBlur, bool LensFlares, bool SSR, bool Bloom, int32 AntiAliasing, bool AmbientOcclusion);
	static void ApplyRaytracingSettings(int32 RaytracedShadows, int32 RaytracedReflections, int32 RaytracedTranslucency, int32 RaytracedAmbientOcclusion, int32 RaytracedGlobalIllumination, int32 DLSS);
	static class FString AxisKeyMappingToString(const struct FInputAxisKeyMapping& InputAxisKeyMapping);
	static bool CheckIfBenchmarkAlreadyRan();
	static bool GetAudioSettings(float* MasterAudioVolume, float* MusicAudioVolume, float* SFXAudioVolume, float* VoiceAudioVolume, float MasterAudioVolumeDefault, float MusicAudioVolumeDefault, float SFXAudioVolumeDefault, float VoiceAudioVolumeDefault);
	static bool GetControlsSettings(bool* bInvertLookX, bool* bInvertLookY, float* CameraSpeedX, float* CameraSpeedY, bool* bRumble, bool bInvertLookXDefault, bool bInvertLookYDefault, float CameraSpeedXDefault, float CameraSpeedYDefault, bool bRumbleDefault);
	static int32 GetCurrentViewMode(const class APlayerController* PlayerController);
	static TArray<struct FInputActionKeyMapping> GetDefaultActionMappings();
	static TArray<struct FInputAxisKeyMapping> GetDefaultAxisMappings();
	static class FString GetDefaultInputBindingsVersion();
	static bool GetDisplaySettings(float* Brightness, float* FieldOfView, const float BrightnessDefault, const float FieldOfViewDefault);
	static bool GetGameSettings(int32* Difficulty, int32* Language, bool* SubtitlesEnabled, TArray<class FString>* Languages, int32 DifficultyDefault, int32 LanguageDefault, bool SubtitlesEnabledDefault);
	static TArray<class FString> GetLanguageCodeArray();
	static bool GetPersistentVariable(class FString* CustomVariableValue, const class FString& SettingsSection, const class FString& CustomVariableName, const class FString& CustomVariableValueDefault);
	static bool GetPostProcessingSettings(bool* MotionBlur, bool* LensFlares, bool* SSR, bool* Bloom, int32* AntiAliasing, bool* AmbientOcclusion, bool MotionBlurDefault, bool LensFlaresDefault, bool SSRDefault, bool BloomDefault, int32 AntiAliasingDefault, bool AmbientOcclusionDefault);
	static class FString GetProjectVersion();
	static bool GetRaytracingSettings(int32* RaytracedShadows, int32* RaytracedReflections, int32* RaytracedTranslucency, int32* RaytracedAmbientOcclusion, int32* RaytracedGlobalIllumination, int32* DLSS, int32 RaytracedShadowsDefault, int32 RaytracedReflectionsDefault, int32 RaytracedTranslucencyDefault, int32 RaytracedAmbientDefault, int32 RaytracedGlobalIlluminationDefault, int32 DLSSDefault);
	static class FString GetScreenResolution();
	static bool GetSupportedScreenResolutions(TArray<class FString>* Resolutions, int32* CurrentScreenResolutionIndex);
	static void GetVRAM(float* UsedVRAM, float* TotalVRAM);
	static bool SetAudioSettings(const float MasterAudioVolume, const float MusicAudioVolume, const float SFXAudioVolume, const float VoiceAudioVolume, class USoundClass* MasterSoundClass, class USoundClass* MusicSoundClass, class USoundClass* SFXSoundClass, class USoundClass* VoiceSoundClass);
	static void SetBenchmarkAlreadyRan(bool BenchmarkAlreadyRan);
	static bool SetControlsSettings(const bool bInvertLookX, const bool bInvertLookY, const float CameraSpeedX, const float CameraSpeedY, const bool bRumble);
	static bool SetDefaultActionMappings(const TArray<struct FInputActionKeyMapping>& ActionKeyMappings);
	static bool SetDefaultAxisMappings(const TArray<struct FInputAxisKeyMapping>& AxisKeyMappings);
	static void SetDefaultInputBindingsVersion(const class FString& DefaultInputBindingsVersion);
	static bool SetDisplaySettings(float Brightness, float FieldOfView);
	static bool SetGameSettings(const int32 Difficulty, const int32 Language, const bool SubtitlesEnabled);
	static void SetLanguageCodeArray(const TArray<class FString>& InLanguageCodeArray);
	static bool SetPersistentVariable(const class FString& SettingsSection, const class FString& CustomVariableName, const class FString& CustomVariableValue);
	static bool SetPostProcessingSettings(bool MotionBlur, bool LensFlares, bool SSR, bool Bloom, int32 AntiAliasing, bool AmbientOcclusion);
	static bool SetRaytracingSettings(int32 RaytracedShadows, int32 RaytracedReflections, int32 RaytracedTranslucency, int32 RaytracedAmbientOcclusion, int32 RaytracedGlobalIllumination, int32 DLSS);
	static struct FInputActionKeyMapping StringToActionKeyMapping(const class FString& ActionKeyMappingString);
	static struct FInputAxisKeyMapping StringToAxisKeyMapping(const class FString& AxisKeyMappingString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MenuSystemLibrary">();
	}
	static class UMenuSystemLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMenuSystemLibrary>();
	}
};
static_assert(alignof(UMenuSystemLibrary) == 0x000008, "Wrong alignment on UMenuSystemLibrary");
static_assert(sizeof(UMenuSystemLibrary) == 0x000028, "Wrong size on UMenuSystemLibrary");

}

