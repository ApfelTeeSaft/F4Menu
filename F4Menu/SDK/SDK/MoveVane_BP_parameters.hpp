#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MoveVane_BP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function MoveVane_BP.MoveVane_BP_C.ExecuteUbergraph_MoveVane_BP
// 0x0510 (0x0510 - 0x0000)
struct MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_WrittenAchievementName_1;       // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WrittenProgress_1;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WrittenUserTag_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor)
	class FName                                   K2Node_CustomEvent_WrittenAchievementName;         // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_WrittenProgress;                // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_WrittenUserTag;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0064(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         ___int_Variable;                                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___float_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ___name_Variable;                                  // 0x007C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          ___bool_IsClosed_Variable;                         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable_1;                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x00A8(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0148(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0158(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ALTF4_Pawn_SoloPlay_C*              K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play;      // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable_1;                       // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F2[0x2];                                      // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0200(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x028C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_1;     // 0x0318(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult_2;     // 0x03A4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0430(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0440(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_44D[0x3];                                      // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0450(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ALTF4_Pawn_C*                       K2Node_DynamicCast_AsBP_ALTF4_Pawn;                // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAchievementQueryCallbackProxy*         CallFunc_CacheAchievements_ReturnValue;            // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAchievementWriteCallbackProxy*         CallFunc_WriteAchievementProgress_ReturnValue;     // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0509(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP) == 0x000008, "Wrong alignment on MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP");
static_assert(sizeof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP) == 0x000510, "Wrong size on MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, EntryPoint) == 0x000000, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___bool_Has_Been_Initd_Variable) == 0x000004, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_RLerp_ReturnValue) == 0x000008, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CustomEvent_WrittenAchievementName_1) == 0x000034, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CustomEvent_WrittenAchievementName_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CustomEvent_WrittenProgress_1) == 0x00003C, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CustomEvent_WrittenProgress_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CustomEvent_WrittenUserTag_1) == 0x000040, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CustomEvent_WrittenUserTag_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CreateDelegate_OutputDelegate_2) == 0x000044, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CustomEvent_WrittenAchievementName) == 0x000054, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CustomEvent_WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CustomEvent_WrittenProgress) == 0x00005C, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CustomEvent_WrittenProgress' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CustomEvent_WrittenUserTag) == 0x000060, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CustomEvent_WrittenUserTag' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_CreateDelegate_OutputDelegate_3) == 0x000064, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___int_Variable) == 0x000074, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___int_Variable' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___float_Variable) == 0x000078, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___float_Variable' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___name_Variable) == 0x00007C, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___name_Variable' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_Conv_NameToString_ReturnValue) == 0x000088, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___bool_IsClosed_Variable) == 0x000098, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___bool_Has_Been_Initd_Variable_1) == 0x000099, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_VLerp_ReturnValue) == 0x00009C, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x0000A8, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000138, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000140, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000148, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000150, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000154, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000158, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play) == 0x0001E8, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_DynamicCast_bSuccess) == 0x0001F0, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, ___bool_IsClosed_Variable_1) == 0x0001F1, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::___bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_VLerp_ReturnValue_1) == 0x0001F4, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000200, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x00028C, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_K2_SetWorldLocation_SweepHitResult_1) == 0x000318, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_K2_SetWorldLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_K2_SetWorldLocation_SweepHitResult_2) == 0x0003A4, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_K2_SetWorldLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000430, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OtherActor) == 0x000438, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OtherComp) == 0x000440, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000448, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_bFromSweep) == 0x00044C, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_ComponentBoundEvent_SweepResult) == 0x000450, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_DynamicCast_AsBP_ALTF4_Pawn) == 0x0004E0, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_DynamicCast_AsBP_ALTF4_Pawn' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, K2Node_DynamicCast_bSuccess_1) == 0x0004E8, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_GetPlayerController_ReturnValue) == 0x0004F0, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_CacheAchievements_ReturnValue) == 0x0004F8, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_CacheAchievements_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_WriteAchievementProgress_ReturnValue) == 0x000500, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_WriteAchievementProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_IsValid_ReturnValue) == 0x000508, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP, CallFunc_IsValid_ReturnValue_1) == 0x000509, "Member 'MoveVane_BP_C_ExecuteUbergraph_MoveVane_BP::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function MoveVane_BP.MoveVane_BP_C.BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_ACH_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function MoveVane_BP.MoveVane_BP_C.BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'MoveVane_BP_C_BndEvt__MoveVane_BP_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function MoveVane_BP.MoveVane_BP_C.OnSuccess_39F099644C42B007715773A499851243
// 0x0010 (0x0010 - 0x0000)
struct MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243 final
{
public:
	class FName                                   WrittenAchievementName;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrittenProgress;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrittenUserTag;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243) == 0x000004, "Wrong alignment on MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243");
static_assert(sizeof(MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243) == 0x000010, "Wrong size on MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243");
static_assert(offsetof(MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243, WrittenAchievementName) == 0x000000, "Member 'MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243::WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243, WrittenProgress) == 0x000008, "Member 'MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243::WrittenProgress' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243, WrittenUserTag) == 0x00000C, "Member 'MoveVane_BP_C_OnSuccess_39F099644C42B007715773A499851243::WrittenUserTag' has a wrong offset!");

// Function MoveVane_BP.MoveVane_BP_C.OnFailure_39F099644C42B007715773A499851243
// 0x0010 (0x0010 - 0x0000)
struct MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243 final
{
public:
	class FName                                   WrittenAchievementName;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WrittenProgress;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WrittenUserTag;                                    // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243) == 0x000004, "Wrong alignment on MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243");
static_assert(sizeof(MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243) == 0x000010, "Wrong size on MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243");
static_assert(offsetof(MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243, WrittenAchievementName) == 0x000000, "Member 'MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243::WrittenAchievementName' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243, WrittenProgress) == 0x000008, "Member 'MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243::WrittenProgress' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243, WrittenUserTag) == 0x00000C, "Member 'MoveVane_BP_C_OnFailure_39F099644C42B007715773A499851243::WrittenUserTag' has a wrong offset!");

// Function MoveVane_BP.MoveVane_BP_C.UserConstructionScript
// 0x0058 (0x0058 - 0x0000)
struct MoveVane_BP_C_UserConstructionScript final
{
public:
	TArray<class AEndLocation_BP_C*>              CallFunc_GetAllActorsOfClass_OutActors;            // 0x0000(0x0010)(ReferenceParm)
	class AEndLocation_BP_C*                      CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MoveVane_BP_C_UserConstructionScript) == 0x000008, "Wrong alignment on MoveVane_BP_C_UserConstructionScript");
static_assert(sizeof(MoveVane_BP_C_UserConstructionScript) == 0x000058, "Wrong size on MoveVane_BP_C_UserConstructionScript");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_GetAllActorsOfClass_OutActors) == 0x000000, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000010, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x000024, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x000028, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x00002C, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000030, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue) == 0x00003C, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000040, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MoveVane_BP_C_UserConstructionScript, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x00004C, "Member 'MoveVane_BP_C_UserConstructionScript::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");

}

