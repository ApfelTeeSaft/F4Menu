#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ai_DarkNight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ai_DarkNight.BP_ai_DarkNight_C
// 0x0160 (0x0620 - 0x04C0)
class ABP_ai_DarkNight_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URadialForceComponent*                  RadialForce;                                       // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Five____DD___L_Cue;                                // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      HitCapsule;                                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Sword;                                          // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          DetectBox;                                         // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HeadOverlap;                                       // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      FallingCapsule;                                    // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThreeCamera;                                       // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PhysOut_Phys_5FD50E4643BDB6BA4D700FACF332AECA;     // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            PhysOut__Direction_5FD50E4643BDB6BA4D700FACF332AECA; // 0x0524(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_525[0x3];                                      // 0x0525(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PhysOut;                                           // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         BaseTurnRate;                                      // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLookUpRate;                                    // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Camera3_;                                          // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x3];                                      // 0x0539(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Camera_YawMax;                                     // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_PitchMax;                                   // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationRateCurrent;                               // 0x0544(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimBP_Character_C*                    AnimBP;                                            // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight_Var;                             // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius_Var;                                 // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove_;                                          // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_561[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x0564(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadRotation;                                      // 0x0570(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WallJump_;                                         // 0x057C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanWallJump_;                                      // 0x057D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFalling_;                                        // 0x057E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateToVelocity_;                                 // 0x057F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ControllerRotation;                                // 0x0580(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateToController_;                               // 0x058C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Climb_;                                            // 0x058D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanJump_;                                          // 0x058E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanIK_;                                            // 0x058F(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Ragdol_;                                           // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PushPawn_;                                         // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_592[0x2];                                      // 0x0592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveTo;                                            // 0x0594(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClimbStartWorldLOcation;                           // 0x05A0(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageStanding;                                   // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StandingProcess_;                                  // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B9[0x3];                                      // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClimbEndWorldLOcation;                             // 0x05BC(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClientCapsuleLocation;                             // 0x05C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFlatten;                                    // 0x05D4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D5[0x3];                                      // 0x05D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CLientMeshVelocity;                                // 0x05D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                GameInstance;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingCapsuleShell;                               // 0x05F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           StandUp_FaceSky;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StandUp_FaceFloor;                                 // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATargetPoint*                           Target;                                            // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Die_;                                              // 0x0618(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Slideing_;                                         // 0x0619(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61A[0x2];                                      // 0x061A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Spin;                                              // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ai_DarkNight(int32 EntryPoint);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_40(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_79(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_90(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void SetRotationRateTo_Null();
	void SetRotationRateTo_Current();
	void WallJumpProcessStart();
	void Server_IkSet(bool Can_);
	void Server_MontageSet(class UAnimMontage* Param_MontageStanding);
	void Server_RagdollSwitch(bool On_);
	void All_RagdollSwitch(bool On_);
	void Server_StandingProcess(bool On_);
	void All_StandingProcess(bool On_);
	void All_MontageSet(class UAnimMontage* Param_MontageStanding);
	void ToRagdoll();
	void All_CapsuleUpdateLocation(const struct FVector& Location);
	void Server_CapsuleUpdate(const struct FVector& Location);
	void Client_GetMeshVelocity();
	void Server_SetMeshVelocity(const struct FVector& Velocity);
	void All_SetMeshVelocity(const struct FVector& Velocity);
	void ClientGetCapsuleLocation();
	void Client_RepRagdoll();
	void Server_RepRagdoll(const struct FVector& LinearVelocity, const struct FVector& AngularVelocity);
	void Server_StandingDetect();
	void All_StandingDetect();
	void Server_HeadRotation();
	void Server_GetYawRotation();
	void ClimbRelease();
	void ClimbEnd();
	void ClimbLocation(const struct FVector& Start, const struct FVector& End);
	void GiveDamageReset();
	void ReceiveBeginPlay();
	void AI_CollisionTypeOri();
	void AI_CollisionTypeChange();
	void BndEvt__BP_ai_DarkNight_HitCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UltimateKill_AI();
	void BndEvt__Box1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Go();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__HeadFalling_K2Node_ComponentBoundEvent_648_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__FallingCapsule_K2Node_ComponentBoundEvent_27_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__FallingCapsule_K2Node_ComponentBoundEvent_235_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void InpActEvt_Jump_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpActEvt_C_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void OnSuccess_5B3FF67B467EC668F9C2DCA185FA7B72(EPathFollowingResult MovementResult);
	void OnFail_5B3FF67B467EC668F9C2DCA185FA7B72(EPathFollowingResult MovementResult);
	void PhysOut__UpdateFunc();
	void PhysOut__FinishedFunc();
	void UserConstructionScript();
	void F_Owner_SetCameraMode();
	void F_GetLoockRotation();
	void F_SetRotationPawnFromControll(bool Rotate_);
	void F_GetCanWallJump(bool* Can_);
	void F_JumpPressed();
	void F_SetCanMoving(bool Can_);
	void F_GetHitResult(class UPrimitiveComponent* Component, const struct FHitResult& Hit, bool* CanRagdol_);
	void F_GetOverlapResult(class UObject* Object, class UPrimitiveComponent* Comp, bool* CanRagdol_, struct FVector* Direction);
	void F_SetInputMode(uint8 ToMode, class UWidget* Widget, bool ShowCursos_);
	void F_GetFVectorAndRightVector(struct FVector* ForwardVector, struct FVector* RightVector);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ai_DarkNight_C">();
	}
	static class ABP_ai_DarkNight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ai_DarkNight_C>();
	}
};
static_assert(alignof(ABP_ai_DarkNight_C) == 0x000010, "Wrong alignment on ABP_ai_DarkNight_C");
static_assert(sizeof(ABP_ai_DarkNight_C) == 0x000620, "Wrong size on ABP_ai_DarkNight_C");
static_assert(offsetof(ABP_ai_DarkNight_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_ai_DarkNight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, RadialForce) == 0x0004C8, "Member 'ABP_ai_DarkNight_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Five____DD___L_Cue) == 0x0004D0, "Member 'ABP_ai_DarkNight_C::Five____DD___L_Cue' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, HitCapsule) == 0x0004D8, "Member 'ABP_ai_DarkNight_C::HitCapsule' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, PhysicsConstraint) == 0x0004E0, "Member 'ABP_ai_DarkNight_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, SM_Sword) == 0x0004E8, "Member 'ABP_ai_DarkNight_C::SM_Sword' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, DetectBox) == 0x0004F0, "Member 'ABP_ai_DarkNight_C::DetectBox' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CameraBoom) == 0x0004F8, "Member 'ABP_ai_DarkNight_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, PhysicalAnimation) == 0x000500, "Member 'ABP_ai_DarkNight_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, HeadOverlap) == 0x000508, "Member 'ABP_ai_DarkNight_C::HeadOverlap' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, FallingCapsule) == 0x000510, "Member 'ABP_ai_DarkNight_C::FallingCapsule' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, ThreeCamera) == 0x000518, "Member 'ABP_ai_DarkNight_C::ThreeCamera' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, PhysOut_Phys_5FD50E4643BDB6BA4D700FACF332AECA) == 0x000520, "Member 'ABP_ai_DarkNight_C::PhysOut_Phys_5FD50E4643BDB6BA4D700FACF332AECA' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, PhysOut__Direction_5FD50E4643BDB6BA4D700FACF332AECA) == 0x000524, "Member 'ABP_ai_DarkNight_C::PhysOut__Direction_5FD50E4643BDB6BA4D700FACF332AECA' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, PhysOut) == 0x000528, "Member 'ABP_ai_DarkNight_C::PhysOut' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, BaseTurnRate) == 0x000530, "Member 'ABP_ai_DarkNight_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, BaseLookUpRate) == 0x000534, "Member 'ABP_ai_DarkNight_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Camera3_) == 0x000538, "Member 'ABP_ai_DarkNight_C::Camera3_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Camera_YawMax) == 0x00053C, "Member 'ABP_ai_DarkNight_C::Camera_YawMax' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Camera_PitchMax) == 0x000540, "Member 'ABP_ai_DarkNight_C::Camera_PitchMax' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, RotationRateCurrent) == 0x000544, "Member 'ABP_ai_DarkNight_C::RotationRateCurrent' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, AnimBP) == 0x000550, "Member 'ABP_ai_DarkNight_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CapsuleHalfHeight_Var) == 0x000558, "Member 'ABP_ai_DarkNight_C::CapsuleHalfHeight_Var' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CapsuleRadius_Var) == 0x00055C, "Member 'ABP_ai_DarkNight_C::CapsuleRadius_Var' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CanMove_) == 0x000560, "Member 'ABP_ai_DarkNight_C::CanMove_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, ActorLocation) == 0x000564, "Member 'ABP_ai_DarkNight_C::ActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, HeadRotation) == 0x000570, "Member 'ABP_ai_DarkNight_C::HeadRotation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, WallJump_) == 0x00057C, "Member 'ABP_ai_DarkNight_C::WallJump_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CanWallJump_) == 0x00057D, "Member 'ABP_ai_DarkNight_C::CanWallJump_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, IsFalling_) == 0x00057E, "Member 'ABP_ai_DarkNight_C::IsFalling_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, RotateToVelocity_) == 0x00057F, "Member 'ABP_ai_DarkNight_C::RotateToVelocity_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, ControllerRotation) == 0x000580, "Member 'ABP_ai_DarkNight_C::ControllerRotation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, RotateToController_) == 0x00058C, "Member 'ABP_ai_DarkNight_C::RotateToController_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Climb_) == 0x00058D, "Member 'ABP_ai_DarkNight_C::Climb_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CanJump_) == 0x00058E, "Member 'ABP_ai_DarkNight_C::CanJump_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CanIK_) == 0x00058F, "Member 'ABP_ai_DarkNight_C::CanIK_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Ragdol_) == 0x000590, "Member 'ABP_ai_DarkNight_C::Ragdol_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, PushPawn_) == 0x000591, "Member 'ABP_ai_DarkNight_C::PushPawn_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, MoveTo) == 0x000594, "Member 'ABP_ai_DarkNight_C::MoveTo' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, ClimbStartWorldLOcation) == 0x0005A0, "Member 'ABP_ai_DarkNight_C::ClimbStartWorldLOcation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, MontageStanding) == 0x0005B0, "Member 'ABP_ai_DarkNight_C::MontageStanding' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, StandingProcess_) == 0x0005B8, "Member 'ABP_ai_DarkNight_C::StandingProcess_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, ClimbEndWorldLOcation) == 0x0005BC, "Member 'ABP_ai_DarkNight_C::ClimbEndWorldLOcation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, ClientCapsuleLocation) == 0x0005C8, "Member 'ABP_ai_DarkNight_C::ClientCapsuleLocation' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, RagdollFlatten) == 0x0005D4, "Member 'ABP_ai_DarkNight_C::RagdollFlatten' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, CLientMeshVelocity) == 0x0005D8, "Member 'ABP_ai_DarkNight_C::CLientMeshVelocity' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, GameInstance) == 0x0005E8, "Member 'ABP_ai_DarkNight_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, DynamicMaterial) == 0x0005F0, "Member 'ABP_ai_DarkNight_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, FallingCapsuleShell) == 0x0005F8, "Member 'ABP_ai_DarkNight_C::FallingCapsuleShell' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, StandUp_FaceSky) == 0x000600, "Member 'ABP_ai_DarkNight_C::StandUp_FaceSky' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, StandUp_FaceFloor) == 0x000608, "Member 'ABP_ai_DarkNight_C::StandUp_FaceFloor' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Target) == 0x000610, "Member 'ABP_ai_DarkNight_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Die_) == 0x000618, "Member 'ABP_ai_DarkNight_C::Die_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Slideing_) == 0x000619, "Member 'ABP_ai_DarkNight_C::Slideing_' has a wrong offset!");
static_assert(offsetof(ABP_ai_DarkNight_C, Spin) == 0x00061C, "Member 'ABP_ai_DarkNight_C::Spin' has a wrong offset!");

}

