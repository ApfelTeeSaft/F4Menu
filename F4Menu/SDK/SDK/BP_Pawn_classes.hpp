#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pawn

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Pawn.BP_Pawn_C
// 0x01C0 (0x0680 - 0x04C0)
class ABP_Pawn_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          R;                                                 // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Swan_goose_rig_exp;                                // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GrainSack_mdl;                                     // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Blood_01;                                          // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Blood_02;                                          // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Blood_03;                                          // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Blood_04;                                          // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HeadOverlap;                                       // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      FallingCapsule;                                    // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       OneCamera;                                         // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThreeCamera;                                       // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         _____2______1_09F1AD054D3A7D4E38A2F3BDD30BB66C;    // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            _____2__Direction_09F1AD054D3A7D4E38A2F3BDD30BB66C; // 0x053C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ___x_2;                                            // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         _____1______0_DCBF3045433CC977F46057B02DEFF0E9;    // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            _____1__Direction_DCBF3045433CC977F46057B02DEFF0E9; // 0x054C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ___x_1;                                            // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         _____0______0_1AFABE7A47A68767DBE3289693FF4E16;    // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            _____0__Direction_1AFABE7A47A68767DBE3289693FF4E16; // 0x055C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55D[0x3];                                      // 0x055D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ___x_0;                                            // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         PhysOut_Phys_6C6F262044465DC3E47CABB9C711D6FE;     // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            PhysOut__Direction_6C6F262044465DC3E47CABB9C711D6FE; // 0x056C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56D[0x3];                                      // 0x056D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PhysOut;                                           // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         BaseTurnRate;                                      // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLookUpRate;                                    // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Camera3_;                                          // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Camera_YawMax;                                     // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_PitchMax;                                   // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationRateCurrent;                               // 0x058C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimBP_Character_C*                    AnimBP;                                            // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight_Var;                             // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius_Var;                                 // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove_;                                          // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x05AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadRotation;                                      // 0x05B8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WallJump_;                                         // 0x05C4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanWallJump_;                                      // 0x05C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFalling_;                                        // 0x05C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateToVelocity_;                                 // 0x05C7(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ControllerRotation;                                // 0x05C8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateToController_;                               // 0x05D4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Climb_;                                            // 0x05D5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanJump_;                                          // 0x05D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanIK_;                                            // 0x05D7(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Ragdol_;                                           // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PushPawn_;                                         // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5DA[0x2];                                      // 0x05DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveTo;                                            // 0x05DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClimbStartWorldLOcation;                           // 0x05E8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageStanding;                                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StandingProcess_;                                  // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_601[0x3];                                      // 0x0601(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClimbEndWorldLOcation;                             // 0x0604(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClientCapsuleLocation;                             // 0x0610(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFlatten;                                    // 0x061C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61D[0x3];                                      // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CLientMeshVelocity;                                // 0x0620(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62C[0x4];                                      // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                GameInstance;                                      // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingCapsuleShell;                               // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           StandUp_FaceSky;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StandUp_FaceFloor;                                 // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_0;                                          // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WalkingValue;                                      // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Throwing_;                                         // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Slideing_;                                         // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_662[0x2];                                      // 0x0662(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShotOffset;                                        // 0x0664(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WPdelay;                                           // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Damege;                                            // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Die;                                               // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          battle;                                            // 0x0679(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Sheld;                                             // 0x067A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67B[0x1];                                      // 0x067B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Pawn(int32 EntryPoint);
	void Client_GetMeshVelocity();
	void Server_SetMeshVelocity(const struct FVector& Velocity);
	void All_SetMeshVelocity(const struct FVector& Velocity);
	void ClientGetCapsuleLocation();
	void Client_RepRagdoll();
	void Server_RepRagdoll(const struct FVector& LinearVelocity, const struct FVector& AngularVelocity);
	void Server_StandingDetect();
	void All_StandingDetect();
	void Server_HeadRotation();
	void Server_GetYawRotation();
	void ClimbRelease();
	void ClimbEnd();
	void ClimbLocation(const struct FVector& Start, const struct FVector& End);
	void Hit_ch();
	void Ch_shot();
	void Slide();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Server_CapsuleUpdate(const struct FVector& Location);
	void All_CapsuleUpdateLocation(const struct FVector& Location);
	void ToRagdoll();
	void All_MontageSet(class UAnimMontage* Param_MontageStanding);
	void All_StandingProcess(bool On_);
	void Server_StandingProcess(bool On_);
	void All_RagdollSwitch(bool On_);
	void Server_RagdollSwitch(bool On_);
	void Server_MontageSet(class UAnimMontage* Param_MontageStanding);
	void Server_IkSet(bool Can_);
	void WallJumpProcessStart();
	void SetRotationRateTo_Current();
	void SetRotationRateTo_Null();
	void ReceiveTick(float DeltaSeconds);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_90(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_79(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_40(float AxisValue);
	void BndEvt__HeadFalling_K2Node_ComponentBoundEvent_648_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__FallingCapsule_K2Node_ComponentBoundEvent_27_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__FallingCapsule_K2Node_ComponentBoundEvent_235_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void InpActEvt_N_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_camera_zoom_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_camera_out_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_zoom_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_zoom_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_shot_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_slide_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_slide_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_C_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpActEvt_Jump_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_8(const struct FKey& Key);
	void PhysOut__UpdateFunc();
	void PhysOut__FinishedFunc();
	void ___x_2__UpdateFunc();
	void ___x_2__FinishedFunc();
	void ___x_1__UpdateFunc();
	void ___x_1__FinishedFunc();
	void ___x_0__UpdateFunc();
	void ___x_0__FinishedFunc();
	void UserConstructionScript();
	void F_Owner_SetCameraMode();
	void F_GetLoockRotation();
	void F_SetRotationPawnFromControll(bool Rotate_);
	void F_GetCanWallJump(bool* Can_);
	void F_JumpPressed();
	void F_SetCanMoving(bool Can_);
	void F_GetHitResult(class UPrimitiveComponent* Component, const struct FHitResult& Hit, bool* CanRagdol_);
	void F_GetOverlapResult(class UObject* Object, class UPrimitiveComponent* Comp, bool* CanRagdol_, struct FVector* Direction);
	void F_SetInputMode(uint8 ToMode, class UWidget* Widget, bool ShowCursos_);
	void F_GetFVectorAndRightVector(struct FVector* ForwardVector, struct FVector* RightVector);
	void Damage();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Pawn_C">();
	}
	static class ABP_Pawn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Pawn_C>();
	}
};
static_assert(alignof(ABP_Pawn_C) == 0x000010, "Wrong alignment on ABP_Pawn_C");
static_assert(sizeof(ABP_Pawn_C) == 0x000680, "Wrong size on ABP_Pawn_C");
static_assert(offsetof(ABP_Pawn_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_Pawn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, R) == 0x0004C8, "Member 'ABP_Pawn_C::R' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Swan_goose_rig_exp) == 0x0004D0, "Member 'ABP_Pawn_C::Swan_goose_rig_exp' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, GrainSack_mdl) == 0x0004D8, "Member 'ABP_Pawn_C::GrainSack_mdl' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, RadialForce) == 0x0004E0, "Member 'ABP_Pawn_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Blood_01) == 0x0004E8, "Member 'ABP_Pawn_C::Blood_01' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Blood_02) == 0x0004F0, "Member 'ABP_Pawn_C::Blood_02' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Blood_03) == 0x0004F8, "Member 'ABP_Pawn_C::Blood_03' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Blood_04) == 0x000500, "Member 'ABP_Pawn_C::Blood_04' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CameraBoom) == 0x000508, "Member 'ABP_Pawn_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, PhysicalAnimation) == 0x000510, "Member 'ABP_Pawn_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, HeadOverlap) == 0x000518, "Member 'ABP_Pawn_C::HeadOverlap' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, FallingCapsule) == 0x000520, "Member 'ABP_Pawn_C::FallingCapsule' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, OneCamera) == 0x000528, "Member 'ABP_Pawn_C::OneCamera' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ThreeCamera) == 0x000530, "Member 'ABP_Pawn_C::ThreeCamera' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, _____2______1_09F1AD054D3A7D4E38A2F3BDD30BB66C) == 0x000538, "Member 'ABP_Pawn_C::_____2______1_09F1AD054D3A7D4E38A2F3BDD30BB66C' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, _____2__Direction_09F1AD054D3A7D4E38A2F3BDD30BB66C) == 0x00053C, "Member 'ABP_Pawn_C::_____2__Direction_09F1AD054D3A7D4E38A2F3BDD30BB66C' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ___x_2) == 0x000540, "Member 'ABP_Pawn_C::___x_2' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, _____1______0_DCBF3045433CC977F46057B02DEFF0E9) == 0x000548, "Member 'ABP_Pawn_C::_____1______0_DCBF3045433CC977F46057B02DEFF0E9' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, _____1__Direction_DCBF3045433CC977F46057B02DEFF0E9) == 0x00054C, "Member 'ABP_Pawn_C::_____1__Direction_DCBF3045433CC977F46057B02DEFF0E9' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ___x_1) == 0x000550, "Member 'ABP_Pawn_C::___x_1' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, _____0______0_1AFABE7A47A68767DBE3289693FF4E16) == 0x000558, "Member 'ABP_Pawn_C::_____0______0_1AFABE7A47A68767DBE3289693FF4E16' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, _____0__Direction_1AFABE7A47A68767DBE3289693FF4E16) == 0x00055C, "Member 'ABP_Pawn_C::_____0__Direction_1AFABE7A47A68767DBE3289693FF4E16' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ___x_0) == 0x000560, "Member 'ABP_Pawn_C::___x_0' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, PhysOut_Phys_6C6F262044465DC3E47CABB9C711D6FE) == 0x000568, "Member 'ABP_Pawn_C::PhysOut_Phys_6C6F262044465DC3E47CABB9C711D6FE' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, PhysOut__Direction_6C6F262044465DC3E47CABB9C711D6FE) == 0x00056C, "Member 'ABP_Pawn_C::PhysOut__Direction_6C6F262044465DC3E47CABB9C711D6FE' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, PhysOut) == 0x000570, "Member 'ABP_Pawn_C::PhysOut' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, BaseTurnRate) == 0x000578, "Member 'ABP_Pawn_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, BaseLookUpRate) == 0x00057C, "Member 'ABP_Pawn_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Camera3_) == 0x000580, "Member 'ABP_Pawn_C::Camera3_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Camera_YawMax) == 0x000584, "Member 'ABP_Pawn_C::Camera_YawMax' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Camera_PitchMax) == 0x000588, "Member 'ABP_Pawn_C::Camera_PitchMax' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, RotationRateCurrent) == 0x00058C, "Member 'ABP_Pawn_C::RotationRateCurrent' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, AnimBP) == 0x000598, "Member 'ABP_Pawn_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CapsuleHalfHeight_Var) == 0x0005A0, "Member 'ABP_Pawn_C::CapsuleHalfHeight_Var' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CapsuleRadius_Var) == 0x0005A4, "Member 'ABP_Pawn_C::CapsuleRadius_Var' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CanMove_) == 0x0005A8, "Member 'ABP_Pawn_C::CanMove_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ActorLocation) == 0x0005AC, "Member 'ABP_Pawn_C::ActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, HeadRotation) == 0x0005B8, "Member 'ABP_Pawn_C::HeadRotation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, WallJump_) == 0x0005C4, "Member 'ABP_Pawn_C::WallJump_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CanWallJump_) == 0x0005C5, "Member 'ABP_Pawn_C::CanWallJump_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, IsFalling_) == 0x0005C6, "Member 'ABP_Pawn_C::IsFalling_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, RotateToVelocity_) == 0x0005C7, "Member 'ABP_Pawn_C::RotateToVelocity_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ControllerRotation) == 0x0005C8, "Member 'ABP_Pawn_C::ControllerRotation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, RotateToController_) == 0x0005D4, "Member 'ABP_Pawn_C::RotateToController_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Climb_) == 0x0005D5, "Member 'ABP_Pawn_C::Climb_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CanJump_) == 0x0005D6, "Member 'ABP_Pawn_C::CanJump_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CanIK_) == 0x0005D7, "Member 'ABP_Pawn_C::CanIK_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Ragdol_) == 0x0005D8, "Member 'ABP_Pawn_C::Ragdol_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, PushPawn_) == 0x0005D9, "Member 'ABP_Pawn_C::PushPawn_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, MoveTo) == 0x0005DC, "Member 'ABP_Pawn_C::MoveTo' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ClimbStartWorldLOcation) == 0x0005E8, "Member 'ABP_Pawn_C::ClimbStartWorldLOcation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, MontageStanding) == 0x0005F8, "Member 'ABP_Pawn_C::MontageStanding' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, StandingProcess_) == 0x000600, "Member 'ABP_Pawn_C::StandingProcess_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ClimbEndWorldLOcation) == 0x000604, "Member 'ABP_Pawn_C::ClimbEndWorldLOcation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ClientCapsuleLocation) == 0x000610, "Member 'ABP_Pawn_C::ClientCapsuleLocation' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, RagdollFlatten) == 0x00061C, "Member 'ABP_Pawn_C::RagdollFlatten' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, CLientMeshVelocity) == 0x000620, "Member 'ABP_Pawn_C::CLientMeshVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, GameInstance) == 0x000630, "Member 'ABP_Pawn_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, DynamicMaterial) == 0x000638, "Member 'ABP_Pawn_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, FallingCapsuleShell) == 0x000640, "Member 'ABP_Pawn_C::FallingCapsuleShell' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, StandUp_FaceSky) == 0x000648, "Member 'ABP_Pawn_C::StandUp_FaceSky' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, StandUp_FaceFloor) == 0x000650, "Member 'ABP_Pawn_C::StandUp_FaceFloor' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, NewVar_0) == 0x000658, "Member 'ABP_Pawn_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, WalkingValue) == 0x00065C, "Member 'ABP_Pawn_C::WalkingValue' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Throwing_) == 0x000660, "Member 'ABP_Pawn_C::Throwing_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Slideing_) == 0x000661, "Member 'ABP_Pawn_C::Slideing_' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, ShotOffset) == 0x000664, "Member 'ABP_Pawn_C::ShotOffset' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, WPdelay) == 0x000670, "Member 'ABP_Pawn_C::WPdelay' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Damege) == 0x000674, "Member 'ABP_Pawn_C::Damege' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Die) == 0x000678, "Member 'ABP_Pawn_C::Die' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, battle) == 0x000679, "Member 'ABP_Pawn_C::battle' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Sheld) == 0x00067A, "Member 'ABP_Pawn_C::Sheld' has a wrong offset!");
static_assert(offsetof(ABP_Pawn_C, Time) == 0x00067C, "Member 'ABP_Pawn_C::Time' has a wrong offset!");

}

