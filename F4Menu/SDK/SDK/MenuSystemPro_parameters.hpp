#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MenuSystemPro

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function MenuSystemPro.MenuSystemLibrary.ActionKeyMappingToString
// 0x0038 (0x0038 - 0x0000)
struct MenuSystemLibrary_ActionKeyMappingToString final
{
public:
	struct FInputActionKeyMapping                 InputActionKeyMapping;                             // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_ActionKeyMappingToString) == 0x000008, "Wrong alignment on MenuSystemLibrary_ActionKeyMappingToString");
static_assert(sizeof(MenuSystemLibrary_ActionKeyMappingToString) == 0x000038, "Wrong size on MenuSystemLibrary_ActionKeyMappingToString");
static_assert(offsetof(MenuSystemLibrary_ActionKeyMappingToString, InputActionKeyMapping) == 0x000000, "Member 'MenuSystemLibrary_ActionKeyMappingToString::InputActionKeyMapping' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ActionKeyMappingToString, ReturnValue) == 0x000028, "Member 'MenuSystemLibrary_ActionKeyMappingToString::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.ApplyPostProcessingSettings
// 0x000C (0x000C - 0x0000)
struct MenuSystemLibrary_ApplyPostProcessingSettings final
{
public:
	bool                                          MotionBlur;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LensFlares;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SSR;                                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bloom;                                             // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasing;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AmbientOcclusion;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_ApplyPostProcessingSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_ApplyPostProcessingSettings");
static_assert(sizeof(MenuSystemLibrary_ApplyPostProcessingSettings) == 0x00000C, "Wrong size on MenuSystemLibrary_ApplyPostProcessingSettings");
static_assert(offsetof(MenuSystemLibrary_ApplyPostProcessingSettings, MotionBlur) == 0x000000, "Member 'MenuSystemLibrary_ApplyPostProcessingSettings::MotionBlur' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyPostProcessingSettings, LensFlares) == 0x000001, "Member 'MenuSystemLibrary_ApplyPostProcessingSettings::LensFlares' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyPostProcessingSettings, SSR) == 0x000002, "Member 'MenuSystemLibrary_ApplyPostProcessingSettings::SSR' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyPostProcessingSettings, Bloom) == 0x000003, "Member 'MenuSystemLibrary_ApplyPostProcessingSettings::Bloom' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyPostProcessingSettings, AntiAliasing) == 0x000004, "Member 'MenuSystemLibrary_ApplyPostProcessingSettings::AntiAliasing' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyPostProcessingSettings, AmbientOcclusion) == 0x000008, "Member 'MenuSystemLibrary_ApplyPostProcessingSettings::AmbientOcclusion' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.ApplyRaytracingSettings
// 0x0018 (0x0018 - 0x0000)
struct MenuSystemLibrary_ApplyRaytracingSettings final
{
public:
	int32                                         RaytracedShadows;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedReflections;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedTranslucency;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedAmbientOcclusion;                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedGlobalIllumination;                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSS;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_ApplyRaytracingSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_ApplyRaytracingSettings");
static_assert(sizeof(MenuSystemLibrary_ApplyRaytracingSettings) == 0x000018, "Wrong size on MenuSystemLibrary_ApplyRaytracingSettings");
static_assert(offsetof(MenuSystemLibrary_ApplyRaytracingSettings, RaytracedShadows) == 0x000000, "Member 'MenuSystemLibrary_ApplyRaytracingSettings::RaytracedShadows' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyRaytracingSettings, RaytracedReflections) == 0x000004, "Member 'MenuSystemLibrary_ApplyRaytracingSettings::RaytracedReflections' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyRaytracingSettings, RaytracedTranslucency) == 0x000008, "Member 'MenuSystemLibrary_ApplyRaytracingSettings::RaytracedTranslucency' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyRaytracingSettings, RaytracedAmbientOcclusion) == 0x00000C, "Member 'MenuSystemLibrary_ApplyRaytracingSettings::RaytracedAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyRaytracingSettings, RaytracedGlobalIllumination) == 0x000010, "Member 'MenuSystemLibrary_ApplyRaytracingSettings::RaytracedGlobalIllumination' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_ApplyRaytracingSettings, DLSS) == 0x000014, "Member 'MenuSystemLibrary_ApplyRaytracingSettings::DLSS' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.AxisKeyMappingToString
// 0x0038 (0x0038 - 0x0000)
struct MenuSystemLibrary_AxisKeyMappingToString final
{
public:
	struct FInputAxisKeyMapping                   InputAxisKeyMapping;                               // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_AxisKeyMappingToString) == 0x000008, "Wrong alignment on MenuSystemLibrary_AxisKeyMappingToString");
static_assert(sizeof(MenuSystemLibrary_AxisKeyMappingToString) == 0x000038, "Wrong size on MenuSystemLibrary_AxisKeyMappingToString");
static_assert(offsetof(MenuSystemLibrary_AxisKeyMappingToString, InputAxisKeyMapping) == 0x000000, "Member 'MenuSystemLibrary_AxisKeyMappingToString::InputAxisKeyMapping' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_AxisKeyMappingToString, ReturnValue) == 0x000028, "Member 'MenuSystemLibrary_AxisKeyMappingToString::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.CheckIfBenchmarkAlreadyRan
// 0x0001 (0x0001 - 0x0000)
struct MenuSystemLibrary_CheckIfBenchmarkAlreadyRan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_CheckIfBenchmarkAlreadyRan) == 0x000001, "Wrong alignment on MenuSystemLibrary_CheckIfBenchmarkAlreadyRan");
static_assert(sizeof(MenuSystemLibrary_CheckIfBenchmarkAlreadyRan) == 0x000001, "Wrong size on MenuSystemLibrary_CheckIfBenchmarkAlreadyRan");
static_assert(offsetof(MenuSystemLibrary_CheckIfBenchmarkAlreadyRan, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_CheckIfBenchmarkAlreadyRan::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetAudioSettings
// 0x0024 (0x0024 - 0x0000)
struct MenuSystemLibrary_GetAudioSettings final
{
public:
	float                                         MasterAudioVolume;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicAudioVolume;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SFXAudioVolume;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceAudioVolume;                                  // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MasterAudioVolumeDefault;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicAudioVolumeDefault;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SFXAudioVolumeDefault;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceAudioVolumeDefault;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetAudioSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_GetAudioSettings");
static_assert(sizeof(MenuSystemLibrary_GetAudioSettings) == 0x000024, "Wrong size on MenuSystemLibrary_GetAudioSettings");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, MasterAudioVolume) == 0x000000, "Member 'MenuSystemLibrary_GetAudioSettings::MasterAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, MusicAudioVolume) == 0x000004, "Member 'MenuSystemLibrary_GetAudioSettings::MusicAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, SFXAudioVolume) == 0x000008, "Member 'MenuSystemLibrary_GetAudioSettings::SFXAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, VoiceAudioVolume) == 0x00000C, "Member 'MenuSystemLibrary_GetAudioSettings::VoiceAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, MasterAudioVolumeDefault) == 0x000010, "Member 'MenuSystemLibrary_GetAudioSettings::MasterAudioVolumeDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, MusicAudioVolumeDefault) == 0x000014, "Member 'MenuSystemLibrary_GetAudioSettings::MusicAudioVolumeDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, SFXAudioVolumeDefault) == 0x000018, "Member 'MenuSystemLibrary_GetAudioSettings::SFXAudioVolumeDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, VoiceAudioVolumeDefault) == 0x00001C, "Member 'MenuSystemLibrary_GetAudioSettings::VoiceAudioVolumeDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetAudioSettings, ReturnValue) == 0x000020, "Member 'MenuSystemLibrary_GetAudioSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetControlsSettings
// 0x001C (0x001C - 0x0000)
struct MenuSystemLibrary_GetControlsSettings final
{
public:
	bool                                          bInvertLookX;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertLookY;                                      // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSpeedX;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraSpeedY;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRumble;                                           // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertLookXDefault;                               // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertLookYDefault;                               // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSpeedXDefault;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraSpeedYDefault;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRumbleDefault;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetControlsSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_GetControlsSettings");
static_assert(sizeof(MenuSystemLibrary_GetControlsSettings) == 0x00001C, "Wrong size on MenuSystemLibrary_GetControlsSettings");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, bInvertLookX) == 0x000000, "Member 'MenuSystemLibrary_GetControlsSettings::bInvertLookX' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, bInvertLookY) == 0x000001, "Member 'MenuSystemLibrary_GetControlsSettings::bInvertLookY' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, CameraSpeedX) == 0x000004, "Member 'MenuSystemLibrary_GetControlsSettings::CameraSpeedX' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, CameraSpeedY) == 0x000008, "Member 'MenuSystemLibrary_GetControlsSettings::CameraSpeedY' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, bRumble) == 0x00000C, "Member 'MenuSystemLibrary_GetControlsSettings::bRumble' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, bInvertLookXDefault) == 0x00000D, "Member 'MenuSystemLibrary_GetControlsSettings::bInvertLookXDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, bInvertLookYDefault) == 0x00000E, "Member 'MenuSystemLibrary_GetControlsSettings::bInvertLookYDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, CameraSpeedXDefault) == 0x000010, "Member 'MenuSystemLibrary_GetControlsSettings::CameraSpeedXDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, CameraSpeedYDefault) == 0x000014, "Member 'MenuSystemLibrary_GetControlsSettings::CameraSpeedYDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, bRumbleDefault) == 0x000018, "Member 'MenuSystemLibrary_GetControlsSettings::bRumbleDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetControlsSettings, ReturnValue) == 0x000019, "Member 'MenuSystemLibrary_GetControlsSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetCurrentViewMode
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetCurrentViewMode final
{
public:
	const class APlayerController*                PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetCurrentViewMode) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetCurrentViewMode");
static_assert(sizeof(MenuSystemLibrary_GetCurrentViewMode) == 0x000010, "Wrong size on MenuSystemLibrary_GetCurrentViewMode");
static_assert(offsetof(MenuSystemLibrary_GetCurrentViewMode, PlayerController) == 0x000000, "Member 'MenuSystemLibrary_GetCurrentViewMode::PlayerController' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetCurrentViewMode, ReturnValue) == 0x000008, "Member 'MenuSystemLibrary_GetCurrentViewMode::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetDefaultActionMappings
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetDefaultActionMappings final
{
public:
	TArray<struct FInputActionKeyMapping>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetDefaultActionMappings) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetDefaultActionMappings");
static_assert(sizeof(MenuSystemLibrary_GetDefaultActionMappings) == 0x000010, "Wrong size on MenuSystemLibrary_GetDefaultActionMappings");
static_assert(offsetof(MenuSystemLibrary_GetDefaultActionMappings, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_GetDefaultActionMappings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetDefaultAxisMappings
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetDefaultAxisMappings final
{
public:
	TArray<struct FInputAxisKeyMapping>           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetDefaultAxisMappings) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetDefaultAxisMappings");
static_assert(sizeof(MenuSystemLibrary_GetDefaultAxisMappings) == 0x000010, "Wrong size on MenuSystemLibrary_GetDefaultAxisMappings");
static_assert(offsetof(MenuSystemLibrary_GetDefaultAxisMappings, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_GetDefaultAxisMappings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetDefaultInputBindingsVersion
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetDefaultInputBindingsVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetDefaultInputBindingsVersion) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetDefaultInputBindingsVersion");
static_assert(sizeof(MenuSystemLibrary_GetDefaultInputBindingsVersion) == 0x000010, "Wrong size on MenuSystemLibrary_GetDefaultInputBindingsVersion");
static_assert(offsetof(MenuSystemLibrary_GetDefaultInputBindingsVersion, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_GetDefaultInputBindingsVersion::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetDisplaySettings
// 0x0014 (0x0014 - 0x0000)
struct MenuSystemLibrary_GetDisplaySettings final
{
public:
	float                                         Brightness;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrightnessDefault;                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfViewDefault;                                // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetDisplaySettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_GetDisplaySettings");
static_assert(sizeof(MenuSystemLibrary_GetDisplaySettings) == 0x000014, "Wrong size on MenuSystemLibrary_GetDisplaySettings");
static_assert(offsetof(MenuSystemLibrary_GetDisplaySettings, Brightness) == 0x000000, "Member 'MenuSystemLibrary_GetDisplaySettings::Brightness' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetDisplaySettings, FieldOfView) == 0x000004, "Member 'MenuSystemLibrary_GetDisplaySettings::FieldOfView' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetDisplaySettings, BrightnessDefault) == 0x000008, "Member 'MenuSystemLibrary_GetDisplaySettings::BrightnessDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetDisplaySettings, FieldOfViewDefault) == 0x00000C, "Member 'MenuSystemLibrary_GetDisplaySettings::FieldOfViewDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetDisplaySettings, ReturnValue) == 0x000010, "Member 'MenuSystemLibrary_GetDisplaySettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetGameSettings
// 0x0030 (0x0030 - 0x0000)
struct MenuSystemLibrary_GetGameSettings final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Language;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubtitlesEnabled;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Languages;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DifficultyDefault;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LanguageDefault;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubtitlesEnabledDefault;                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetGameSettings) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetGameSettings");
static_assert(sizeof(MenuSystemLibrary_GetGameSettings) == 0x000030, "Wrong size on MenuSystemLibrary_GetGameSettings");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, Difficulty) == 0x000000, "Member 'MenuSystemLibrary_GetGameSettings::Difficulty' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, Language) == 0x000004, "Member 'MenuSystemLibrary_GetGameSettings::Language' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, SubtitlesEnabled) == 0x000008, "Member 'MenuSystemLibrary_GetGameSettings::SubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, Languages) == 0x000010, "Member 'MenuSystemLibrary_GetGameSettings::Languages' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, DifficultyDefault) == 0x000020, "Member 'MenuSystemLibrary_GetGameSettings::DifficultyDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, LanguageDefault) == 0x000024, "Member 'MenuSystemLibrary_GetGameSettings::LanguageDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, SubtitlesEnabledDefault) == 0x000028, "Member 'MenuSystemLibrary_GetGameSettings::SubtitlesEnabledDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetGameSettings, ReturnValue) == 0x000029, "Member 'MenuSystemLibrary_GetGameSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetLanguageCodeArray
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetLanguageCodeArray final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetLanguageCodeArray) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetLanguageCodeArray");
static_assert(sizeof(MenuSystemLibrary_GetLanguageCodeArray) == 0x000010, "Wrong size on MenuSystemLibrary_GetLanguageCodeArray");
static_assert(offsetof(MenuSystemLibrary_GetLanguageCodeArray, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_GetLanguageCodeArray::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetPersistentVariable
// 0x0048 (0x0048 - 0x0000)
struct MenuSystemLibrary_GetPersistentVariable final
{
public:
	class FString                                 CustomVariableValue;                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SettingsSection;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomVariableName;                                // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomVariableValueDefault;                        // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetPersistentVariable) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetPersistentVariable");
static_assert(sizeof(MenuSystemLibrary_GetPersistentVariable) == 0x000048, "Wrong size on MenuSystemLibrary_GetPersistentVariable");
static_assert(offsetof(MenuSystemLibrary_GetPersistentVariable, CustomVariableValue) == 0x000000, "Member 'MenuSystemLibrary_GetPersistentVariable::CustomVariableValue' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPersistentVariable, SettingsSection) == 0x000010, "Member 'MenuSystemLibrary_GetPersistentVariable::SettingsSection' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPersistentVariable, CustomVariableName) == 0x000020, "Member 'MenuSystemLibrary_GetPersistentVariable::CustomVariableName' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPersistentVariable, CustomVariableValueDefault) == 0x000030, "Member 'MenuSystemLibrary_GetPersistentVariable::CustomVariableValueDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPersistentVariable, ReturnValue) == 0x000040, "Member 'MenuSystemLibrary_GetPersistentVariable::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetPostProcessingSettings
// 0x0018 (0x0018 - 0x0000)
struct MenuSystemLibrary_GetPostProcessingSettings final
{
public:
	bool                                          MotionBlur;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LensFlares;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SSR;                                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bloom;                                             // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasing;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AmbientOcclusion;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MotionBlurDefault;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LensFlaresDefault;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SSRDefault;                                        // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BloomDefault;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AntiAliasingDefault;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AmbientOcclusionDefault;                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetPostProcessingSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_GetPostProcessingSettings");
static_assert(sizeof(MenuSystemLibrary_GetPostProcessingSettings) == 0x000018, "Wrong size on MenuSystemLibrary_GetPostProcessingSettings");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, MotionBlur) == 0x000000, "Member 'MenuSystemLibrary_GetPostProcessingSettings::MotionBlur' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, LensFlares) == 0x000001, "Member 'MenuSystemLibrary_GetPostProcessingSettings::LensFlares' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, SSR) == 0x000002, "Member 'MenuSystemLibrary_GetPostProcessingSettings::SSR' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, Bloom) == 0x000003, "Member 'MenuSystemLibrary_GetPostProcessingSettings::Bloom' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, AntiAliasing) == 0x000004, "Member 'MenuSystemLibrary_GetPostProcessingSettings::AntiAliasing' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, AmbientOcclusion) == 0x000008, "Member 'MenuSystemLibrary_GetPostProcessingSettings::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, MotionBlurDefault) == 0x000009, "Member 'MenuSystemLibrary_GetPostProcessingSettings::MotionBlurDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, LensFlaresDefault) == 0x00000A, "Member 'MenuSystemLibrary_GetPostProcessingSettings::LensFlaresDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, SSRDefault) == 0x00000B, "Member 'MenuSystemLibrary_GetPostProcessingSettings::SSRDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, BloomDefault) == 0x00000C, "Member 'MenuSystemLibrary_GetPostProcessingSettings::BloomDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, AntiAliasingDefault) == 0x000010, "Member 'MenuSystemLibrary_GetPostProcessingSettings::AntiAliasingDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, AmbientOcclusionDefault) == 0x000014, "Member 'MenuSystemLibrary_GetPostProcessingSettings::AmbientOcclusionDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetPostProcessingSettings, ReturnValue) == 0x000015, "Member 'MenuSystemLibrary_GetPostProcessingSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetProjectVersion
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetProjectVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetProjectVersion) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetProjectVersion");
static_assert(sizeof(MenuSystemLibrary_GetProjectVersion) == 0x000010, "Wrong size on MenuSystemLibrary_GetProjectVersion");
static_assert(offsetof(MenuSystemLibrary_GetProjectVersion, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_GetProjectVersion::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetRaytracingSettings
// 0x0034 (0x0034 - 0x0000)
struct MenuSystemLibrary_GetRaytracingSettings final
{
public:
	int32                                         RaytracedShadows;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedReflections;                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedTranslucency;                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedAmbientOcclusion;                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedGlobalIllumination;                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSS;                                              // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedShadowsDefault;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedReflectionsDefault;                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedTranslucencyDefault;                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedAmbientDefault;                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedGlobalIlluminationDefault;                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSSDefault;                                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetRaytracingSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_GetRaytracingSettings");
static_assert(sizeof(MenuSystemLibrary_GetRaytracingSettings) == 0x000034, "Wrong size on MenuSystemLibrary_GetRaytracingSettings");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedShadows) == 0x000000, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedShadows' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedReflections) == 0x000004, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedReflections' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedTranslucency) == 0x000008, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedTranslucency' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedAmbientOcclusion) == 0x00000C, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedGlobalIllumination) == 0x000010, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedGlobalIllumination' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, DLSS) == 0x000014, "Member 'MenuSystemLibrary_GetRaytracingSettings::DLSS' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedShadowsDefault) == 0x000018, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedShadowsDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedReflectionsDefault) == 0x00001C, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedReflectionsDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedTranslucencyDefault) == 0x000020, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedTranslucencyDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedAmbientDefault) == 0x000024, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedAmbientDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, RaytracedGlobalIlluminationDefault) == 0x000028, "Member 'MenuSystemLibrary_GetRaytracingSettings::RaytracedGlobalIlluminationDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, DLSSDefault) == 0x00002C, "Member 'MenuSystemLibrary_GetRaytracingSettings::DLSSDefault' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetRaytracingSettings, ReturnValue) == 0x000030, "Member 'MenuSystemLibrary_GetRaytracingSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetScreenResolution
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_GetScreenResolution final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetScreenResolution) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetScreenResolution");
static_assert(sizeof(MenuSystemLibrary_GetScreenResolution) == 0x000010, "Wrong size on MenuSystemLibrary_GetScreenResolution");
static_assert(offsetof(MenuSystemLibrary_GetScreenResolution, ReturnValue) == 0x000000, "Member 'MenuSystemLibrary_GetScreenResolution::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetSupportedScreenResolutions
// 0x0018 (0x0018 - 0x0000)
struct MenuSystemLibrary_GetSupportedScreenResolutions final
{
public:
	TArray<class FString>                         Resolutions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentScreenResolutionIndex;                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_GetSupportedScreenResolutions) == 0x000008, "Wrong alignment on MenuSystemLibrary_GetSupportedScreenResolutions");
static_assert(sizeof(MenuSystemLibrary_GetSupportedScreenResolutions) == 0x000018, "Wrong size on MenuSystemLibrary_GetSupportedScreenResolutions");
static_assert(offsetof(MenuSystemLibrary_GetSupportedScreenResolutions, Resolutions) == 0x000000, "Member 'MenuSystemLibrary_GetSupportedScreenResolutions::Resolutions' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetSupportedScreenResolutions, CurrentScreenResolutionIndex) == 0x000010, "Member 'MenuSystemLibrary_GetSupportedScreenResolutions::CurrentScreenResolutionIndex' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetSupportedScreenResolutions, ReturnValue) == 0x000014, "Member 'MenuSystemLibrary_GetSupportedScreenResolutions::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.GetVRAM
// 0x0008 (0x0008 - 0x0000)
struct MenuSystemLibrary_GetVRAM final
{
public:
	float                                         UsedVRAM;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalVRAM;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_GetVRAM) == 0x000004, "Wrong alignment on MenuSystemLibrary_GetVRAM");
static_assert(sizeof(MenuSystemLibrary_GetVRAM) == 0x000008, "Wrong size on MenuSystemLibrary_GetVRAM");
static_assert(offsetof(MenuSystemLibrary_GetVRAM, UsedVRAM) == 0x000000, "Member 'MenuSystemLibrary_GetVRAM::UsedVRAM' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_GetVRAM, TotalVRAM) == 0x000004, "Member 'MenuSystemLibrary_GetVRAM::TotalVRAM' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetAudioSettings
// 0x0038 (0x0038 - 0x0000)
struct MenuSystemLibrary_SetAudioSettings final
{
public:
	float                                         MasterAudioVolume;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicAudioVolume;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SFXAudioVolume;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceAudioVolume;                                  // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            MasterSoundClass;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            MusicSoundClass;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            SFXSoundClass;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            VoiceSoundClass;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetAudioSettings) == 0x000008, "Wrong alignment on MenuSystemLibrary_SetAudioSettings");
static_assert(sizeof(MenuSystemLibrary_SetAudioSettings) == 0x000038, "Wrong size on MenuSystemLibrary_SetAudioSettings");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, MasterAudioVolume) == 0x000000, "Member 'MenuSystemLibrary_SetAudioSettings::MasterAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, MusicAudioVolume) == 0x000004, "Member 'MenuSystemLibrary_SetAudioSettings::MusicAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, SFXAudioVolume) == 0x000008, "Member 'MenuSystemLibrary_SetAudioSettings::SFXAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, VoiceAudioVolume) == 0x00000C, "Member 'MenuSystemLibrary_SetAudioSettings::VoiceAudioVolume' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, MasterSoundClass) == 0x000010, "Member 'MenuSystemLibrary_SetAudioSettings::MasterSoundClass' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, MusicSoundClass) == 0x000018, "Member 'MenuSystemLibrary_SetAudioSettings::MusicSoundClass' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, SFXSoundClass) == 0x000020, "Member 'MenuSystemLibrary_SetAudioSettings::SFXSoundClass' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, VoiceSoundClass) == 0x000028, "Member 'MenuSystemLibrary_SetAudioSettings::VoiceSoundClass' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetAudioSettings, ReturnValue) == 0x000030, "Member 'MenuSystemLibrary_SetAudioSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetBenchmarkAlreadyRan
// 0x0001 (0x0001 - 0x0000)
struct MenuSystemLibrary_SetBenchmarkAlreadyRan final
{
public:
	bool                                          BenchmarkAlreadyRan;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_SetBenchmarkAlreadyRan) == 0x000001, "Wrong alignment on MenuSystemLibrary_SetBenchmarkAlreadyRan");
static_assert(sizeof(MenuSystemLibrary_SetBenchmarkAlreadyRan) == 0x000001, "Wrong size on MenuSystemLibrary_SetBenchmarkAlreadyRan");
static_assert(offsetof(MenuSystemLibrary_SetBenchmarkAlreadyRan, BenchmarkAlreadyRan) == 0x000000, "Member 'MenuSystemLibrary_SetBenchmarkAlreadyRan::BenchmarkAlreadyRan' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetControlsSettings
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_SetControlsSettings final
{
public:
	bool                                          bInvertLookX;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertLookY;                                      // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraSpeedX;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraSpeedY;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRumble;                                           // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetControlsSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_SetControlsSettings");
static_assert(sizeof(MenuSystemLibrary_SetControlsSettings) == 0x000010, "Wrong size on MenuSystemLibrary_SetControlsSettings");
static_assert(offsetof(MenuSystemLibrary_SetControlsSettings, bInvertLookX) == 0x000000, "Member 'MenuSystemLibrary_SetControlsSettings::bInvertLookX' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetControlsSettings, bInvertLookY) == 0x000001, "Member 'MenuSystemLibrary_SetControlsSettings::bInvertLookY' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetControlsSettings, CameraSpeedX) == 0x000004, "Member 'MenuSystemLibrary_SetControlsSettings::CameraSpeedX' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetControlsSettings, CameraSpeedY) == 0x000008, "Member 'MenuSystemLibrary_SetControlsSettings::CameraSpeedY' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetControlsSettings, bRumble) == 0x00000C, "Member 'MenuSystemLibrary_SetControlsSettings::bRumble' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetControlsSettings, ReturnValue) == 0x00000D, "Member 'MenuSystemLibrary_SetControlsSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetDefaultActionMappings
// 0x0018 (0x0018 - 0x0000)
struct MenuSystemLibrary_SetDefaultActionMappings final
{
public:
	TArray<struct FInputActionKeyMapping>         ActionKeyMappings;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetDefaultActionMappings) == 0x000008, "Wrong alignment on MenuSystemLibrary_SetDefaultActionMappings");
static_assert(sizeof(MenuSystemLibrary_SetDefaultActionMappings) == 0x000018, "Wrong size on MenuSystemLibrary_SetDefaultActionMappings");
static_assert(offsetof(MenuSystemLibrary_SetDefaultActionMappings, ActionKeyMappings) == 0x000000, "Member 'MenuSystemLibrary_SetDefaultActionMappings::ActionKeyMappings' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetDefaultActionMappings, ReturnValue) == 0x000010, "Member 'MenuSystemLibrary_SetDefaultActionMappings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetDefaultAxisMappings
// 0x0018 (0x0018 - 0x0000)
struct MenuSystemLibrary_SetDefaultAxisMappings final
{
public:
	TArray<struct FInputAxisKeyMapping>           AxisKeyMappings;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetDefaultAxisMappings) == 0x000008, "Wrong alignment on MenuSystemLibrary_SetDefaultAxisMappings");
static_assert(sizeof(MenuSystemLibrary_SetDefaultAxisMappings) == 0x000018, "Wrong size on MenuSystemLibrary_SetDefaultAxisMappings");
static_assert(offsetof(MenuSystemLibrary_SetDefaultAxisMappings, AxisKeyMappings) == 0x000000, "Member 'MenuSystemLibrary_SetDefaultAxisMappings::AxisKeyMappings' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetDefaultAxisMappings, ReturnValue) == 0x000010, "Member 'MenuSystemLibrary_SetDefaultAxisMappings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetDefaultInputBindingsVersion
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_SetDefaultInputBindingsVersion final
{
public:
	class FString                                 DefaultInputBindingsVersion;                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_SetDefaultInputBindingsVersion) == 0x000008, "Wrong alignment on MenuSystemLibrary_SetDefaultInputBindingsVersion");
static_assert(sizeof(MenuSystemLibrary_SetDefaultInputBindingsVersion) == 0x000010, "Wrong size on MenuSystemLibrary_SetDefaultInputBindingsVersion");
static_assert(offsetof(MenuSystemLibrary_SetDefaultInputBindingsVersion, DefaultInputBindingsVersion) == 0x000000, "Member 'MenuSystemLibrary_SetDefaultInputBindingsVersion::DefaultInputBindingsVersion' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetDisplaySettings
// 0x000C (0x000C - 0x0000)
struct MenuSystemLibrary_SetDisplaySettings final
{
public:
	float                                         Brightness;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FieldOfView;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetDisplaySettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_SetDisplaySettings");
static_assert(sizeof(MenuSystemLibrary_SetDisplaySettings) == 0x00000C, "Wrong size on MenuSystemLibrary_SetDisplaySettings");
static_assert(offsetof(MenuSystemLibrary_SetDisplaySettings, Brightness) == 0x000000, "Member 'MenuSystemLibrary_SetDisplaySettings::Brightness' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetDisplaySettings, FieldOfView) == 0x000004, "Member 'MenuSystemLibrary_SetDisplaySettings::FieldOfView' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetDisplaySettings, ReturnValue) == 0x000008, "Member 'MenuSystemLibrary_SetDisplaySettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetGameSettings
// 0x000C (0x000C - 0x0000)
struct MenuSystemLibrary_SetGameSettings final
{
public:
	int32                                         Difficulty;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Language;                                          // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SubtitlesEnabled;                                  // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetGameSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_SetGameSettings");
static_assert(sizeof(MenuSystemLibrary_SetGameSettings) == 0x00000C, "Wrong size on MenuSystemLibrary_SetGameSettings");
static_assert(offsetof(MenuSystemLibrary_SetGameSettings, Difficulty) == 0x000000, "Member 'MenuSystemLibrary_SetGameSettings::Difficulty' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetGameSettings, Language) == 0x000004, "Member 'MenuSystemLibrary_SetGameSettings::Language' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetGameSettings, SubtitlesEnabled) == 0x000008, "Member 'MenuSystemLibrary_SetGameSettings::SubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetGameSettings, ReturnValue) == 0x000009, "Member 'MenuSystemLibrary_SetGameSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetLanguageCodeArray
// 0x0010 (0x0010 - 0x0000)
struct MenuSystemLibrary_SetLanguageCodeArray final
{
public:
	TArray<class FString>                         InLanguageCodeArray;                               // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_SetLanguageCodeArray) == 0x000008, "Wrong alignment on MenuSystemLibrary_SetLanguageCodeArray");
static_assert(sizeof(MenuSystemLibrary_SetLanguageCodeArray) == 0x000010, "Wrong size on MenuSystemLibrary_SetLanguageCodeArray");
static_assert(offsetof(MenuSystemLibrary_SetLanguageCodeArray, InLanguageCodeArray) == 0x000000, "Member 'MenuSystemLibrary_SetLanguageCodeArray::InLanguageCodeArray' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetPersistentVariable
// 0x0038 (0x0038 - 0x0000)
struct MenuSystemLibrary_SetPersistentVariable final
{
public:
	class FString                                 SettingsSection;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomVariableName;                                // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomVariableValue;                               // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetPersistentVariable) == 0x000008, "Wrong alignment on MenuSystemLibrary_SetPersistentVariable");
static_assert(sizeof(MenuSystemLibrary_SetPersistentVariable) == 0x000038, "Wrong size on MenuSystemLibrary_SetPersistentVariable");
static_assert(offsetof(MenuSystemLibrary_SetPersistentVariable, SettingsSection) == 0x000000, "Member 'MenuSystemLibrary_SetPersistentVariable::SettingsSection' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPersistentVariable, CustomVariableName) == 0x000010, "Member 'MenuSystemLibrary_SetPersistentVariable::CustomVariableName' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPersistentVariable, CustomVariableValue) == 0x000020, "Member 'MenuSystemLibrary_SetPersistentVariable::CustomVariableValue' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPersistentVariable, ReturnValue) == 0x000030, "Member 'MenuSystemLibrary_SetPersistentVariable::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetPostProcessingSettings
// 0x000C (0x000C - 0x0000)
struct MenuSystemLibrary_SetPostProcessingSettings final
{
public:
	bool                                          MotionBlur;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LensFlares;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SSR;                                               // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bloom;                                             // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasing;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AmbientOcclusion;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetPostProcessingSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_SetPostProcessingSettings");
static_assert(sizeof(MenuSystemLibrary_SetPostProcessingSettings) == 0x00000C, "Wrong size on MenuSystemLibrary_SetPostProcessingSettings");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, MotionBlur) == 0x000000, "Member 'MenuSystemLibrary_SetPostProcessingSettings::MotionBlur' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, LensFlares) == 0x000001, "Member 'MenuSystemLibrary_SetPostProcessingSettings::LensFlares' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, SSR) == 0x000002, "Member 'MenuSystemLibrary_SetPostProcessingSettings::SSR' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, Bloom) == 0x000003, "Member 'MenuSystemLibrary_SetPostProcessingSettings::Bloom' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, AntiAliasing) == 0x000004, "Member 'MenuSystemLibrary_SetPostProcessingSettings::AntiAliasing' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, AmbientOcclusion) == 0x000008, "Member 'MenuSystemLibrary_SetPostProcessingSettings::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetPostProcessingSettings, ReturnValue) == 0x000009, "Member 'MenuSystemLibrary_SetPostProcessingSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.SetRaytracingSettings
// 0x001C (0x001C - 0x0000)
struct MenuSystemLibrary_SetRaytracingSettings final
{
public:
	int32                                         RaytracedShadows;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedReflections;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedTranslucency;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedAmbientOcclusion;                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaytracedGlobalIllumination;                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DLSS;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuSystemLibrary_SetRaytracingSettings) == 0x000004, "Wrong alignment on MenuSystemLibrary_SetRaytracingSettings");
static_assert(sizeof(MenuSystemLibrary_SetRaytracingSettings) == 0x00001C, "Wrong size on MenuSystemLibrary_SetRaytracingSettings");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, RaytracedShadows) == 0x000000, "Member 'MenuSystemLibrary_SetRaytracingSettings::RaytracedShadows' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, RaytracedReflections) == 0x000004, "Member 'MenuSystemLibrary_SetRaytracingSettings::RaytracedReflections' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, RaytracedTranslucency) == 0x000008, "Member 'MenuSystemLibrary_SetRaytracingSettings::RaytracedTranslucency' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, RaytracedAmbientOcclusion) == 0x00000C, "Member 'MenuSystemLibrary_SetRaytracingSettings::RaytracedAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, RaytracedGlobalIllumination) == 0x000010, "Member 'MenuSystemLibrary_SetRaytracingSettings::RaytracedGlobalIllumination' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, DLSS) == 0x000014, "Member 'MenuSystemLibrary_SetRaytracingSettings::DLSS' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_SetRaytracingSettings, ReturnValue) == 0x000018, "Member 'MenuSystemLibrary_SetRaytracingSettings::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.StringToActionKeyMapping
// 0x0038 (0x0038 - 0x0000)
struct MenuSystemLibrary_StringToActionKeyMapping final
{
public:
	class FString                                 ActionKeyMappingString;                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_StringToActionKeyMapping) == 0x000008, "Wrong alignment on MenuSystemLibrary_StringToActionKeyMapping");
static_assert(sizeof(MenuSystemLibrary_StringToActionKeyMapping) == 0x000038, "Wrong size on MenuSystemLibrary_StringToActionKeyMapping");
static_assert(offsetof(MenuSystemLibrary_StringToActionKeyMapping, ActionKeyMappingString) == 0x000000, "Member 'MenuSystemLibrary_StringToActionKeyMapping::ActionKeyMappingString' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_StringToActionKeyMapping, ReturnValue) == 0x000010, "Member 'MenuSystemLibrary_StringToActionKeyMapping::ReturnValue' has a wrong offset!");

// Function MenuSystemPro.MenuSystemLibrary.StringToAxisKeyMapping
// 0x0038 (0x0038 - 0x0000)
struct MenuSystemLibrary_StringToAxisKeyMapping final
{
public:
	class FString                                 AxisKeyMappingString;                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuSystemLibrary_StringToAxisKeyMapping) == 0x000008, "Wrong alignment on MenuSystemLibrary_StringToAxisKeyMapping");
static_assert(sizeof(MenuSystemLibrary_StringToAxisKeyMapping) == 0x000038, "Wrong size on MenuSystemLibrary_StringToAxisKeyMapping");
static_assert(offsetof(MenuSystemLibrary_StringToAxisKeyMapping, AxisKeyMappingString) == 0x000000, "Member 'MenuSystemLibrary_StringToAxisKeyMapping::AxisKeyMappingString' has a wrong offset!");
static_assert(offsetof(MenuSystemLibrary_StringToAxisKeyMapping, ReturnValue) == 0x000010, "Member 'MenuSystemLibrary_StringToAxisKeyMapping::ReturnValue' has a wrong offset!");

}

