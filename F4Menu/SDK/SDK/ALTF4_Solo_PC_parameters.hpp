#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALTF4_Solo_PC

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function ALTF4_Solo_PC.ALTF4_Solo_PC_C.ExecuteUbergraph_ALTF4_Solo_PC
// 0x0090 (0x0090 - 0x0000)
struct ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x0008(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0020(0x0018)(HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_2;                        // 0x0040(0x0018)(HasGetValueTypeHash)
	TScriptInterface<class IBPI_Gameinstance_C>   K2Node_DynamicCast_AsBPI_Gameinstance;             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamMulti_GameInstance_C*             CallFunc_ALTF4GameInstanceRef_ALTF4_GI;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USaveGame*                              CallFunc_LoadGameFromSlot_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCustomSaveGameBP_C*                    K2Node_DynamicCast_AsCustom_Save_Game_BP;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC) == 0x000008, "Wrong alignment on ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC");
static_assert(sizeof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC) == 0x000090, "Wrong size on ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, EntryPoint) == 0x000000, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::EntryPoint' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_InputKeyEvent_Key_1) == 0x000008, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_InputKeyEvent_Key) == 0x000020, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, CallFunc_GetGameInstance_ReturnValue) == 0x000038, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_InputKeyEvent_Key_2) == 0x000040, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_InputKeyEvent_Key_2' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_DynamicCast_AsBPI_Gameinstance) == 0x000058, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_DynamicCast_AsBPI_Gameinstance' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, CallFunc_ALTF4GameInstanceRef_ALTF4_GI) == 0x000070, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::CallFunc_ALTF4GameInstanceRef_ALTF4_GI' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, CallFunc_LoadGameFromSlot_ReturnValue) == 0x000078, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::CallFunc_LoadGameFromSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_DynamicCast_AsCustom_Save_Game_BP) == 0x000080, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_DynamicCast_AsCustom_Save_Game_BP' has a wrong offset!");
static_assert(offsetof(ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'ALTF4_Solo_PC_C_ExecuteUbergraph_ALTF4_Solo_PC::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function ALTF4_Solo_PC.ALTF4_Solo_PC_C.InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0");
static_assert(sizeof(ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0");
static_assert(offsetof(ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'ALTF4_Solo_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function ALTF4_Solo_PC.ALTF4_Solo_PC_C.InpActEvt_P_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1");
static_assert(sizeof(ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1");
static_assert(offsetof(ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'ALTF4_Solo_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function ALTF4_Solo_PC.ALTF4_Solo_PC_C.InpActEvt_Escape_K2Node_InputKeyEvent_2
// 0x0018 (0x0018 - 0x0000)
struct ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2) == 0x000008, "Wrong alignment on ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2");
static_assert(sizeof(ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2) == 0x000018, "Wrong size on ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2");
static_assert(offsetof(ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2, Key) == 0x000000, "Member 'ALTF4_Solo_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2::Key' has a wrong offset!");

}

