#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameSettingsWidgetBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.ExecuteUbergraph_GameSettingsWidgetBP
// 0x0038 (0x0038 - 0x0000)
struct GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_ActiveIndex_2;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_ActiveIndex_1;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_ActiveIndex;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateFromMenu_1;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsGamepadBeingUsed;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateToMenu;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateFromMenu;                     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP");
static_assert(sizeof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP) == 0x000038, "Wrong size on GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, EntryPoint) == 0x000000, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_ComponentBoundEvent_ActiveIndex_2) == 0x000004, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_ComponentBoundEvent_ActiveIndex_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_ComponentBoundEvent_ActiveIndex_1) == 0x000008, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_ComponentBoundEvent_ActiveIndex_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_ComponentBoundEvent_ActiveIndex) == 0x00000C, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_ComponentBoundEvent_ActiveIndex' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_Event_NavigateFromMenu_1) == 0x000010, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_Event_NavigateFromMenu_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_Event_bIsGamepadBeingUsed) == 0x000018, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_Event_bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_Event_NavigateToMenu) == 0x000020, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_Event_NavigateToMenu' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_Event_NavigateFromMenu) == 0x000028, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_Event_NavigateFromMenu' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP, K2Node_Event_IsDesignTime) == 0x000030, "Member 'GameSettingsWidgetBP_C_ExecuteUbergraph_GameSettingsWidgetBP::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature final
{
public:
	int32                                         ActiveIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature) == 0x000004, "Wrong alignment on GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature");
static_assert(sizeof(GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature) == 0x000004, "Wrong size on GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature");
static_assert(offsetof(GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature, ActiveIndex) == 0x000000, "Member 'GameSettingsWidgetBP_C_BndEvt__SubtitleOptionsPicker_K2Node_ComponentBoundEvent_7_OnOptionChanged__DelegateSignature::ActiveIndex' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature final
{
public:
	int32                                         ActiveIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature) == 0x000004, "Wrong alignment on GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature");
static_assert(sizeof(GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature) == 0x000004, "Wrong size on GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature");
static_assert(offsetof(GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature, ActiveIndex) == 0x000000, "Member 'GameSettingsWidgetBP_C_BndEvt__LanguageOptionsPicker_K2Node_ComponentBoundEvent_6_OnOptionChanged__DelegateSignature::ActiveIndex' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature final
{
public:
	int32                                         ActiveIndex;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature) == 0x000004, "Wrong alignment on GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature");
static_assert(sizeof(GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature) == 0x000004, "Wrong size on GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature");
static_assert(offsetof(GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature, ActiveIndex) == 0x000000, "Member 'GameSettingsWidgetBP_C_BndEvt__DifficultyOptionsPicker_K2Node_ComponentBoundEvent_5_OnOptionChanged__DelegateSignature::ActiveIndex' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.UpdateDescription
// 0x0008 (0x0008 - 0x0000)
struct GameSettingsWidgetBP_C_UpdateDescription final
{
public:
	class UInteractableUserWidget_C*              InWidget;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_UpdateDescription) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_UpdateDescription");
static_assert(sizeof(GameSettingsWidgetBP_C_UpdateDescription) == 0x000008, "Wrong size on GameSettingsWidgetBP_C_UpdateDescription");
static_assert(offsetof(GameSettingsWidgetBP_C_UpdateDescription, InWidget) == 0x000000, "Member 'GameSettingsWidgetBP_C_UpdateDescription::InWidget' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.ApplyGameSettings
// 0x0002 (0x0002 - 0x0000)
struct GameSettingsWidgetBP_C_ApplyGameSettings final
{
public:
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetGameSettings_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_ApplyGameSettings) == 0x000001, "Wrong alignment on GameSettingsWidgetBP_C_ApplyGameSettings");
static_assert(sizeof(GameSettingsWidgetBP_C_ApplyGameSettings) == 0x000002, "Wrong size on GameSettingsWidgetBP_C_ApplyGameSettings");
static_assert(offsetof(GameSettingsWidgetBP_C_ApplyGameSettings, CallFunc_Conv_IntToBool_ReturnValue) == 0x000000, "Member 'GameSettingsWidgetBP_C_ApplyGameSettings::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ApplyGameSettings, CallFunc_SetGameSettings_ReturnValue) == 0x000001, "Member 'GameSettingsWidgetBP_C_ApplyGameSettings::CallFunc_SetGameSettings_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.LoadGameSettings
// 0x0004 (0x0004 - 0x0000)
struct GameSettingsWidgetBP_C_LoadGameSettings final
{
public:
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_LoadGameSettings) == 0x000004, "Wrong alignment on GameSettingsWidgetBP_C_LoadGameSettings");
static_assert(sizeof(GameSettingsWidgetBP_C_LoadGameSettings) == 0x000004, "Wrong size on GameSettingsWidgetBP_C_LoadGameSettings");
static_assert(offsetof(GameSettingsWidgetBP_C_LoadGameSettings, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000000, "Member 'GameSettingsWidgetBP_C_LoadGameSettings::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.MarkSettingsAsDirty
// 0x0001 (0x0001 - 0x0000)
struct GameSettingsWidgetBP_C_MarkSettingsAsDirty final
{
public:
	bool                                          CallFunc_DirtyCheck_bIsReallyDirty;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_MarkSettingsAsDirty) == 0x000001, "Wrong alignment on GameSettingsWidgetBP_C_MarkSettingsAsDirty");
static_assert(sizeof(GameSettingsWidgetBP_C_MarkSettingsAsDirty) == 0x000001, "Wrong size on GameSettingsWidgetBP_C_MarkSettingsAsDirty");
static_assert(offsetof(GameSettingsWidgetBP_C_MarkSettingsAsDirty, CallFunc_DirtyCheck_bIsReallyDirty) == 0x000000, "Member 'GameSettingsWidgetBP_C_MarkSettingsAsDirty::CallFunc_DirtyCheck_bIsReallyDirty' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.SetupLanguageOptions
// 0x0060 (0x0060 - 0x0000)
struct GameSettingsWidgetBP_C_SetupLanguageOptions final
{
public:
	int32                                         ___int_Array_Index_Variable;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetCultureDisplayName_ReturnValue;        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_SetupLanguageOptions) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_SetupLanguageOptions");
static_assert(sizeof(GameSettingsWidgetBP_C_SetupLanguageOptions) == 0x000060, "Wrong size on GameSettingsWidgetBP_C_SetupLanguageOptions");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, ___int_Array_Index_Variable) == 0x000000, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Array_Get_Item) == 0x000008, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_GetCultureDisplayName_ReturnValue) == 0x000018, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_GetCultureDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Greater_IntInt_ReturnValue) == 0x00004C, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, ___int_Loop_Counter_Variable) == 0x000050, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetupLanguageOptions, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'GameSettingsWidgetBP_C_SetupLanguageOptions::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.ShowDecisionDialog
// 0x0010 (0x0010 - 0x0000)
struct GameSettingsWidgetBP_C_ShowDecisionDialog final
{
public:
	bool                                          CallFunc_GetIsGamepadBeingUsed_bIsGamepadBeingUsed; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_ShowDecisionDialog) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_ShowDecisionDialog");
static_assert(sizeof(GameSettingsWidgetBP_C_ShowDecisionDialog) == 0x000010, "Wrong size on GameSettingsWidgetBP_C_ShowDecisionDialog");
static_assert(offsetof(GameSettingsWidgetBP_C_ShowDecisionDialog, CallFunc_GetIsGamepadBeingUsed_bIsGamepadBeingUsed) == 0x000000, "Member 'GameSettingsWidgetBP_C_ShowDecisionDialog::CallFunc_GetIsGamepadBeingUsed_bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ShowDecisionDialog, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'GameSettingsWidgetBP_C_ShowDecisionDialog::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.SetGlobalSettings
// 0x0930 (0x0930 - 0x0000)
struct GameSettingsWidgetBP_C_SetGlobalSettings final
{
public:
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor;                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor;      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor;    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor;              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor_1;              // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor_1;         // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor_1;    // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor_1;    // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor_1;  // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor_1;            // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor_1;            // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor_1;    // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor_1;  // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_MainFont;                  // 0x0120(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_SmallTitleFont;            // 0x0178(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_MediumTitleFont;           // 0x01D0(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_LargeTitleFont;            // 0x0228(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_ValueFont;                 // 0x0280(0x0058)(HasGetValueTypeHash)
	bool                                          CallFunc_GetGlobalFonts_OnlyUppercase;             // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor_2;              // 0x02DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor_2;         // 0x02EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor_2;    // 0x02FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor_2;    // 0x030C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor_2;  // 0x031C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor_2;            // 0x032C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor_2;            // 0x033C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor_2;    // 0x034C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor_2;  // 0x035C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_MainFont_1;                // 0x0370(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_SmallTitleFont_1;          // 0x03C8(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_MediumTitleFont_1;         // 0x0420(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_LargeTitleFont_1;          // 0x0478(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_ValueFont_1;               // 0x04D0(0x0058)(HasGetValueTypeHash)
	bool                                          CallFunc_GetGlobalFonts_OnlyUppercase_1;           // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor_3;              // 0x052C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor_3;         // 0x053C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor_3;    // 0x054C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor_3;    // 0x055C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor_3;  // 0x056C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor_3;            // 0x057C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor_3;            // 0x058C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor_3;    // 0x059C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor_3;  // 0x05AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor_4;              // 0x05BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor_4;         // 0x05CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor_4;    // 0x05DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor_4;    // 0x05EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor_4;  // 0x05FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor_4;            // 0x060C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor_4;            // 0x061C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor_4;    // 0x062C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor_4;  // 0x063C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor_5;              // 0x064C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor_5;         // 0x065C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor_5;    // 0x066C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor_5;    // 0x067C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor_5;  // 0x068C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor_5;            // 0x069C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor_5;            // 0x06AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor_5;    // 0x06BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor_5;  // 0x06CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_MainFont_2;                // 0x06E0(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_SmallTitleFont_2;          // 0x0738(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_MediumTitleFont_2;         // 0x0790(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_LargeTitleFont_2;          // 0x07E8(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         CallFunc_GetGlobalFonts_ValueFont_2;               // 0x0840(0x0058)(HasGetValueTypeHash)
	bool                                          CallFunc_GetGlobalFonts_OnlyUppercase_2;           // 0x0898(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_899[0x3];                                      // 0x0899(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor_6;              // 0x089C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor_6;         // 0x08AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor_6;    // 0x08BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor_6;    // 0x08CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor_6;  // 0x08DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor_6;            // 0x08EC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor_6;            // 0x08FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor_6;    // 0x090C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor_6;  // 0x091C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_SetGlobalSettings) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_SetGlobalSettings");
static_assert(sizeof(GameSettingsWidgetBP_C_SetGlobalSettings) == 0x000930, "Wrong size on GameSettingsWidgetBP_C_SetGlobalSettings");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor) == 0x000000, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor) == 0x000010, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor) == 0x000020, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor) == 0x000030, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor) == 0x000040, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor) == 0x000050, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor) == 0x000060, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor) == 0x000070, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor) == 0x000080, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor_1) == 0x000090, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor_1) == 0x0000A0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor_1) == 0x0000B0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor_1) == 0x0000C0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor_1) == 0x0000D0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor_1) == 0x0000E0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor_1) == 0x0000F0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor_1) == 0x000100, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor_1) == 0x000110, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_MainFont) == 0x000120, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_MainFont' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_SmallTitleFont) == 0x000178, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_SmallTitleFont' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_MediumTitleFont) == 0x0001D0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_MediumTitleFont' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_LargeTitleFont) == 0x000228, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_LargeTitleFont' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_ValueFont) == 0x000280, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_ValueFont' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_OnlyUppercase) == 0x0002D8, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_OnlyUppercase' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor_2) == 0x0002DC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor_2) == 0x0002EC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor_2) == 0x0002FC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor_2) == 0x00030C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor_2) == 0x00031C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor_2) == 0x00032C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor_2) == 0x00033C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor_2) == 0x00034C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor_2) == 0x00035C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_MainFont_1) == 0x000370, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_MainFont_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_SmallTitleFont_1) == 0x0003C8, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_SmallTitleFont_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_MediumTitleFont_1) == 0x000420, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_MediumTitleFont_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_LargeTitleFont_1) == 0x000478, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_LargeTitleFont_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_ValueFont_1) == 0x0004D0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_ValueFont_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_OnlyUppercase_1) == 0x000528, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_OnlyUppercase_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor_3) == 0x00052C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor_3) == 0x00053C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor_3) == 0x00054C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor_3) == 0x00055C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor_3) == 0x00056C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor_3) == 0x00057C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor_3) == 0x00058C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor_3) == 0x00059C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor_3) == 0x0005AC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor_3' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor_4) == 0x0005BC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor_4) == 0x0005CC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor_4) == 0x0005DC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor_4) == 0x0005EC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor_4) == 0x0005FC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor_4) == 0x00060C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor_4) == 0x00061C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor_4) == 0x00062C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor_4) == 0x00063C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor_4' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor_5) == 0x00064C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor_5) == 0x00065C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor_5) == 0x00066C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor_5) == 0x00067C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor_5) == 0x00068C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor_5) == 0x00069C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor_5) == 0x0006AC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor_5) == 0x0006BC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor_5) == 0x0006CC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor_5' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_MainFont_2) == 0x0006E0, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_MainFont_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_SmallTitleFont_2) == 0x000738, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_SmallTitleFont_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_MediumTitleFont_2) == 0x000790, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_MediumTitleFont_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_LargeTitleFont_2) == 0x0007E8, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_LargeTitleFont_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_ValueFont_2) == 0x000840, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_ValueFont_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalFonts_OnlyUppercase_2) == 0x000898, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalFonts_OnlyUppercase_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor_6) == 0x00089C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor_6) == 0x0008AC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor_6) == 0x0008BC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor_6) == 0x0008CC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor_6) == 0x0008DC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor_6) == 0x0008EC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor_6) == 0x0008FC, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor_6) == 0x00090C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor_6' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor_6) == 0x00091C, "Member 'GameSettingsWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor_6' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.ResetGameSettings
// 0x0002 (0x0002 - 0x0000)
struct GameSettingsWidgetBP_C_ResetGameSettings final
{
public:
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetGameSettings_ReturnValue;              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_ResetGameSettings) == 0x000001, "Wrong alignment on GameSettingsWidgetBP_C_ResetGameSettings");
static_assert(sizeof(GameSettingsWidgetBP_C_ResetGameSettings) == 0x000002, "Wrong size on GameSettingsWidgetBP_C_ResetGameSettings");
static_assert(offsetof(GameSettingsWidgetBP_C_ResetGameSettings, CallFunc_Conv_IntToBool_ReturnValue) == 0x000000, "Member 'GameSettingsWidgetBP_C_ResetGameSettings::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_ResetGameSettings, CallFunc_SetGameSettings_ReturnValue) == 0x000001, "Member 'GameSettingsWidgetBP_C_ResetGameSettings::CallFunc_SetGameSettings_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.DirtyCheck
// 0x0005 (0x0005 - 0x0000)
struct GameSettingsWidgetBP_C_DirtyCheck final
{
public:
	bool                                          bIsReallyDirty;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_DirtyCheck) == 0x000001, "Wrong alignment on GameSettingsWidgetBP_C_DirtyCheck");
static_assert(sizeof(GameSettingsWidgetBP_C_DirtyCheck) == 0x000005, "Wrong size on GameSettingsWidgetBP_C_DirtyCheck");
static_assert(offsetof(GameSettingsWidgetBP_C_DirtyCheck, bIsReallyDirty) == 0x000000, "Member 'GameSettingsWidgetBP_C_DirtyCheck::bIsReallyDirty' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_DirtyCheck, CallFunc_Conv_IntToBool_ReturnValue) == 0x000001, "Member 'GameSettingsWidgetBP_C_DirtyCheck::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_DirtyCheck, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000002, "Member 'GameSettingsWidgetBP_C_DirtyCheck::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_DirtyCheck, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000003, "Member 'GameSettingsWidgetBP_C_DirtyCheck::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_DirtyCheck, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000004, "Member 'GameSettingsWidgetBP_C_DirtyCheck::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.GetSavedGameSettings
// 0x0028 (0x0028 - 0x0000)
struct GameSettingsWidgetBP_C_GetSavedGameSettings final
{
public:
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetGameSettings_Difficulty;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetGameSettings_Language;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetGameSettings_SubtitlesEnabled;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_GetGameSettings_Languages;                // 0x0010(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetGameSettings_ReturnValue;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_GetSavedGameSettings) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_GetSavedGameSettings");
static_assert(sizeof(GameSettingsWidgetBP_C_GetSavedGameSettings) == 0x000028, "Wrong size on GameSettingsWidgetBP_C_GetSavedGameSettings");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSavedGameSettings, CallFunc_Conv_IntToBool_ReturnValue) == 0x000000, "Member 'GameSettingsWidgetBP_C_GetSavedGameSettings::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSavedGameSettings, CallFunc_GetGameSettings_Difficulty) == 0x000004, "Member 'GameSettingsWidgetBP_C_GetSavedGameSettings::CallFunc_GetGameSettings_Difficulty' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSavedGameSettings, CallFunc_GetGameSettings_Language) == 0x000008, "Member 'GameSettingsWidgetBP_C_GetSavedGameSettings::CallFunc_GetGameSettings_Language' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSavedGameSettings, CallFunc_GetGameSettings_SubtitlesEnabled) == 0x00000C, "Member 'GameSettingsWidgetBP_C_GetSavedGameSettings::CallFunc_GetGameSettings_SubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSavedGameSettings, CallFunc_GetGameSettings_Languages) == 0x000010, "Member 'GameSettingsWidgetBP_C_GetSavedGameSettings::CallFunc_GetGameSettings_Languages' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSavedGameSettings, CallFunc_GetGameSettings_ReturnValue) == 0x000020, "Member 'GameSettingsWidgetBP_C_GetSavedGameSettings::CallFunc_GetGameSettings_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.SetCurrentLanguage
// 0x0020 (0x0020 - 0x0000)
struct GameSettingsWidgetBP_C_SetCurrentLanguage final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentCulture_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCurrentCulture_ReturnValue_1;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_SetCurrentLanguage) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_SetCurrentLanguage");
static_assert(sizeof(GameSettingsWidgetBP_C_SetCurrentLanguage) == 0x000020, "Wrong size on GameSettingsWidgetBP_C_SetCurrentLanguage");
static_assert(offsetof(GameSettingsWidgetBP_C_SetCurrentLanguage, InIndex) == 0x000000, "Member 'GameSettingsWidgetBP_C_SetCurrentLanguage::InIndex' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetCurrentLanguage, CallFunc_SetCurrentCulture_ReturnValue) == 0x000004, "Member 'GameSettingsWidgetBP_C_SetCurrentLanguage::CallFunc_SetCurrentCulture_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetCurrentLanguage, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000005, "Member 'GameSettingsWidgetBP_C_SetCurrentLanguage::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetCurrentLanguage, CallFunc_Array_Get_Item) == 0x000008, "Member 'GameSettingsWidgetBP_C_SetCurrentLanguage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetCurrentLanguage, CallFunc_SetCurrentCulture_ReturnValue_1) == 0x000018, "Member 'GameSettingsWidgetBP_C_SetCurrentLanguage::CallFunc_SetCurrentCulture_ReturnValue_1' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.GetSystemLanguage
// 0x0050 (0x0050 - 0x0000)
struct GameSettingsWidgetBP_C_GetSystemLanguage final
{
public:
	int32                                         ___int_Array_Index_Variable;                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDefaultLanguage_ReturnValue;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetSuitableCulture_ReturnValue;           // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_GetSystemLanguage) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_GetSystemLanguage");
static_assert(sizeof(GameSettingsWidgetBP_C_GetSystemLanguage) == 0x000050, "Wrong size on GameSettingsWidgetBP_C_GetSystemLanguage");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, ___int_Array_Index_Variable) == 0x000000, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_GetDefaultLanguage_ReturnValue) == 0x000008, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_GetDefaultLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, ___int_Loop_Counter_Variable) == 0x000018, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_Array_Get_Item) == 0x000020, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_GetSuitableCulture_ReturnValue) == 0x000038, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_GetSuitableCulture_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_GetSystemLanguage, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000049, "Member 'GameSettingsWidgetBP_C_GetSystemLanguage::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.SetLanguageCodeArray
// 0x0050 (0x0050 - 0x0000)
struct GameSettingsWidgetBP_C_SetLanguageCodeArray final
{
public:
	TArray<class FText>                           LanguageCodeArray_0;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Array_Get_Item;                           // 0x0018(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_SetLanguageCodeArray) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_SetLanguageCodeArray");
static_assert(sizeof(GameSettingsWidgetBP_C_SetLanguageCodeArray) == 0x000050, "Wrong size on GameSettingsWidgetBP_C_SetLanguageCodeArray");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, LanguageCodeArray_0) == 0x000000, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::LanguageCodeArray_0' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, ___int_Array_Index_Variable) == 0x000014, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, CallFunc_Array_Get_Item) == 0x000018, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, CallFunc_Conv_TextToString_ReturnValue) == 0x000030, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, ___int_Loop_Counter_Variable) == 0x000040, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_SetLanguageCodeArray, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'GameSettingsWidgetBP_C_SetLanguageCodeArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.F_BloodEffectSetting
// 0x0070 (0x0070 - 0x0000)
struct GameSettingsWidgetBP_C_F_BloodEffectSetting final
{
public:
	int32                                         In_Index;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamMulti_GameInstance_C*             K2Node_DynamicCast_AsSteam_Multi_Game_Instance;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ALTF4_Pawn_C*                       K2Node_DynamicCast_AsBP_ALTF4_Pawn;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ALTF4_Pawn_C*                       K2Node_DynamicCast_AsBP_ALTF4_Pawn_1;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue_1;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USteamMulti_GameInstance_C*             K2Node_DynamicCast_AsSteam_Multi_Game_Instance_1;  // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_F_BloodEffectSetting) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_F_BloodEffectSetting");
static_assert(sizeof(GameSettingsWidgetBP_C_F_BloodEffectSetting) == 0x000070, "Wrong size on GameSettingsWidgetBP_C_F_BloodEffectSetting");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, In_Index) == 0x000000, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::In_Index' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_AsSteam_Multi_Game_Instance) == 0x000018, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_AsSteam_Multi_Game_Instance' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000021, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000028, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_AsBP_ALTF4_Pawn) == 0x000030, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_AsBP_ALTF4_Pawn' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000040, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_AsBP_ALTF4_Pawn_1) == 0x000048, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_AsBP_ALTF4_Pawn_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, CallFunc_GetGameInstance_ReturnValue_1) == 0x000058, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::CallFunc_GetGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_AsSteam_Multi_Game_Instance_1) == 0x000060, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_AsSteam_Multi_Game_Instance_1' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_F_BloodEffectSetting, K2Node_DynamicCast_bSuccess_3) == 0x000068, "Member 'GameSettingsWidgetBP_C_F_BloodEffectSetting::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GameSettingsWidgetBP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_PreConstruct) == 0x000001, "Wrong alignment on GameSettingsWidgetBP_C_PreConstruct");
static_assert(sizeof(GameSettingsWidgetBP_C_PreConstruct) == 0x000001, "Wrong size on GameSettingsWidgetBP_C_PreConstruct");
static_assert(offsetof(GameSettingsWidgetBP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GameSettingsWidgetBP_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.OnNavigationExit
// 0x0010 (0x0010 - 0x0000)
struct GameSettingsWidgetBP_C_OnNavigationExit final
{
public:
	class UInteractableMenuWidgetBP_C*            NavigateToMenu;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            NavigateFromMenu;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GameSettingsWidgetBP_C_OnNavigationExit) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_OnNavigationExit");
static_assert(sizeof(GameSettingsWidgetBP_C_OnNavigationExit) == 0x000010, "Wrong size on GameSettingsWidgetBP_C_OnNavigationExit");
static_assert(offsetof(GameSettingsWidgetBP_C_OnNavigationExit, NavigateToMenu) == 0x000000, "Member 'GameSettingsWidgetBP_C_OnNavigationExit::NavigateToMenu' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_OnNavigationExit, NavigateFromMenu) == 0x000008, "Member 'GameSettingsWidgetBP_C_OnNavigationExit::NavigateFromMenu' has a wrong offset!");

// Function GameSettingsWidgetBP.GameSettingsWidgetBP_C.OnNavigationEnter
// 0x0010 (0x0010 - 0x0000)
struct GameSettingsWidgetBP_C_OnNavigationEnter final
{
public:
	class UInteractableMenuWidgetBP_C*            NavigateFromMenu;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsGamepadBeingUsed_0;                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GameSettingsWidgetBP_C_OnNavigationEnter) == 0x000008, "Wrong alignment on GameSettingsWidgetBP_C_OnNavigationEnter");
static_assert(sizeof(GameSettingsWidgetBP_C_OnNavigationEnter) == 0x000010, "Wrong size on GameSettingsWidgetBP_C_OnNavigationEnter");
static_assert(offsetof(GameSettingsWidgetBP_C_OnNavigationEnter, NavigateFromMenu) == 0x000000, "Member 'GameSettingsWidgetBP_C_OnNavigationEnter::NavigateFromMenu' has a wrong offset!");
static_assert(offsetof(GameSettingsWidgetBP_C_OnNavigationEnter, bIsGamepadBeingUsed_0) == 0x000008, "Member 'GameSettingsWidgetBP_C_OnNavigationEnter::bIsGamepadBeingUsed_0' has a wrong offset!");

}

