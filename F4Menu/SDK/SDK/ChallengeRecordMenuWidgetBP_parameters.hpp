#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeRecordMenuWidgetBP

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ChallengeRecordMenuWidgetBP.ChallengeRecordMenuWidgetBP_C.ExecuteUbergraph_ChallengeRecordMenuWidgetBP
// 0x0068 (0x0068 - 0x0000)
struct ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateFromMenu_1;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsGamepadBeingUsed;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateToMenu;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            K2Node_Event_NavigateFromMenu;                     // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_IsClosed_Variable;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMainMenuContainerWidgetBP_C*           K2Node_DynamicCast_AsMain_Menu_Container_Widget_BP; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMainMenuContainerWidgetBP_C*           K2Node_DynamicCast_AsMain_Menu_Container_Widget_BP_1; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USteamMulti_GameInstance_C*             K2Node_DynamicCast_AsSteam_Multi_Game_Instance;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP) == 0x000008, "Wrong alignment on ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP");
static_assert(sizeof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP) == 0x000068, "Wrong size on ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, EntryPoint) == 0x000000, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_Event_NavigateFromMenu_1) == 0x000008, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_Event_NavigateFromMenu_1' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_Event_bIsGamepadBeingUsed) == 0x000010, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_Event_bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_Event_NavigateToMenu) == 0x000018, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_Event_NavigateToMenu' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_Event_NavigateFromMenu) == 0x000020, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_Event_NavigateFromMenu' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, ___bool_IsClosed_Variable) == 0x000028, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, ___bool_Has_Been_Initd_Variable) == 0x000029, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_Event_IsDesignTime) == 0x00002A, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_DynamicCast_AsMain_Menu_Container_Widget_BP) == 0x000030, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_DynamicCast_AsMain_Menu_Container_Widget_BP' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_DynamicCast_AsMain_Menu_Container_Widget_BP_1) == 0x000040, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_DynamicCast_AsMain_Menu_Container_Widget_BP_1' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, CallFunc_GetGameInstance_ReturnValue) == 0x000050, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_DynamicCast_AsSteam_Multi_Game_Instance) == 0x000058, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_DynamicCast_AsSteam_Multi_Game_Instance' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP, K2Node_DynamicCast_bSuccess_2) == 0x000060, "Member 'ChallengeRecordMenuWidgetBP_C_ExecuteUbergraph_ChallengeRecordMenuWidgetBP::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function ChallengeRecordMenuWidgetBP.ChallengeRecordMenuWidgetBP_C.SetGlobalSettings
// 0x0090 (0x0090 - 0x0000)
struct ChallengeRecordMenuWidgetBP_C_SetGlobalSettings final
{
public:
	struct FLinearColor                           CallFunc_GetGlobalColors_MainColor;                // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightColor;           // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_HighlightExtraColor;      // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_MenuBackgroundColor;      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_WidgetBackgroundColor;    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SymbolColor;              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SubtleColor;              // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_DecisionButtonColor;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetGlobalColors_SliderBackgroundColor;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings) == 0x000004, "Wrong alignment on ChallengeRecordMenuWidgetBP_C_SetGlobalSettings");
static_assert(sizeof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings) == 0x000090, "Wrong size on ChallengeRecordMenuWidgetBP_C_SetGlobalSettings");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MainColor) == 0x000000, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MainColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightColor) == 0x000010, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_HighlightExtraColor) == 0x000020, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_HighlightExtraColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_MenuBackgroundColor) == 0x000030, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_MenuBackgroundColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_WidgetBackgroundColor) == 0x000040, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_WidgetBackgroundColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SymbolColor) == 0x000050, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SymbolColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SubtleColor) == 0x000060, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SubtleColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_DecisionButtonColor) == 0x000070, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_DecisionButtonColor' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_SetGlobalSettings, CallFunc_GetGlobalColors_SliderBackgroundColor) == 0x000080, "Member 'ChallengeRecordMenuWidgetBP_C_SetGlobalSettings::CallFunc_GetGlobalColors_SliderBackgroundColor' has a wrong offset!");

// Function ChallengeRecordMenuWidgetBP.ChallengeRecordMenuWidgetBP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ChallengeRecordMenuWidgetBP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeRecordMenuWidgetBP_C_PreConstruct) == 0x000001, "Wrong alignment on ChallengeRecordMenuWidgetBP_C_PreConstruct");
static_assert(sizeof(ChallengeRecordMenuWidgetBP_C_PreConstruct) == 0x000001, "Wrong size on ChallengeRecordMenuWidgetBP_C_PreConstruct");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ChallengeRecordMenuWidgetBP_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ChallengeRecordMenuWidgetBP.ChallengeRecordMenuWidgetBP_C.OnNavigationExit
// 0x0010 (0x0010 - 0x0000)
struct ChallengeRecordMenuWidgetBP_C_OnNavigationExit final
{
public:
	class UInteractableMenuWidgetBP_C*            NavigateToMenu;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInteractableMenuWidgetBP_C*            NavigateFromMenu;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeRecordMenuWidgetBP_C_OnNavigationExit) == 0x000008, "Wrong alignment on ChallengeRecordMenuWidgetBP_C_OnNavigationExit");
static_assert(sizeof(ChallengeRecordMenuWidgetBP_C_OnNavigationExit) == 0x000010, "Wrong size on ChallengeRecordMenuWidgetBP_C_OnNavigationExit");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_OnNavigationExit, NavigateToMenu) == 0x000000, "Member 'ChallengeRecordMenuWidgetBP_C_OnNavigationExit::NavigateToMenu' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_OnNavigationExit, NavigateFromMenu) == 0x000008, "Member 'ChallengeRecordMenuWidgetBP_C_OnNavigationExit::NavigateFromMenu' has a wrong offset!");

// Function ChallengeRecordMenuWidgetBP.ChallengeRecordMenuWidgetBP_C.OnNavigationEnter
// 0x0010 (0x0010 - 0x0000)
struct ChallengeRecordMenuWidgetBP_C_OnNavigationEnter final
{
public:
	class UInteractableMenuWidgetBP_C*            NavigateFromMenu;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_bIsGamepadBeingUsed;                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeRecordMenuWidgetBP_C_OnNavigationEnter) == 0x000008, "Wrong alignment on ChallengeRecordMenuWidgetBP_C_OnNavigationEnter");
static_assert(sizeof(ChallengeRecordMenuWidgetBP_C_OnNavigationEnter) == 0x000010, "Wrong size on ChallengeRecordMenuWidgetBP_C_OnNavigationEnter");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_OnNavigationEnter, NavigateFromMenu) == 0x000000, "Member 'ChallengeRecordMenuWidgetBP_C_OnNavigationEnter::NavigateFromMenu' has a wrong offset!");
static_assert(offsetof(ChallengeRecordMenuWidgetBP_C_OnNavigationEnter, Param_bIsGamepadBeingUsed) == 0x000008, "Member 'ChallengeRecordMenuWidgetBP_C_OnNavigationEnter::Param_bIsGamepadBeingUsed' has a wrong offset!");

}

