#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KeyboardKey

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GlobalInteractableUserWidget_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass KeyboardKey.KeyboardKey_C
// 0x0088 (0x0680 - 0x05F8)
class UKeyboardKey_C final : public UGlobalInteractableUserWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_KeyboardKey_C;                      // 0x05F8(0x0008)(ZeroConstructor, Transient, DuplicateTransient, UObjectWrapper)
	class UButton*                                KeyButton;                                         // 0x0600(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 KeyImage;                                          // 0x0608(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             KeyTexture;                                        // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   MappedKey;                                         // 0x0618(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FVector2D                              KeySize;                                           // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHoveredKeyboardKey;                              // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           KeyboardKeyBgColor;                                // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KeyboardKeyHighlightColor;                         // 0x0658(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           KeyboardKeyExtraHightlightColor;                   // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsHighlighted;                                    // 0x0678(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnHoveredKeyboardKey__DelegateSignature(const struct FKey& InKey);
	void ExecuteUbergraph_KeyboardKey(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnGlobalSettingsApply();
	void BndEvt__KeyButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();
	void Highlight(bool bHighlight, bool bFocusHighlight);
	void SetGlobalSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"KeyboardKey_C">();
	}
	static class UKeyboardKey_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyboardKey_C>();
	}
};
static_assert(alignof(UKeyboardKey_C) == 0x000008, "Wrong alignment on UKeyboardKey_C");
static_assert(sizeof(UKeyboardKey_C) == 0x000680, "Wrong size on UKeyboardKey_C");
static_assert(offsetof(UKeyboardKey_C, UberGraphFrame_KeyboardKey_C) == 0x0005F8, "Member 'UKeyboardKey_C::UberGraphFrame_KeyboardKey_C' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeyButton) == 0x000600, "Member 'UKeyboardKey_C::KeyButton' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeyImage) == 0x000608, "Member 'UKeyboardKey_C::KeyImage' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeyTexture) == 0x000610, "Member 'UKeyboardKey_C::KeyTexture' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, MappedKey) == 0x000618, "Member 'UKeyboardKey_C::MappedKey' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeySize) == 0x000630, "Member 'UKeyboardKey_C::KeySize' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, OnHoveredKeyboardKey) == 0x000638, "Member 'UKeyboardKey_C::OnHoveredKeyboardKey' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeyboardKeyBgColor) == 0x000648, "Member 'UKeyboardKey_C::KeyboardKeyBgColor' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeyboardKeyHighlightColor) == 0x000658, "Member 'UKeyboardKey_C::KeyboardKeyHighlightColor' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, KeyboardKeyExtraHightlightColor) == 0x000668, "Member 'UKeyboardKey_C::KeyboardKeyExtraHightlightColor' has a wrong offset!");
static_assert(offsetof(UKeyboardKey_C, bIsHighlighted) == 0x000678, "Member 'UKeyboardKey_C::bIsHighlighted' has a wrong offset!");

}

