#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ai_pawn_ver2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ai_pawn_ver2.BP_ai_pawn_ver2_C
// 0x01A0 (0x0660 - 0x04C0)
class ABP_ai_pawn_ver2_C final : public ACharacter
{
public:
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        EnermyBoom_Cue;                                    // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       UltimateDetect;                                    // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      HitCapsule;                                        // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SearchBox;                                         // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  RadialForce;                                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HitBox;                                            // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    CameraBoom;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HeadOverlap;                                       // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      FallingCapsule;                                    // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       OneCamera;                                         // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ThreeCamera;                                       // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PhysOut_Phys_6C6F262044465DC3E47CABB9C711D6FE;     // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            PhysOut__Direction_6C6F262044465DC3E47CABB9C711D6FE; // 0x052C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52D[0x3];                                      // 0x052D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PhysOut;                                           // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         BaseTurnRate;                                      // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseLookUpRate;                                    // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Camera3_;                                          // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Camera_YawMax;                                     // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_PitchMax;                                   // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationRateCurrent;                               // 0x054C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UAnimBP_Character_C*                    AnimBP;                                            // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleHalfHeight_Var;                             // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapsuleRadius_Var;                                 // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove_;                                          // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_569[0x3];                                      // 0x0569(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ActorLocation;                                     // 0x056C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HeadRotation;                                      // 0x0578(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WallJump_;                                         // 0x0584(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanWallJump_;                                      // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFalling_;                                        // 0x0586(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateToVelocity_;                                 // 0x0587(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ControllerRotation;                                // 0x0588(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RotateToController_;                               // 0x0594(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Climb_;                                            // 0x0595(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanJump_;                                          // 0x0596(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanIK_;                                            // 0x0597(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Ragdol_;                                           // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PushPawn_;                                         // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59A[0x2];                                      // 0x059A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MoveTo;                                            // 0x059C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClimbStartWorldLOcation;                           // 0x05A8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B4[0x4];                                      // 0x05B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageStanding;                                   // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StandingProcess_;                                  // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C1[0x3];                                      // 0x05C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClimbEndWorldLOcation;                             // 0x05C4(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClientCapsuleLocation;                             // 0x05D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFlatten;                                    // 0x05DC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CLientMeshVelocity;                                // 0x05E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                GameInstance;                                      // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FallingCapsuleShell;                               // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           StandUp_FaceSky;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StandUp_FaceFloor;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATargetPoint*                           Target;                                            // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Die_;                                              // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Slideing_;                                         // 0x0621(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Go_;                                               // 0x0622(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_623[0x5];                                      // 0x0623(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AEgg_shot_BP_C*>                 Eggshot;                                           // 0x0628(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_ALTF4_Pawn_C*>               ALTF4_Pawn;                                        // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PlayerDown_;                                       // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USteamMulti_GameInstance_C*             ALTF4_GI;                                          // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ai_pawn_ver2(int32 EntryPoint);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_40(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_47(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_79(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_90(float AxisValue);
	void InpAxisEvt_TurnRate_K2Node_InputAxisEvent_38(float AxisValue);
	void InpAxisEvt_LookUpRate_K2Node_InputAxisEvent_53(float AxisValue);
	void SetRotationRateTo_Null();
	void SetRotationRateTo_Current();
	void WallJumpProcessStart();
	void Server_IkSet(bool Can_);
	void Server_MontageSet(class UAnimMontage* Param_MontageStanding);
	void Server_RagdollSwitch(bool On_);
	void All_RagdollSwitch(bool On_);
	void Server_StandingProcess(bool On_);
	void All_StandingProcess(bool On_);
	void All_MontageSet(class UAnimMontage* Param_MontageStanding);
	void ToRagdoll();
	void All_CapsuleUpdateLocation(const struct FVector& Location);
	void Server_CapsuleUpdate(const struct FVector& Location);
	void Client_GetMeshVelocity();
	void Server_SetMeshVelocity(const struct FVector& Velocity);
	void All_SetMeshVelocity(const struct FVector& Velocity);
	void ClientGetCapsuleLocation();
	void Client_RepRagdoll();
	void Server_RepRagdoll(const struct FVector& LinearVelocity, const struct FVector& AngularVelocity);
	void Server_StandingDetect();
	void All_StandingDetect();
	void Server_HeadRotation();
	void Server_GetYawRotation();
	void ClimbRelease();
	void ClimbEnd();
	void ClimbLocation(const struct FVector& Start, const struct FVector& End);
	void DamageReset();
	void BndEvt__BP_ai_pawn_ver2_UltimateDetect_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void AI_CollisionTypeOri();
	void AI_CollisionTypeChange();
	void UltimateKill_AI();
	void BndEvt__BP_ai_pawn_ver2_HitCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void BndEvt__Box1_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Go();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveTick(float DeltaSeconds);
	void BndEvt__HeadFalling_K2Node_ComponentBoundEvent_648_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__FallingCapsule_K2Node_ComponentBoundEvent_27_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnLanded(const struct FHitResult& Hit);
	void InpActEvt_Jump_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpTchEvt_Pressed(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpTchEvt_Released(ETouchIndex FingerIndex, const struct FVector& Location);
	void InpActEvt_C_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void OnSuccess_C88FCAFA4F0BC5D092EE998C6F975E8B(EPathFollowingResult MovementResult);
	void OnFail_C88FCAFA4F0BC5D092EE998C6F975E8B(EPathFollowingResult MovementResult);
	void PhysOut__UpdateFunc();
	void PhysOut__FinishedFunc();
	void UserConstructionScript();
	void F_Owner_SetCameraMode();
	void F_GetLoockRotation();
	void F_SetRotationPawnFromControll(bool Rotate_);
	void F_GetCanWallJump(bool* Can_);
	void F_JumpPressed();
	void F_SetCanMoving(bool Can_);
	void F_GetHitResult(class UPrimitiveComponent* Component, const struct FHitResult& Hit, bool* CanRagdol_);
	void F_GetOverlapResult(class UObject* Object, class UPrimitiveComponent* Comp, bool* CanRagdol_, struct FVector* Direction);
	void F_SetInputMode(uint8 ToMode, class UWidget* Widget, bool ShowCursos_);
	void F_GetFVectorAndRightVector(struct FVector* ForwardVector, struct FVector* RightVector);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ai_pawn_ver2_C">();
	}
	static class ABP_ai_pawn_ver2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ai_pawn_ver2_C>();
	}
};
static_assert(alignof(ABP_ai_pawn_ver2_C) == 0x000010, "Wrong alignment on ABP_ai_pawn_ver2_C");
static_assert(sizeof(ABP_ai_pawn_ver2_C) == 0x000660, "Wrong size on ABP_ai_pawn_ver2_C");
static_assert(offsetof(ABP_ai_pawn_ver2_C, UberGraphFrame) == 0x0004C0, "Member 'ABP_ai_pawn_ver2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, EnermyBoom_Cue) == 0x0004C8, "Member 'ABP_ai_pawn_ver2_C::EnermyBoom_Cue' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, UltimateDetect) == 0x0004D0, "Member 'ABP_ai_pawn_ver2_C::UltimateDetect' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, HitCapsule) == 0x0004D8, "Member 'ABP_ai_pawn_ver2_C::HitCapsule' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, SearchBox) == 0x0004E0, "Member 'ABP_ai_pawn_ver2_C::SearchBox' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, RadialForce) == 0x0004E8, "Member 'ABP_ai_pawn_ver2_C::RadialForce' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, HitBox) == 0x0004F0, "Member 'ABP_ai_pawn_ver2_C::HitBox' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CameraBoom) == 0x0004F8, "Member 'ABP_ai_pawn_ver2_C::CameraBoom' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, PhysicalAnimation) == 0x000500, "Member 'ABP_ai_pawn_ver2_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, HeadOverlap) == 0x000508, "Member 'ABP_ai_pawn_ver2_C::HeadOverlap' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, FallingCapsule) == 0x000510, "Member 'ABP_ai_pawn_ver2_C::FallingCapsule' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, OneCamera) == 0x000518, "Member 'ABP_ai_pawn_ver2_C::OneCamera' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ThreeCamera) == 0x000520, "Member 'ABP_ai_pawn_ver2_C::ThreeCamera' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, PhysOut_Phys_6C6F262044465DC3E47CABB9C711D6FE) == 0x000528, "Member 'ABP_ai_pawn_ver2_C::PhysOut_Phys_6C6F262044465DC3E47CABB9C711D6FE' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, PhysOut__Direction_6C6F262044465DC3E47CABB9C711D6FE) == 0x00052C, "Member 'ABP_ai_pawn_ver2_C::PhysOut__Direction_6C6F262044465DC3E47CABB9C711D6FE' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, PhysOut) == 0x000530, "Member 'ABP_ai_pawn_ver2_C::PhysOut' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, BaseTurnRate) == 0x000538, "Member 'ABP_ai_pawn_ver2_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, BaseLookUpRate) == 0x00053C, "Member 'ABP_ai_pawn_ver2_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Camera3_) == 0x000540, "Member 'ABP_ai_pawn_ver2_C::Camera3_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Camera_YawMax) == 0x000544, "Member 'ABP_ai_pawn_ver2_C::Camera_YawMax' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Camera_PitchMax) == 0x000548, "Member 'ABP_ai_pawn_ver2_C::Camera_PitchMax' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, RotationRateCurrent) == 0x00054C, "Member 'ABP_ai_pawn_ver2_C::RotationRateCurrent' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, AnimBP) == 0x000558, "Member 'ABP_ai_pawn_ver2_C::AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CapsuleHalfHeight_Var) == 0x000560, "Member 'ABP_ai_pawn_ver2_C::CapsuleHalfHeight_Var' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CapsuleRadius_Var) == 0x000564, "Member 'ABP_ai_pawn_ver2_C::CapsuleRadius_Var' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CanMove_) == 0x000568, "Member 'ABP_ai_pawn_ver2_C::CanMove_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ActorLocation) == 0x00056C, "Member 'ABP_ai_pawn_ver2_C::ActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, HeadRotation) == 0x000578, "Member 'ABP_ai_pawn_ver2_C::HeadRotation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, WallJump_) == 0x000584, "Member 'ABP_ai_pawn_ver2_C::WallJump_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CanWallJump_) == 0x000585, "Member 'ABP_ai_pawn_ver2_C::CanWallJump_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, IsFalling_) == 0x000586, "Member 'ABP_ai_pawn_ver2_C::IsFalling_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, RotateToVelocity_) == 0x000587, "Member 'ABP_ai_pawn_ver2_C::RotateToVelocity_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ControllerRotation) == 0x000588, "Member 'ABP_ai_pawn_ver2_C::ControllerRotation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, RotateToController_) == 0x000594, "Member 'ABP_ai_pawn_ver2_C::RotateToController_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Climb_) == 0x000595, "Member 'ABP_ai_pawn_ver2_C::Climb_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CanJump_) == 0x000596, "Member 'ABP_ai_pawn_ver2_C::CanJump_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CanIK_) == 0x000597, "Member 'ABP_ai_pawn_ver2_C::CanIK_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Ragdol_) == 0x000598, "Member 'ABP_ai_pawn_ver2_C::Ragdol_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, PushPawn_) == 0x000599, "Member 'ABP_ai_pawn_ver2_C::PushPawn_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, MoveTo) == 0x00059C, "Member 'ABP_ai_pawn_ver2_C::MoveTo' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ClimbStartWorldLOcation) == 0x0005A8, "Member 'ABP_ai_pawn_ver2_C::ClimbStartWorldLOcation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, MontageStanding) == 0x0005B8, "Member 'ABP_ai_pawn_ver2_C::MontageStanding' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, StandingProcess_) == 0x0005C0, "Member 'ABP_ai_pawn_ver2_C::StandingProcess_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ClimbEndWorldLOcation) == 0x0005C4, "Member 'ABP_ai_pawn_ver2_C::ClimbEndWorldLOcation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ClientCapsuleLocation) == 0x0005D0, "Member 'ABP_ai_pawn_ver2_C::ClientCapsuleLocation' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, RagdollFlatten) == 0x0005DC, "Member 'ABP_ai_pawn_ver2_C::RagdollFlatten' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, CLientMeshVelocity) == 0x0005E0, "Member 'ABP_ai_pawn_ver2_C::CLientMeshVelocity' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, GameInstance) == 0x0005F0, "Member 'ABP_ai_pawn_ver2_C::GameInstance' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, DynamicMaterial) == 0x0005F8, "Member 'ABP_ai_pawn_ver2_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, FallingCapsuleShell) == 0x000600, "Member 'ABP_ai_pawn_ver2_C::FallingCapsuleShell' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, StandUp_FaceSky) == 0x000608, "Member 'ABP_ai_pawn_ver2_C::StandUp_FaceSky' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, StandUp_FaceFloor) == 0x000610, "Member 'ABP_ai_pawn_ver2_C::StandUp_FaceFloor' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Target) == 0x000618, "Member 'ABP_ai_pawn_ver2_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Die_) == 0x000620, "Member 'ABP_ai_pawn_ver2_C::Die_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Slideing_) == 0x000621, "Member 'ABP_ai_pawn_ver2_C::Slideing_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Go_) == 0x000622, "Member 'ABP_ai_pawn_ver2_C::Go_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, Eggshot) == 0x000628, "Member 'ABP_ai_pawn_ver2_C::Eggshot' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ALTF4_Pawn) == 0x000638, "Member 'ABP_ai_pawn_ver2_C::ALTF4_Pawn' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, PlayerDown_) == 0x000648, "Member 'ABP_ai_pawn_ver2_C::PlayerDown_' has a wrong offset!");
static_assert(offsetof(ABP_ai_pawn_ver2_C, ALTF4_GI) == 0x000650, "Member 'ABP_ai_pawn_ver2_C::ALTF4_GI' has a wrong offset!");

}

