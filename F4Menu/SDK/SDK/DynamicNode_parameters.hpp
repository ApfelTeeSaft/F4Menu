#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicNode

#include "Basic.hpp"

#include "DynamicNode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function DynamicNode.AnimTransitionSet_DN.SetManuallyNextTransitionAnimation
// 0x0020 (0x0020 - 0x0000)
struct AnimTransitionSet_DN_SetManuallyNextTransitionAnimation final
{
public:
	struct FTransitionSetData_DN                  NextTransitionAnimation;                           // 0x0000(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimTransitionSet_DN_SetManuallyNextTransitionAnimation) == 0x000008, "Wrong alignment on AnimTransitionSet_DN_SetManuallyNextTransitionAnimation");
static_assert(sizeof(AnimTransitionSet_DN_SetManuallyNextTransitionAnimation) == 0x000020, "Wrong size on AnimTransitionSet_DN_SetManuallyNextTransitionAnimation");
static_assert(offsetof(AnimTransitionSet_DN_SetManuallyNextTransitionAnimation, NextTransitionAnimation) == 0x000000, "Member 'AnimTransitionSet_DN_SetManuallyNextTransitionAnimation::NextTransitionAnimation' has a wrong offset!");

// Function DynamicNode.AnimChanceSet_DN.GetDefaultAnimation
// 0x0008 (0x0008 - 0x0000)
struct AnimChanceSet_DN_GetDefaultAnimation final
{
public:
	class UAnimationAsset*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimChanceSet_DN_GetDefaultAnimation) == 0x000008, "Wrong alignment on AnimChanceSet_DN_GetDefaultAnimation");
static_assert(sizeof(AnimChanceSet_DN_GetDefaultAnimation) == 0x000008, "Wrong size on AnimChanceSet_DN_GetDefaultAnimation");
static_assert(offsetof(AnimChanceSet_DN_GetDefaultAnimation, ReturnValue) == 0x000000, "Member 'AnimChanceSet_DN_GetDefaultAnimation::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimChanceSet_DN.SetNextAnimation
// 0x0010 (0x0010 - 0x0000)
struct AnimChanceSet_DN_SetNextAnimation final
{
public:
	class UAnimationAsset*                        AnimSequence;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanChangeAnimInRuntimeOutOverride;                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimChanceSet_DN_SetNextAnimation) == 0x000008, "Wrong alignment on AnimChanceSet_DN_SetNextAnimation");
static_assert(sizeof(AnimChanceSet_DN_SetNextAnimation) == 0x000010, "Wrong size on AnimChanceSet_DN_SetNextAnimation");
static_assert(offsetof(AnimChanceSet_DN_SetNextAnimation, AnimSequence) == 0x000000, "Member 'AnimChanceSet_DN_SetNextAnimation::AnimSequence' has a wrong offset!");
static_assert(offsetof(AnimChanceSet_DN_SetNextAnimation, CanChangeAnimInRuntimeOutOverride) == 0x000008, "Member 'AnimChanceSet_DN_SetNextAnimation::CanChangeAnimInRuntimeOutOverride' has a wrong offset!");

// Function DynamicNode.AnimChanceSet_DN.SetNextIndex
// 0x0008 (0x0008 - 0x0000)
struct AnimChanceSet_DN_SetNextIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanChangeAnimInRuntimeOutOverride;                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimChanceSet_DN_SetNextIndex) == 0x000004, "Wrong alignment on AnimChanceSet_DN_SetNextIndex");
static_assert(sizeof(AnimChanceSet_DN_SetNextIndex) == 0x000008, "Wrong size on AnimChanceSet_DN_SetNextIndex");
static_assert(offsetof(AnimChanceSet_DN_SetNextIndex, Param_Index) == 0x000000, "Member 'AnimChanceSet_DN_SetNextIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(AnimChanceSet_DN_SetNextIndex, CanChangeAnimInRuntimeOutOverride) == 0x000004, "Member 'AnimChanceSet_DN_SetNextIndex::CanChangeAnimInRuntimeOutOverride' has a wrong offset!");

// Function DynamicNode.AnimChanceSet_DN.SetParentAsset
// 0x0010 (0x0010 - 0x0000)
struct AnimChanceSet_DN_SetParentAsset final
{
public:
	class UAnimChanceSet_DN*                      ParentChanceSet;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseParentDataOnlyOnce;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimChanceSet_DN_SetParentAsset) == 0x000008, "Wrong alignment on AnimChanceSet_DN_SetParentAsset");
static_assert(sizeof(AnimChanceSet_DN_SetParentAsset) == 0x000010, "Wrong size on AnimChanceSet_DN_SetParentAsset");
static_assert(offsetof(AnimChanceSet_DN_SetParentAsset, ParentChanceSet) == 0x000000, "Member 'AnimChanceSet_DN_SetParentAsset::ParentChanceSet' has a wrong offset!");
static_assert(offsetof(AnimChanceSet_DN_SetParentAsset, UseParentDataOnlyOnce) == 0x000008, "Member 'AnimChanceSet_DN_SetParentAsset::UseParentDataOnlyOnce' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.DebugFloatInput
// 0x0004 (0x0004 - 0x0000)
struct AnimMultiNodeInstance_DN_DebugFloatInput final
{
public:
	float                                         DebugVelue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_DebugFloatInput) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_DebugFloatInput");
static_assert(sizeof(AnimMultiNodeInstance_DN_DebugFloatInput) == 0x000004, "Wrong size on AnimMultiNodeInstance_DN_DebugFloatInput");
static_assert(offsetof(AnimMultiNodeInstance_DN_DebugFloatInput, DebugVelue) == 0x000000, "Member 'AnimMultiNodeInstance_DN_DebugFloatInput::DebugVelue' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.EquipThingCallBack
// 0x0028 (0x0028 - 0x0000)
struct AnimMultiNodeInstance_DN_EquipThingCallBack final
{
public:
	uint8                                         StackPriority;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                LinkedSequence;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndOfTrack;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_EquipThingCallBack) == 0x000008, "Wrong alignment on AnimMultiNodeInstance_DN_EquipThingCallBack");
static_assert(sizeof(AnimMultiNodeInstance_DN_EquipThingCallBack) == 0x000028, "Wrong size on AnimMultiNodeInstance_DN_EquipThingCallBack");
static_assert(offsetof(AnimMultiNodeInstance_DN_EquipThingCallBack, StackPriority) == 0x000000, "Member 'AnimMultiNodeInstance_DN_EquipThingCallBack::StackPriority' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_EquipThingCallBack, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_EquipThingCallBack::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_EquipThingCallBack, NotifyName) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_EquipThingCallBack::NotifyName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_EquipThingCallBack, LinkedSequence) == 0x000018, "Member 'AnimMultiNodeInstance_DN_EquipThingCallBack::LinkedSequence' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_EquipThingCallBack, EndOfTrack) == 0x000020, "Member 'AnimMultiNodeInstance_DN_EquipThingCallBack::EndOfTrack' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.GetBlendSpaceInput
// 0x0018 (0x0018 - 0x0000)
struct AnimMultiNodeInstance_DN_GetBlendSpaceInput final
{
public:
	struct FVector                                InBlendInput;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetTarget;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceGet2Multi;                                    // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_GetBlendSpaceInput) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_GetBlendSpaceInput");
static_assert(sizeof(AnimMultiNodeInstance_DN_GetBlendSpaceInput) == 0x000018, "Wrong size on AnimMultiNodeInstance_DN_GetBlendSpaceInput");
static_assert(offsetof(AnimMultiNodeInstance_DN_GetBlendSpaceInput, InBlendInput) == 0x000000, "Member 'AnimMultiNodeInstance_DN_GetBlendSpaceInput::InBlendInput' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_GetBlendSpaceInput, BoneName) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_GetBlendSpaceInput::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_GetBlendSpaceInput, GetTarget) == 0x000014, "Member 'AnimMultiNodeInstance_DN_GetBlendSpaceInput::GetTarget' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_GetBlendSpaceInput, ForceGet2Multi) == 0x000015, "Member 'AnimMultiNodeInstance_DN_GetBlendSpaceInput::ForceGet2Multi' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.GetLength
// 0x000C (0x000C - 0x0000)
struct AnimMultiNodeInstance_DN_GetLength final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_GetLength) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_GetLength");
static_assert(sizeof(AnimMultiNodeInstance_DN_GetLength) == 0x00000C, "Wrong size on AnimMultiNodeInstance_DN_GetLength");
static_assert(offsetof(AnimMultiNodeInstance_DN_GetLength, BoneName) == 0x000000, "Member 'AnimMultiNodeInstance_DN_GetLength::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_GetLength, ReturnValue) == 0x000008, "Member 'AnimMultiNodeInstance_DN_GetLength::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.ImpactHandleCallBack
// 0x0028 (0x0028 - 0x0000)
struct AnimMultiNodeInstance_DN_ImpactHandleCallBack final
{
public:
	uint8                                         StackPriority;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAnimSequenceBase*                LinkedSequence;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndOfTrack;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_ImpactHandleCallBack) == 0x000008, "Wrong alignment on AnimMultiNodeInstance_DN_ImpactHandleCallBack");
static_assert(sizeof(AnimMultiNodeInstance_DN_ImpactHandleCallBack) == 0x000028, "Wrong size on AnimMultiNodeInstance_DN_ImpactHandleCallBack");
static_assert(offsetof(AnimMultiNodeInstance_DN_ImpactHandleCallBack, StackPriority) == 0x000000, "Member 'AnimMultiNodeInstance_DN_ImpactHandleCallBack::StackPriority' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_ImpactHandleCallBack, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_ImpactHandleCallBack::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_ImpactHandleCallBack, NotifyName) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_ImpactHandleCallBack::NotifyName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_ImpactHandleCallBack, LinkedSequence) == 0x000018, "Member 'AnimMultiNodeInstance_DN_ImpactHandleCallBack::LinkedSequence' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_ImpactHandleCallBack, EndOfTrack) == 0x000020, "Member 'AnimMultiNodeInstance_DN_ImpactHandleCallBack::EndOfTrack' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.MultiTransitionToMontageFromCurPose
// 0x0028 (0x0028 - 0x0000)
struct AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose final
{
public:
	class UAnimMontage*                           AnimationAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromSection;                                   // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckSameAsset;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSyncGroups;                                     // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose) == 0x000008, "Wrong alignment on AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose");
static_assert(sizeof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose) == 0x000028, "Wrong size on AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, AnimationAsset) == 0x000000, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::AnimationAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, TransitionTime) == 0x000008, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::TransitionTime' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, bIsLooping) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::bIsLooping' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, InPlayRate) == 0x000010, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::InPlayRate' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, PlayFromSection) == 0x000014, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::PlayFromSection' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, StartingPosition) == 0x00001C, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::StartingPosition' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, CheckSameAsset) == 0x000020, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::CheckSameAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, UseSyncGroups) == 0x000021, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::UseSyncGroups' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose, ReturnValue) == 0x000022, "Member 'AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.PlayAnim
// 0x000C (0x000C - 0x0000)
struct AnimMultiNodeInstance_DN_PlayAnim final
{
public:
	bool                                          bIsLooping;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartPosition;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_PlayAnim) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_PlayAnim");
static_assert(sizeof(AnimMultiNodeInstance_DN_PlayAnim) == 0x00000C, "Wrong size on AnimMultiNodeInstance_DN_PlayAnim");
static_assert(offsetof(AnimMultiNodeInstance_DN_PlayAnim, bIsLooping) == 0x000000, "Member 'AnimMultiNodeInstance_DN_PlayAnim::bIsLooping' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_PlayAnim, InPlayRate) == 0x000004, "Member 'AnimMultiNodeInstance_DN_PlayAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_PlayAnim, InStartPosition) == 0x000008, "Member 'AnimMultiNodeInstance_DN_PlayAnim::InStartPosition' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetBlendSpaceInput
// 0x0018 (0x0018 - 0x0000)
struct AnimMultiNodeInstance_DN_SetBlendSpaceInput final
{
public:
	struct FVector                                InBlendInput;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Instantly;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceSetNOTMultiAsset;                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetBlendSpaceInput) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetBlendSpaceInput");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetBlendSpaceInput) == 0x000018, "Wrong size on AnimMultiNodeInstance_DN_SetBlendSpaceInput");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetBlendSpaceInput, InBlendInput) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetBlendSpaceInput::InBlendInput' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetBlendSpaceInput, BoneName) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_SetBlendSpaceInput::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetBlendSpaceInput, Instantly) == 0x000014, "Member 'AnimMultiNodeInstance_DN_SetBlendSpaceInput::Instantly' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetBlendSpaceInput, ForceSetNOTMultiAsset) == 0x000015, "Member 'AnimMultiNodeInstance_DN_SetBlendSpaceInput::ForceSetNOTMultiAsset' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetBlendSpaceInputBlendingThreshold
// 0x0004 (0x0004 - 0x0000)
struct AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold final
{
public:
	float                                         BlendingThreshold;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold) == 0x000004, "Wrong size on AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold, BlendingThreshold) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold::BlendingThreshold' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetLooping
// 0x000C (0x000C - 0x0000)
struct AnimMultiNodeInstance_DN_SetLooping final
{
public:
	bool                                          bIsLooping;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetLooping) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetLooping");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetLooping) == 0x00000C, "Wrong size on AnimMultiNodeInstance_DN_SetLooping");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetLooping, bIsLooping) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetLooping::bIsLooping' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetLooping, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_SetLooping::BoneName' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetPlaying
// 0x000C (0x000C - 0x0000)
struct AnimMultiNodeInstance_DN_SetPlaying final
{
public:
	bool                                          bIsPlaying;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetPlaying) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetPlaying");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetPlaying) == 0x00000C, "Wrong size on AnimMultiNodeInstance_DN_SetPlaying");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPlaying, bIsPlaying) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetPlaying::bIsPlaying' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPlaying, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_SetPlaying::BoneName' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetPlayRate
// 0x000C (0x000C - 0x0000)
struct AnimMultiNodeInstance_DN_SetPlayRate final
{
public:
	float                                         InPlayRate;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetPlayRate) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetPlayRate");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetPlayRate) == 0x00000C, "Wrong size on AnimMultiNodeInstance_DN_SetPlayRate");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPlayRate, InPlayRate) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetPlayRate::InPlayRate' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPlayRate, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_SetPlayRate::BoneName' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetPosition
// 0x0010 (0x0010 - 0x0000)
struct AnimMultiNodeInstance_DN_SetPosition final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireNotifies;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetPosition) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetPosition");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetPosition) == 0x000010, "Wrong size on AnimMultiNodeInstance_DN_SetPosition");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPosition, InPosition) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetPosition::InPosition' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPosition, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_SetPosition::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPosition, bFireNotifies) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_SetPosition::bFireNotifies' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetPositionWithPreviousTime
// 0x0014 (0x0014 - 0x0000)
struct AnimMultiNodeInstance_DN_SetPositionWithPreviousTime final
{
public:
	float                                         InPosition;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPreviousTime;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireNotifies;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetPositionWithPreviousTime) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetPositionWithPreviousTime");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetPositionWithPreviousTime) == 0x000014, "Wrong size on AnimMultiNodeInstance_DN_SetPositionWithPreviousTime");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPositionWithPreviousTime, InPosition) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetPositionWithPreviousTime::InPosition' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPositionWithPreviousTime, InPreviousTime) == 0x000004, "Member 'AnimMultiNodeInstance_DN_SetPositionWithPreviousTime::InPreviousTime' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPositionWithPreviousTime, BoneName) == 0x000008, "Member 'AnimMultiNodeInstance_DN_SetPositionWithPreviousTime::BoneName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPositionWithPreviousTime, bFireNotifies) == 0x000010, "Member 'AnimMultiNodeInstance_DN_SetPositionWithPreviousTime::bFireNotifies' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetPreviewCurveOverride
// 0x0010 (0x0010 - 0x0000)
struct AnimMultiNodeInstance_DN_SetPreviewCurveOverride final
{
public:
	class FName                                   PoseName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveIfZero;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetPreviewCurveOverride) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetPreviewCurveOverride");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetPreviewCurveOverride) == 0x000010, "Wrong size on AnimMultiNodeInstance_DN_SetPreviewCurveOverride");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPreviewCurveOverride, PoseName) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetPreviewCurveOverride::PoseName' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPreviewCurveOverride, Value) == 0x000008, "Member 'AnimMultiNodeInstance_DN_SetPreviewCurveOverride::Value' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetPreviewCurveOverride, bRemoveIfZero) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_SetPreviewCurveOverride::bRemoveIfZero' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.SetReverse
// 0x000C (0x000C - 0x0000)
struct AnimMultiNodeInstance_DN_SetReverse final
{
public:
	bool                                          bInReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimMultiNodeInstance_DN_SetReverse) == 0x000004, "Wrong alignment on AnimMultiNodeInstance_DN_SetReverse");
static_assert(sizeof(AnimMultiNodeInstance_DN_SetReverse) == 0x00000C, "Wrong size on AnimMultiNodeInstance_DN_SetReverse");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetReverse, bInReverse) == 0x000000, "Member 'AnimMultiNodeInstance_DN_SetReverse::bInReverse' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_SetReverse, BoneName) == 0x000004, "Member 'AnimMultiNodeInstance_DN_SetReverse::BoneName' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.TransitionToAnimFromCurPose_Notify
// 0x0028 (0x0028 - 0x0000)
struct AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify final
{
public:
	class UAnimationAsset*                        ToNewAsset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromNotify;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTillNotify;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckTheSameAsset;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify) == 0x000008, "Wrong alignment on AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify");
static_assert(sizeof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify) == 0x000028, "Wrong size on AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, ToNewAsset) == 0x000000, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::ToNewAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, PlayFromNotify) == 0x000008, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::PlayFromNotify' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, PlayTillNotify) == 0x000010, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::PlayTillNotify' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, TransitionTime) == 0x000018, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::TransitionTime' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, InPlayRate) == 0x00001C, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::InPlayRate' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, CheckTheSameAsset) == 0x000020, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::CheckTheSameAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify, ReturnValue) == 0x000021, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.TransitionToAnimFromCurPose_NotifyTill
// 0x0020 (0x0020 - 0x0000)
struct AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill final
{
public:
	class UAnimationAsset*                        ToNewAsset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFrom;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTillNotify;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckTheSameAsset;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill) == 0x000008, "Wrong alignment on AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill");
static_assert(sizeof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill) == 0x000020, "Wrong size on AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, ToNewAsset) == 0x000000, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::ToNewAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, StartFrom) == 0x000008, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::StartFrom' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, PlayTillNotify) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::PlayTillNotify' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, TransitionTime) == 0x000014, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::TransitionTime' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, InPlayRate) == 0x000018, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::InPlayRate' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, CheckTheSameAsset) == 0x00001C, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::CheckTheSameAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill, ReturnValue) == 0x00001D, "Member 'AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimMultiNodeInstance_DN.TransitionToMontageFromCurPose
// 0x0028 (0x0028 - 0x0000)
struct AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose final
{
public:
	class UAnimMontage*                           AnimationAsset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromSection;                                   // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckSameAsset;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose) == 0x000008, "Wrong alignment on AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose");
static_assert(sizeof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose) == 0x000028, "Wrong size on AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, AnimationAsset) == 0x000000, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::AnimationAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, TransitionTime) == 0x000008, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::TransitionTime' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, bIsLooping) == 0x00000C, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::bIsLooping' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, InPlayRate) == 0x000010, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::InPlayRate' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, PlayFromSection) == 0x000014, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::PlayFromSection' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, StartingPosition) == 0x00001C, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::StartingPosition' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, CheckSameAsset) == 0x000020, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::CheckSameAsset' has a wrong offset!");
static_assert(offsetof(AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose, ReturnValue) == 0x000021, "Member 'AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimVariationSet_DN.AddLinkedAsset
// 0x0008 (0x0008 - 0x0000)
struct AnimVariationSet_DN_AddLinkedAsset final
{
public:
	class UAnimVariationSet_DN*                   LinkedVariationSet;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimVariationSet_DN_AddLinkedAsset) == 0x000008, "Wrong alignment on AnimVariationSet_DN_AddLinkedAsset");
static_assert(sizeof(AnimVariationSet_DN_AddLinkedAsset) == 0x000008, "Wrong size on AnimVariationSet_DN_AddLinkedAsset");
static_assert(offsetof(AnimVariationSet_DN_AddLinkedAsset, LinkedVariationSet) == 0x000000, "Member 'AnimVariationSet_DN_AddLinkedAsset::LinkedVariationSet' has a wrong offset!");

// Function DynamicNode.AnimVariationSet_DN.GetAnimationUsingCurIndex
// 0x0008 (0x0008 - 0x0000)
struct AnimVariationSet_DN_GetAnimationUsingCurIndex final
{
public:
	class UAnimationAsset*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimVariationSet_DN_GetAnimationUsingCurIndex) == 0x000008, "Wrong alignment on AnimVariationSet_DN_GetAnimationUsingCurIndex");
static_assert(sizeof(AnimVariationSet_DN_GetAnimationUsingCurIndex) == 0x000008, "Wrong size on AnimVariationSet_DN_GetAnimationUsingCurIndex");
static_assert(offsetof(AnimVariationSet_DN_GetAnimationUsingCurIndex, ReturnValue) == 0x000000, "Member 'AnimVariationSet_DN_GetAnimationUsingCurIndex::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimVariationSet_DN.IsCurrentIndexValid
// 0x0002 (0x0002 - 0x0000)
struct AnimVariationSet_DN_IsCurrentIndexValid final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimVariationSet_DN_IsCurrentIndexValid) == 0x000001, "Wrong alignment on AnimVariationSet_DN_IsCurrentIndexValid");
static_assert(sizeof(AnimVariationSet_DN_IsCurrentIndexValid) == 0x000002, "Wrong size on AnimVariationSet_DN_IsCurrentIndexValid");
static_assert(offsetof(AnimVariationSet_DN_IsCurrentIndexValid, Branches) == 0x000000, "Member 'AnimVariationSet_DN_IsCurrentIndexValid::Branches' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_IsCurrentIndexValid, ReturnValue) == 0x000001, "Member 'AnimVariationSet_DN_IsCurrentIndexValid::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimVariationSet_DN.SetCurrentIndex
// 0x0010 (0x0010 - 0x0000)
struct AnimVariationSet_DN_SetCurrentIndex final
{
public:
	int32                                         InCurrentIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeAnimInRuntime;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepeatCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimVariationSet_DN_SetCurrentIndex) == 0x000004, "Wrong alignment on AnimVariationSet_DN_SetCurrentIndex");
static_assert(sizeof(AnimVariationSet_DN_SetCurrentIndex) == 0x000010, "Wrong size on AnimVariationSet_DN_SetCurrentIndex");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndex, InCurrentIndex) == 0x000000, "Member 'AnimVariationSet_DN_SetCurrentIndex::InCurrentIndex' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndex, ChangeAnimInRuntime) == 0x000004, "Member 'AnimVariationSet_DN_SetCurrentIndex::ChangeAnimInRuntime' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndex, RepeatCount) == 0x000008, "Member 'AnimVariationSet_DN_SetCurrentIndex::RepeatCount' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndex, ReturnValue) == 0x00000C, "Member 'AnimVariationSet_DN_SetCurrentIndex::ReturnValue' has a wrong offset!");

// Function DynamicNode.AnimVariationSet_DN.SetCurrentIndexOnlyIfCurrentNotValid
// 0x0010 (0x0010 - 0x0000)
struct AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid final
{
public:
	int32                                         InCurrentIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeAnimInRuntime;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepeatCount;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid) == 0x000004, "Wrong alignment on AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid");
static_assert(sizeof(AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid) == 0x000010, "Wrong size on AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid, InCurrentIndex) == 0x000000, "Member 'AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid::InCurrentIndex' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid, ChangeAnimInRuntime) == 0x000004, "Member 'AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid::ChangeAnimInRuntime' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid, RepeatCount) == 0x000008, "Member 'AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid::RepeatCount' has a wrong offset!");
static_assert(offsetof(AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid, ReturnValue) == 0x00000C, "Member 'AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.BlockMovement
// 0x0002 (0x0002 - 0x0000)
struct DNMovementComponent_BlockMovement final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockRotation;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_BlockMovement) == 0x000001, "Wrong alignment on DNMovementComponent_BlockMovement");
static_assert(sizeof(DNMovementComponent_BlockMovement) == 0x000002, "Wrong size on DNMovementComponent_BlockMovement");
static_assert(offsetof(DNMovementComponent_BlockMovement, Enabled) == 0x000000, "Member 'DNMovementComponent_BlockMovement::Enabled' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_BlockMovement, bLockRotation) == 0x000001, "Member 'DNMovementComponent_BlockMovement::bLockRotation' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.FindAndAdjustFloor
// 0x0008 (0x0008 - 0x0000)
struct DNMovementComponent_FindAndAdjustFloor final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_FindAndAdjustFloor) == 0x000004, "Wrong alignment on DNMovementComponent_FindAndAdjustFloor");
static_assert(sizeof(DNMovementComponent_FindAndAdjustFloor) == 0x000008, "Wrong size on DNMovementComponent_FindAndAdjustFloor");
static_assert(offsetof(DNMovementComponent_FindAndAdjustFloor, Timer) == 0x000000, "Member 'DNMovementComponent_FindAndAdjustFloor::Timer' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_FindAndAdjustFloor, Speed) == 0x000004, "Member 'DNMovementComponent_FindAndAdjustFloor::Speed' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.GetLastYawDelta
// 0x0004 (0x0004 - 0x0000)
struct DNMovementComponent_GetLastYawDelta final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_GetLastYawDelta) == 0x000004, "Wrong alignment on DNMovementComponent_GetLastYawDelta");
static_assert(sizeof(DNMovementComponent_GetLastYawDelta) == 0x000004, "Wrong size on DNMovementComponent_GetLastYawDelta");
static_assert(offsetof(DNMovementComponent_GetLastYawDelta, ReturnValue) == 0x000000, "Member 'DNMovementComponent_GetLastYawDelta::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.GetLastYawDeltaAbs
// 0x0004 (0x0004 - 0x0000)
struct DNMovementComponent_GetLastYawDeltaAbs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_GetLastYawDeltaAbs) == 0x000004, "Wrong alignment on DNMovementComponent_GetLastYawDeltaAbs");
static_assert(sizeof(DNMovementComponent_GetLastYawDeltaAbs) == 0x000004, "Wrong size on DNMovementComponent_GetLastYawDeltaAbs");
static_assert(offsetof(DNMovementComponent_GetLastYawDeltaAbs, ReturnValue) == 0x000000, "Member 'DNMovementComponent_GetLastYawDeltaAbs::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.GetLastYawDir
// 0x0004 (0x0004 - 0x0000)
struct DNMovementComponent_GetLastYawDir final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_GetLastYawDir) == 0x000004, "Wrong alignment on DNMovementComponent_GetLastYawDir");
static_assert(sizeof(DNMovementComponent_GetLastYawDir) == 0x000004, "Wrong size on DNMovementComponent_GetLastYawDir");
static_assert(offsetof(DNMovementComponent_GetLastYawDir, ReturnValue) == 0x000000, "Member 'DNMovementComponent_GetLastYawDir::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.GetSurfaceSwimmingStatus
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_GetSurfaceSwimmingStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_GetSurfaceSwimmingStatus) == 0x000001, "Wrong alignment on DNMovementComponent_GetSurfaceSwimmingStatus");
static_assert(sizeof(DNMovementComponent_GetSurfaceSwimmingStatus) == 0x000001, "Wrong size on DNMovementComponent_GetSurfaceSwimmingStatus");
static_assert(offsetof(DNMovementComponent_GetSurfaceSwimmingStatus, ReturnValue) == 0x000000, "Member 'DNMovementComponent_GetSurfaceSwimmingStatus::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.IsSurfaceStatus
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_IsSurfaceStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_IsSurfaceStatus) == 0x000001, "Wrong alignment on DNMovementComponent_IsSurfaceStatus");
static_assert(sizeof(DNMovementComponent_IsSurfaceStatus) == 0x000001, "Wrong size on DNMovementComponent_IsSurfaceStatus");
static_assert(offsetof(DNMovementComponent_IsSurfaceStatus, ReturnValue) == 0x000000, "Member 'DNMovementComponent_IsSurfaceStatus::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.IsSurfaceSwimming
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_IsSurfaceSwimming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_IsSurfaceSwimming) == 0x000001, "Wrong alignment on DNMovementComponent_IsSurfaceSwimming");
static_assert(sizeof(DNMovementComponent_IsSurfaceSwimming) == 0x000001, "Wrong size on DNMovementComponent_IsSurfaceSwimming");
static_assert(offsetof(DNMovementComponent_IsSurfaceSwimming, ReturnValue) == 0x000000, "Member 'DNMovementComponent_IsSurfaceSwimming::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.IsUnderwaterStatus
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_IsUnderwaterStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_IsUnderwaterStatus) == 0x000001, "Wrong alignment on DNMovementComponent_IsUnderwaterStatus");
static_assert(sizeof(DNMovementComponent_IsUnderwaterStatus) == 0x000001, "Wrong size on DNMovementComponent_IsUnderwaterStatus");
static_assert(offsetof(DNMovementComponent_IsUnderwaterStatus, ReturnValue) == 0x000000, "Member 'DNMovementComponent_IsUnderwaterStatus::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.IsUnderwaterSwimming
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_IsUnderwaterSwimming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_IsUnderwaterSwimming) == 0x000001, "Wrong alignment on DNMovementComponent_IsUnderwaterSwimming");
static_assert(sizeof(DNMovementComponent_IsUnderwaterSwimming) == 0x000001, "Wrong size on DNMovementComponent_IsUnderwaterSwimming");
static_assert(offsetof(DNMovementComponent_IsUnderwaterSwimming, ReturnValue) == 0x000000, "Member 'DNMovementComponent_IsUnderwaterSwimming::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.RemoveRotationSoft
// 0x0014 (0x0014 - 0x0000)
struct DNMovementComponent_RemoveRotationSoft final
{
public:
	struct FRotator                               RemoveRotation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalRotationTolerance;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_RemoveRotationSoft) == 0x000004, "Wrong alignment on DNMovementComponent_RemoveRotationSoft");
static_assert(sizeof(DNMovementComponent_RemoveRotationSoft) == 0x000014, "Wrong size on DNMovementComponent_RemoveRotationSoft");
static_assert(offsetof(DNMovementComponent_RemoveRotationSoft, RemoveRotation) == 0x000000, "Member 'DNMovementComponent_RemoveRotationSoft::RemoveRotation' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_RemoveRotationSoft, TransitionTime) == 0x00000C, "Member 'DNMovementComponent_RemoveRotationSoft::TransitionTime' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_RemoveRotationSoft, FinalRotationTolerance) == 0x000010, "Member 'DNMovementComponent_RemoveRotationSoft::FinalRotationTolerance' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.RotateUpdatedComponentSoft
// 0x0014 (0x0014 - 0x0000)
struct DNMovementComponent_RotateUpdatedComponentSoft final
{
public:
	struct FRotator                               NewActorRotation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalRotationTolerance;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_RotateUpdatedComponentSoft) == 0x000004, "Wrong alignment on DNMovementComponent_RotateUpdatedComponentSoft");
static_assert(sizeof(DNMovementComponent_RotateUpdatedComponentSoft) == 0x000014, "Wrong size on DNMovementComponent_RotateUpdatedComponentSoft");
static_assert(offsetof(DNMovementComponent_RotateUpdatedComponentSoft, NewActorRotation) == 0x000000, "Member 'DNMovementComponent_RotateUpdatedComponentSoft::NewActorRotation' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_RotateUpdatedComponentSoft, TransitionTime) == 0x00000C, "Member 'DNMovementComponent_RotateUpdatedComponentSoft::TransitionTime' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_RotateUpdatedComponentSoft, FinalRotationTolerance) == 0x000010, "Member 'DNMovementComponent_RotateUpdatedComponentSoft::FinalRotationTolerance' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetAdjustFloorHeightSpeed
// 0x0008 (0x0008 - 0x0000)
struct DNMovementComponent_SetAdjustFloorHeightSpeed final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_SetAdjustFloorHeightSpeed) == 0x000004, "Wrong alignment on DNMovementComponent_SetAdjustFloorHeightSpeed");
static_assert(sizeof(DNMovementComponent_SetAdjustFloorHeightSpeed) == 0x000008, "Wrong size on DNMovementComponent_SetAdjustFloorHeightSpeed");
static_assert(offsetof(DNMovementComponent_SetAdjustFloorHeightSpeed, Timer) == 0x000000, "Member 'DNMovementComponent_SetAdjustFloorHeightSpeed::Timer' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetAdjustFloorHeightSpeed, Speed) == 0x000004, "Member 'DNMovementComponent_SetAdjustFloorHeightSpeed::Speed' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetDesiredRotationOffset_PropsActor
// 0x0024 (0x0024 - 0x0000)
struct DNMovementComponent_SetDesiredRotationOffset_PropsActor final
{
public:
	float                                         LeftMove;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightMove;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsCompleted)>             DesiredRotateComplete;                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AddOffsetAngle;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResetIfVelocityExceed;                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TryToUseTurnInPlace;                               // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNMovementComponent_SetDesiredRotationOffset_PropsActor) == 0x000004, "Wrong alignment on DNMovementComponent_SetDesiredRotationOffset_PropsActor");
static_assert(sizeof(DNMovementComponent_SetDesiredRotationOffset_PropsActor) == 0x000024, "Wrong size on DNMovementComponent_SetDesiredRotationOffset_PropsActor");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffset_PropsActor, LeftMove) == 0x000000, "Member 'DNMovementComponent_SetDesiredRotationOffset_PropsActor::LeftMove' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffset_PropsActor, RightMove) == 0x000004, "Member 'DNMovementComponent_SetDesiredRotationOffset_PropsActor::RightMove' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffset_PropsActor, DesiredRotateComplete) == 0x000008, "Member 'DNMovementComponent_SetDesiredRotationOffset_PropsActor::DesiredRotateComplete' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffset_PropsActor, AddOffsetAngle) == 0x000018, "Member 'DNMovementComponent_SetDesiredRotationOffset_PropsActor::AddOffsetAngle' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffset_PropsActor, AutoResetIfVelocityExceed) == 0x00001C, "Member 'DNMovementComponent_SetDesiredRotationOffset_PropsActor::AutoResetIfVelocityExceed' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffset_PropsActor, TryToUseTurnInPlace) == 0x000020, "Member 'DNMovementComponent_SetDesiredRotationOffset_PropsActor::TryToUseTurnInPlace' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetDesiredRotationOffsetYaw
// 0x000C (0x000C - 0x0000)
struct DNMovementComponent_SetDesiredRotationOffsetYaw final
{
public:
	float                                         OffsetYaw;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResetIfVelocityExceed;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TryToUseTurnInPlace;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNMovementComponent_SetDesiredRotationOffsetYaw) == 0x000004, "Wrong alignment on DNMovementComponent_SetDesiredRotationOffsetYaw");
static_assert(sizeof(DNMovementComponent_SetDesiredRotationOffsetYaw) == 0x00000C, "Wrong size on DNMovementComponent_SetDesiredRotationOffsetYaw");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw, OffsetYaw) == 0x000000, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw::OffsetYaw' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw, AutoResetIfVelocityExceed) == 0x000004, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw::AutoResetIfVelocityExceed' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw, TryToUseTurnInPlace) == 0x000008, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw::TryToUseTurnInPlace' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetDesiredRotationOffsetYaw_Delegate
// 0x001C (0x001C - 0x0000)
struct DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate final
{
public:
	float                                         OffsetYaw;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsCompleted)>             DesiredRotateComplete;                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AutoResetIfVelocityExceed;                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TryToUseTurnInPlace;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate) == 0x000004, "Wrong alignment on DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate");
static_assert(sizeof(DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate) == 0x00001C, "Wrong size on DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate, OffsetYaw) == 0x000000, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate::OffsetYaw' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate, DesiredRotateComplete) == 0x000004, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate::DesiredRotateComplete' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate, AutoResetIfVelocityExceed) == 0x000014, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate::AutoResetIfVelocityExceed' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate, TryToUseTurnInPlace) == 0x000018, "Member 'DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate::TryToUseTurnInPlace' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetDesiredRotationYaw
// 0x000C (0x000C - 0x0000)
struct DNMovementComponent_SetDesiredRotationYaw final
{
public:
	float                                         DesiredRotationYaw;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoResetIfVelocityExceed;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TryToUseTurnInPlace;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNMovementComponent_SetDesiredRotationYaw) == 0x000004, "Wrong alignment on DNMovementComponent_SetDesiredRotationYaw");
static_assert(sizeof(DNMovementComponent_SetDesiredRotationYaw) == 0x00000C, "Wrong size on DNMovementComponent_SetDesiredRotationYaw");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw, DesiredRotationYaw) == 0x000000, "Member 'DNMovementComponent_SetDesiredRotationYaw::DesiredRotationYaw' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw, AutoResetIfVelocityExceed) == 0x000004, "Member 'DNMovementComponent_SetDesiredRotationYaw::AutoResetIfVelocityExceed' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw, TryToUseTurnInPlace) == 0x000008, "Member 'DNMovementComponent_SetDesiredRotationYaw::TryToUseTurnInPlace' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetDesiredRotationYaw_Delegate
// 0x001C (0x001C - 0x0000)
struct DNMovementComponent_SetDesiredRotationYaw_Delegate final
{
public:
	float                                         DesiredRotationYaw;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool IsCompleted)>             DesiredRotateComplete;                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AutoResetIfVelocityExceed;                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TryToUseTurnInPlace;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNMovementComponent_SetDesiredRotationYaw_Delegate) == 0x000004, "Wrong alignment on DNMovementComponent_SetDesiredRotationYaw_Delegate");
static_assert(sizeof(DNMovementComponent_SetDesiredRotationYaw_Delegate) == 0x00001C, "Wrong size on DNMovementComponent_SetDesiredRotationYaw_Delegate");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw_Delegate, DesiredRotationYaw) == 0x000000, "Member 'DNMovementComponent_SetDesiredRotationYaw_Delegate::DesiredRotationYaw' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw_Delegate, DesiredRotateComplete) == 0x000004, "Member 'DNMovementComponent_SetDesiredRotationYaw_Delegate::DesiredRotateComplete' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw_Delegate, AutoResetIfVelocityExceed) == 0x000014, "Member 'DNMovementComponent_SetDesiredRotationYaw_Delegate::AutoResetIfVelocityExceed' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetDesiredRotationYaw_Delegate, TryToUseTurnInPlace) == 0x000018, "Member 'DNMovementComponent_SetDesiredRotationYaw_Delegate::TryToUseTurnInPlace' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetMaxWalkSpeed
// 0x0008 (0x0008 - 0x0000)
struct DNMovementComponent_SetMaxWalkSpeed final
{
public:
	float                                         NewMovementSpeed;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_SetMaxWalkSpeed) == 0x000004, "Wrong alignment on DNMovementComponent_SetMaxWalkSpeed");
static_assert(sizeof(DNMovementComponent_SetMaxWalkSpeed) == 0x000008, "Wrong size on DNMovementComponent_SetMaxWalkSpeed");
static_assert(offsetof(DNMovementComponent_SetMaxWalkSpeed, NewMovementSpeed) == 0x000000, "Member 'DNMovementComponent_SetMaxWalkSpeed::NewMovementSpeed' has a wrong offset!");
static_assert(offsetof(DNMovementComponent_SetMaxWalkSpeed, TransitionTime) == 0x000004, "Member 'DNMovementComponent_SetMaxWalkSpeed::TransitionTime' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetPauseForControllerDesiredRotationSpecifiedAngle
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle) == 0x000001, "Wrong alignment on DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle");
static_assert(sizeof(DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle) == 0x000001, "Wrong size on DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle");
static_assert(offsetof(DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle, Pause) == 0x000000, "Member 'DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle::Pause' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.SetSurfaceSwimmingStatus
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_SetSurfaceSwimmingStatus final
{
public:
	bool                                          NewStatus;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_SetSurfaceSwimmingStatus) == 0x000001, "Wrong alignment on DNMovementComponent_SetSurfaceSwimmingStatus");
static_assert(sizeof(DNMovementComponent_SetSurfaceSwimmingStatus) == 0x000001, "Wrong size on DNMovementComponent_SetSurfaceSwimmingStatus");
static_assert(offsetof(DNMovementComponent_SetSurfaceSwimmingStatus, NewStatus) == 0x000000, "Member 'DNMovementComponent_SetSurfaceSwimmingStatus::NewStatus' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.GetOrientRotationToMovement_Reverse_LastDotValue
// 0x0004 (0x0004 - 0x0000)
struct DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue) == 0x000004, "Wrong alignment on DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue");
static_assert(sizeof(DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue) == 0x000004, "Wrong size on DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue");
static_assert(offsetof(DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue, ReturnValue) == 0x000000, "Member 'DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.IsMovementBlocked
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_IsMovementBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_IsMovementBlocked) == 0x000001, "Wrong alignment on DNMovementComponent_IsMovementBlocked");
static_assert(sizeof(DNMovementComponent_IsMovementBlocked) == 0x000001, "Wrong size on DNMovementComponent_IsMovementBlocked");
static_assert(offsetof(DNMovementComponent_IsMovementBlocked, ReturnValue) == 0x000000, "Member 'DNMovementComponent_IsMovementBlocked::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNMovementComponent.IsProne
// 0x0001 (0x0001 - 0x0000)
struct DNMovementComponent_IsProne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNMovementComponent_IsProne) == 0x000001, "Wrong alignment on DNMovementComponent_IsProne");
static_assert(sizeof(DNMovementComponent_IsProne) == 0x000001, "Wrong size on DNMovementComponent_IsProne");
static_assert(offsetof(DNMovementComponent_IsProne, ReturnValue) == 0x000000, "Member 'DNMovementComponent_IsProne::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.EndProne
// 0x0001 (0x0001 - 0x0000)
struct DNCharacter_EndProne final
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_EndProne) == 0x000001, "Wrong alignment on DNCharacter_EndProne");
static_assert(sizeof(DNCharacter_EndProne) == 0x000001, "Wrong size on DNCharacter_EndProne");
static_assert(offsetof(DNCharacter_EndProne, bClientSimulation) == 0x000000, "Member 'DNCharacter_EndProne::bClientSimulation' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetFirstPropsActor
// 0x0020 (0x0020 - 0x0000)
struct DNCharacter_GetFirstPropsActor final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActionPropsActor_DN*                   PropsActor;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorType;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InstanceName;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetFirstPropsActor) == 0x000008, "Wrong alignment on DNCharacter_GetFirstPropsActor");
static_assert(sizeof(DNCharacter_GetFirstPropsActor) == 0x000020, "Wrong size on DNCharacter_GetFirstPropsActor");
static_assert(offsetof(DNCharacter_GetFirstPropsActor, Branches) == 0x000000, "Member 'DNCharacter_GetFirstPropsActor::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetFirstPropsActor, PropsActor) == 0x000008, "Member 'DNCharacter_GetFirstPropsActor::PropsActor' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetFirstPropsActor, ActorType) == 0x000010, "Member 'DNCharacter_GetFirstPropsActor::ActorType' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetFirstPropsActor, InstanceName) == 0x000018, "Member 'DNCharacter_GetFirstPropsActor::InstanceName' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetLastLeftLegPhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_GetLastLeftLegPhysicalMaterial final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetLastLeftLegPhysicalMaterial) == 0x000008, "Wrong alignment on DNCharacter_GetLastLeftLegPhysicalMaterial");
static_assert(sizeof(DNCharacter_GetLastLeftLegPhysicalMaterial) == 0x000010, "Wrong size on DNCharacter_GetLastLeftLegPhysicalMaterial");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalMaterial, Branches) == 0x000000, "Member 'DNCharacter_GetLastLeftLegPhysicalMaterial::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalMaterial, IsValid) == 0x000001, "Member 'DNCharacter_GetLastLeftLegPhysicalMaterial::IsValid' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalMaterial, LegIndex) == 0x000004, "Member 'DNCharacter_GetLastLeftLegPhysicalMaterial::LegIndex' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalMaterial, ReturnValue) == 0x000008, "Member 'DNCharacter_GetLastLeftLegPhysicalMaterial::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetLastLeftLegPhysicalSurface
// 0x000C (0x000C - 0x0000)
struct DNCharacter_GetLastLeftLegPhysicalSurface final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnDefaultSurfaceIfNotFinded;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              DefaultSurface;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNCharacter_GetLastLeftLegPhysicalSurface) == 0x000004, "Wrong alignment on DNCharacter_GetLastLeftLegPhysicalSurface");
static_assert(sizeof(DNCharacter_GetLastLeftLegPhysicalSurface) == 0x00000C, "Wrong size on DNCharacter_GetLastLeftLegPhysicalSurface");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalSurface, Branches) == 0x000000, "Member 'DNCharacter_GetLastLeftLegPhysicalSurface::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalSurface, IsValid) == 0x000001, "Member 'DNCharacter_GetLastLeftLegPhysicalSurface::IsValid' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalSurface, LegIndex) == 0x000004, "Member 'DNCharacter_GetLastLeftLegPhysicalSurface::LegIndex' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalSurface, ReturnDefaultSurfaceIfNotFinded) == 0x000008, "Member 'DNCharacter_GetLastLeftLegPhysicalSurface::ReturnDefaultSurfaceIfNotFinded' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalSurface, DefaultSurface) == 0x000009, "Member 'DNCharacter_GetLastLeftLegPhysicalSurface::DefaultSurface' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastLeftLegPhysicalSurface, ReturnValue) == 0x00000A, "Member 'DNCharacter_GetLastLeftLegPhysicalSurface::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetLastRightLegPhysicalMaterial
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_GetLastRightLegPhysicalMaterial final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetLastRightLegPhysicalMaterial) == 0x000008, "Wrong alignment on DNCharacter_GetLastRightLegPhysicalMaterial");
static_assert(sizeof(DNCharacter_GetLastRightLegPhysicalMaterial) == 0x000010, "Wrong size on DNCharacter_GetLastRightLegPhysicalMaterial");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalMaterial, Branches) == 0x000000, "Member 'DNCharacter_GetLastRightLegPhysicalMaterial::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalMaterial, IsValid) == 0x000001, "Member 'DNCharacter_GetLastRightLegPhysicalMaterial::IsValid' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalMaterial, LegIndex) == 0x000004, "Member 'DNCharacter_GetLastRightLegPhysicalMaterial::LegIndex' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalMaterial, ReturnValue) == 0x000008, "Member 'DNCharacter_GetLastRightLegPhysicalMaterial::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetLastRightLegPhysicalSurface
// 0x000C (0x000C - 0x0000)
struct DNCharacter_GetLastRightLegPhysicalSurface final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnDefaultSurfaceIfNotFinded;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              DefaultSurface;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNCharacter_GetLastRightLegPhysicalSurface) == 0x000004, "Wrong alignment on DNCharacter_GetLastRightLegPhysicalSurface");
static_assert(sizeof(DNCharacter_GetLastRightLegPhysicalSurface) == 0x00000C, "Wrong size on DNCharacter_GetLastRightLegPhysicalSurface");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalSurface, Branches) == 0x000000, "Member 'DNCharacter_GetLastRightLegPhysicalSurface::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalSurface, IsValid) == 0x000001, "Member 'DNCharacter_GetLastRightLegPhysicalSurface::IsValid' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalSurface, LegIndex) == 0x000004, "Member 'DNCharacter_GetLastRightLegPhysicalSurface::LegIndex' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalSurface, ReturnDefaultSurfaceIfNotFinded) == 0x000008, "Member 'DNCharacter_GetLastRightLegPhysicalSurface::ReturnDefaultSurfaceIfNotFinded' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalSurface, DefaultSurface) == 0x000009, "Member 'DNCharacter_GetLastRightLegPhysicalSurface::DefaultSurface' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetLastRightLegPhysicalSurface, ReturnValue) == 0x00000A, "Member 'DNCharacter_GetLastRightLegPhysicalSurface::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetNearestPropsActor
// 0x0020 (0x0020 - 0x0000)
struct DNCharacter_GetNearestPropsActor final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActionPropsActor_DN*                   PropsActor;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorType;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InstanceName;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetNearestPropsActor) == 0x000008, "Wrong alignment on DNCharacter_GetNearestPropsActor");
static_assert(sizeof(DNCharacter_GetNearestPropsActor) == 0x000020, "Wrong size on DNCharacter_GetNearestPropsActor");
static_assert(offsetof(DNCharacter_GetNearestPropsActor, Branches) == 0x000000, "Member 'DNCharacter_GetNearestPropsActor::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetNearestPropsActor, PropsActor) == 0x000008, "Member 'DNCharacter_GetNearestPropsActor::PropsActor' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetNearestPropsActor, ActorType) == 0x000010, "Member 'DNCharacter_GetNearestPropsActor::ActorType' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetNearestPropsActor, InstanceName) == 0x000018, "Member 'DNCharacter_GetNearestPropsActor::InstanceName' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetNearestPropsActors
// 0x0018 (0x0018 - 0x0000)
struct DNCharacter_GetNearestPropsActors final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActionPropsActor_DN*>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetNearestPropsActors) == 0x000008, "Wrong alignment on DNCharacter_GetNearestPropsActors");
static_assert(sizeof(DNCharacter_GetNearestPropsActors) == 0x000018, "Wrong size on DNCharacter_GetNearestPropsActors");
static_assert(offsetof(DNCharacter_GetNearestPropsActors, Branches) == 0x000000, "Member 'DNCharacter_GetNearestPropsActors::Branches' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetNearestPropsActors, ReturnValue) == 0x000008, "Member 'DNCharacter_GetNearestPropsActors::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.K2_OnBaseChange
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_K2_OnBaseChange final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OutActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_K2_OnBaseChange) == 0x000008, "Wrong alignment on DNCharacter_K2_OnBaseChange");
static_assert(sizeof(DNCharacter_K2_OnBaseChange) == 0x000010, "Wrong size on DNCharacter_K2_OnBaseChange");
static_assert(offsetof(DNCharacter_K2_OnBaseChange, PrimitiveComponent) == 0x000000, "Member 'DNCharacter_K2_OnBaseChange::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(DNCharacter_K2_OnBaseChange, OutActor) == 0x000008, "Member 'DNCharacter_K2_OnBaseChange::OutActor' has a wrong offset!");

// Function DynamicNode.DNCharacter.K2_OnEndProne
// 0x0008 (0x0008 - 0x0000)
struct DNCharacter_K2_OnEndProne final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_K2_OnEndProne) == 0x000004, "Wrong alignment on DNCharacter_K2_OnEndProne");
static_assert(sizeof(DNCharacter_K2_OnEndProne) == 0x000008, "Wrong size on DNCharacter_K2_OnEndProne");
static_assert(offsetof(DNCharacter_K2_OnEndProne, HalfHeightAdjust) == 0x000000, "Member 'DNCharacter_K2_OnEndProne::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(DNCharacter_K2_OnEndProne, ScaledHalfHeightAdjust) == 0x000004, "Member 'DNCharacter_K2_OnEndProne::ScaledHalfHeightAdjust' has a wrong offset!");

// Function DynamicNode.DNCharacter.K2_OnStartProne
// 0x000C (0x000C - 0x0000)
struct DNCharacter_K2_OnStartProne final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromCrouch;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNCharacter_K2_OnStartProne) == 0x000004, "Wrong alignment on DNCharacter_K2_OnStartProne");
static_assert(sizeof(DNCharacter_K2_OnStartProne) == 0x00000C, "Wrong size on DNCharacter_K2_OnStartProne");
static_assert(offsetof(DNCharacter_K2_OnStartProne, HalfHeightAdjust) == 0x000000, "Member 'DNCharacter_K2_OnStartProne::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(DNCharacter_K2_OnStartProne, ScaledHalfHeightAdjust) == 0x000004, "Member 'DNCharacter_K2_OnStartProne::ScaledHalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(DNCharacter_K2_OnStartProne, FromCrouch) == 0x000008, "Member 'DNCharacter_K2_OnStartProne::FromCrouch' has a wrong offset!");

// Function DynamicNode.DNCharacter.OnEndImpact
// 0x0008 (0x0008 - 0x0000)
struct DNCharacter_OnEndImpact final
{
public:
	class UAnimationAsset*                        PivotAnimation;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_OnEndImpact) == 0x000008, "Wrong alignment on DNCharacter_OnEndImpact");
static_assert(sizeof(DNCharacter_OnEndImpact) == 0x000008, "Wrong size on DNCharacter_OnEndImpact");
static_assert(offsetof(DNCharacter_OnEndImpact, PivotAnimation) == 0x000000, "Member 'DNCharacter_OnEndImpact::PivotAnimation' has a wrong offset!");

// Function DynamicNode.DNCharacter.OnEndPivot
// 0x0008 (0x0008 - 0x0000)
struct DNCharacter_OnEndPivot final
{
public:
	class UAnimationAsset*                        PivotAnimation;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_OnEndPivot) == 0x000008, "Wrong alignment on DNCharacter_OnEndPivot");
static_assert(sizeof(DNCharacter_OnEndPivot) == 0x000008, "Wrong size on DNCharacter_OnEndPivot");
static_assert(offsetof(DNCharacter_OnEndPivot, PivotAnimation) == 0x000000, "Member 'DNCharacter_OnEndPivot::PivotAnimation' has a wrong offset!");

// Function DynamicNode.DNCharacter.OnPivot
// 0x0008 (0x0008 - 0x0000)
struct DNCharacter_OnPivot final
{
public:
	class UAnimationAsset*                        PivotAnimation;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_OnPivot) == 0x000008, "Wrong alignment on DNCharacter_OnPivot");
static_assert(sizeof(DNCharacter_OnPivot) == 0x000008, "Wrong size on DNCharacter_OnPivot");
static_assert(offsetof(DNCharacter_OnPivot, PivotAnimation) == 0x000000, "Member 'DNCharacter_OnPivot::PivotAnimation' has a wrong offset!");

// Function DynamicNode.DNCharacter.OverrideFaceRotation
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_OverrideFaceRotation final
{
public:
	struct FRotator                               OverrideRotation;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNCharacter_OverrideFaceRotation) == 0x000004, "Wrong alignment on DNCharacter_OverrideFaceRotation");
static_assert(sizeof(DNCharacter_OverrideFaceRotation) == 0x000010, "Wrong size on DNCharacter_OverrideFaceRotation");
static_assert(offsetof(DNCharacter_OverrideFaceRotation, OverrideRotation) == 0x000000, "Member 'DNCharacter_OverrideFaceRotation::OverrideRotation' has a wrong offset!");
static_assert(offsetof(DNCharacter_OverrideFaceRotation, Enable) == 0x00000C, "Member 'DNCharacter_OverrideFaceRotation::Enable' has a wrong offset!");

// Function DynamicNode.DNCharacter.SERVER_ComputeLocallyVariables
// 0x002C (0x002C - 0x0000)
struct DNCharacter_SERVER_ComputeLocallyVariables final
{
public:
	struct FLocallyRepData_DN_Int                 RepData;                                           // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SERVER_ComputeLocallyVariables) == 0x000004, "Wrong alignment on DNCharacter_SERVER_ComputeLocallyVariables");
static_assert(sizeof(DNCharacter_SERVER_ComputeLocallyVariables) == 0x00002C, "Wrong size on DNCharacter_SERVER_ComputeLocallyVariables");
static_assert(offsetof(DNCharacter_SERVER_ComputeLocallyVariables, RepData) == 0x000000, "Member 'DNCharacter_SERVER_ComputeLocallyVariables::RepData' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetAutoCrouching
// 0x0034 (0x0034 - 0x0000)
struct DNCharacter_SetAutoCrouching final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleAddHeight;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddRadius;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleZOffset;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleForwardOffset;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CapsuleRotation;                                   // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InTimer;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTimer;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_DrawDebug;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawDebugTimer;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DrawDebugOnlySuccAttempts;                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DNCharacter_SetAutoCrouching) == 0x000004, "Wrong alignment on DNCharacter_SetAutoCrouching");
static_assert(sizeof(DNCharacter_SetAutoCrouching) == 0x000034, "Wrong size on DNCharacter_SetAutoCrouching");
static_assert(offsetof(DNCharacter_SetAutoCrouching, Enabled) == 0x000000, "Member 'DNCharacter_SetAutoCrouching::Enabled' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, CapsuleAddHeight) == 0x000004, "Member 'DNCharacter_SetAutoCrouching::CapsuleAddHeight' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, AddRadius) == 0x000008, "Member 'DNCharacter_SetAutoCrouching::AddRadius' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, CapsuleZOffset) == 0x00000C, "Member 'DNCharacter_SetAutoCrouching::CapsuleZOffset' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, CapsuleForwardOffset) == 0x000010, "Member 'DNCharacter_SetAutoCrouching::CapsuleForwardOffset' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, CapsuleRotation) == 0x000014, "Member 'DNCharacter_SetAutoCrouching::CapsuleRotation' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, InTimer) == 0x000020, "Member 'DNCharacter_SetAutoCrouching::InTimer' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, OutTimer) == 0x000024, "Member 'DNCharacter_SetAutoCrouching::OutTimer' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, Param_DrawDebug) == 0x000028, "Member 'DNCharacter_SetAutoCrouching::Param_DrawDebug' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, DrawDebugTimer) == 0x00002C, "Member 'DNCharacter_SetAutoCrouching::DrawDebugTimer' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetAutoCrouching, DrawDebugOnlySuccAttempts) == 0x000030, "Member 'DNCharacter_SetAutoCrouching::DrawDebugOnlySuccAttempts' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetControllerRotationParams
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_SetControllerRotationParams final
{
public:
	bool                                          UseControllerRotationPitch;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseControllerRotationYaw;                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseControllerRotationRoll;                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartSoftFaceRotationTime;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinSoftFaceRotationTime;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeBetweenStartAndFin;                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetControllerRotationParams) == 0x000004, "Wrong alignment on DNCharacter_SetControllerRotationParams");
static_assert(sizeof(DNCharacter_SetControllerRotationParams) == 0x000010, "Wrong size on DNCharacter_SetControllerRotationParams");
static_assert(offsetof(DNCharacter_SetControllerRotationParams, UseControllerRotationPitch) == 0x000000, "Member 'DNCharacter_SetControllerRotationParams::UseControllerRotationPitch' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetControllerRotationParams, UseControllerRotationYaw) == 0x000001, "Member 'DNCharacter_SetControllerRotationParams::UseControllerRotationYaw' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetControllerRotationParams, UseControllerRotationRoll) == 0x000002, "Member 'DNCharacter_SetControllerRotationParams::UseControllerRotationRoll' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetControllerRotationParams, StartSoftFaceRotationTime) == 0x000004, "Member 'DNCharacter_SetControllerRotationParams::StartSoftFaceRotationTime' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetControllerRotationParams, FinSoftFaceRotationTime) == 0x000008, "Member 'DNCharacter_SetControllerRotationParams::FinSoftFaceRotationTime' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetControllerRotationParams, TransitionTimeBetweenStartAndFin) == 0x00000C, "Member 'DNCharacter_SetControllerRotationParams::TransitionTimeBetweenStartAndFin' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetDampingMultiAllBodyBellow
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_SetDampingMultiAllBodyBellow final
{
public:
	float                                         AngularDampingFactor;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDampingFactor;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetDampingMultiAllBodyBellow) == 0x000004, "Wrong alignment on DNCharacter_SetDampingMultiAllBodyBellow");
static_assert(sizeof(DNCharacter_SetDampingMultiAllBodyBellow) == 0x000010, "Wrong size on DNCharacter_SetDampingMultiAllBodyBellow");
static_assert(offsetof(DNCharacter_SetDampingMultiAllBodyBellow, AngularDampingFactor) == 0x000000, "Member 'DNCharacter_SetDampingMultiAllBodyBellow::AngularDampingFactor' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetDampingMultiAllBodyBellow, LinearDampingFactor) == 0x000004, "Member 'DNCharacter_SetDampingMultiAllBodyBellow::LinearDampingFactor' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetDampingMultiAllBodyBellow, BoneName) == 0x000008, "Member 'DNCharacter_SetDampingMultiAllBodyBellow::BoneName' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetEnableGravityAllBodyBellow
// 0x000C (0x000C - 0x0000)
struct DNCharacter_SetEnableGravityAllBodyBellow final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetEnableGravityAllBodyBellow) == 0x000004, "Wrong alignment on DNCharacter_SetEnableGravityAllBodyBellow");
static_assert(sizeof(DNCharacter_SetEnableGravityAllBodyBellow) == 0x00000C, "Wrong size on DNCharacter_SetEnableGravityAllBodyBellow");
static_assert(offsetof(DNCharacter_SetEnableGravityAllBodyBellow, Enabled) == 0x000000, "Member 'DNCharacter_SetEnableGravityAllBodyBellow::Enabled' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetEnableGravityAllBodyBellow, BoneName) == 0x000004, "Member 'DNCharacter_SetEnableGravityAllBodyBellow::BoneName' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetMaxSpeedFactor
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_SetMaxSpeedFactor final
{
public:
	float                                         Factor;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetMaxSpeedFactor) == 0x000004, "Wrong alignment on DNCharacter_SetMaxSpeedFactor");
static_assert(sizeof(DNCharacter_SetMaxSpeedFactor) == 0x000004, "Wrong size on DNCharacter_SetMaxSpeedFactor");
static_assert(offsetof(DNCharacter_SetMaxSpeedFactor, Factor) == 0x000000, "Member 'DNCharacter_SetMaxSpeedFactor::Factor' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetOverrideViewRotation
// 0x0010 (0x0010 - 0x0000)
struct DNCharacter_SetOverrideViewRotation final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OverideRotation;                                   // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetOverrideViewRotation) == 0x000004, "Wrong alignment on DNCharacter_SetOverrideViewRotation");
static_assert(sizeof(DNCharacter_SetOverrideViewRotation) == 0x000010, "Wrong size on DNCharacter_SetOverrideViewRotation");
static_assert(offsetof(DNCharacter_SetOverrideViewRotation, Enabled) == 0x000000, "Member 'DNCharacter_SetOverrideViewRotation::Enabled' has a wrong offset!");
static_assert(offsetof(DNCharacter_SetOverrideViewRotation, OverideRotation) == 0x000004, "Member 'DNCharacter_SetOverrideViewRotation::OverideRotation' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetReplicatedInputVector_AP
// 0x000C (0x000C - 0x0000)
struct DNCharacter_SetReplicatedInputVector_AP final
{
public:
	struct FVector                                InControllerInputVector;                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetReplicatedInputVector_AP) == 0x000004, "Wrong alignment on DNCharacter_SetReplicatedInputVector_AP");
static_assert(sizeof(DNCharacter_SetReplicatedInputVector_AP) == 0x00000C, "Wrong size on DNCharacter_SetReplicatedInputVector_AP");
static_assert(offsetof(DNCharacter_SetReplicatedInputVector_AP, InControllerInputVector) == 0x000000, "Member 'DNCharacter_SetReplicatedInputVector_AP::InControllerInputVector' has a wrong offset!");

// Function DynamicNode.DNCharacter.SetTimerAutoCrouching
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_SetTimerAutoCrouching final
{
public:
	float                                         TimerVal;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SetTimerAutoCrouching) == 0x000004, "Wrong alignment on DNCharacter_SetTimerAutoCrouching");
static_assert(sizeof(DNCharacter_SetTimerAutoCrouching) == 0x000004, "Wrong size on DNCharacter_SetTimerAutoCrouching");
static_assert(offsetof(DNCharacter_SetTimerAutoCrouching, TimerVal) == 0x000000, "Member 'DNCharacter_SetTimerAutoCrouching::TimerVal' has a wrong offset!");

// Function DynamicNode.DNCharacter.SPROXY_ComputeLocallyVariables
// 0x002C (0x002C - 0x0000)
struct DNCharacter_SPROXY_ComputeLocallyVariables final
{
public:
	struct FLocallyRepData_DN_Int                 RepData;                                           // 0x0000(0x002C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_SPROXY_ComputeLocallyVariables) == 0x000004, "Wrong alignment on DNCharacter_SPROXY_ComputeLocallyVariables");
static_assert(sizeof(DNCharacter_SPROXY_ComputeLocallyVariables) == 0x00002C, "Wrong size on DNCharacter_SPROXY_ComputeLocallyVariables");
static_assert(offsetof(DNCharacter_SPROXY_ComputeLocallyVariables, RepData) == 0x000000, "Member 'DNCharacter_SPROXY_ComputeLocallyVariables::RepData' has a wrong offset!");

// Function DynamicNode.DNCharacter.StartProne
// 0x0001 (0x0001 - 0x0000)
struct DNCharacter_StartProne final
{
public:
	bool                                          bClientSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_StartProne) == 0x000001, "Wrong alignment on DNCharacter_StartProne");
static_assert(sizeof(DNCharacter_StartProne) == 0x000001, "Wrong size on DNCharacter_StartProne");
static_assert(offsetof(DNCharacter_StartProne, bClientSimulation) == 0x000000, "Member 'DNCharacter_StartProne::bClientSimulation' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetCurrentMaxSpeed
// 0x0008 (0x0008 - 0x0000)
struct DNCharacter_GetCurrentMaxSpeed final
{
public:
	bool                                          UseMaxSpeedFactor;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetCurrentMaxSpeed) == 0x000004, "Wrong alignment on DNCharacter_GetCurrentMaxSpeed");
static_assert(sizeof(DNCharacter_GetCurrentMaxSpeed) == 0x000008, "Wrong size on DNCharacter_GetCurrentMaxSpeed");
static_assert(offsetof(DNCharacter_GetCurrentMaxSpeed, UseMaxSpeedFactor) == 0x000000, "Member 'DNCharacter_GetCurrentMaxSpeed::UseMaxSpeedFactor' has a wrong offset!");
static_assert(offsetof(DNCharacter_GetCurrentMaxSpeed, ReturnValue) == 0x000004, "Member 'DNCharacter_GetCurrentMaxSpeed::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetDNMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct DNCharacter_GetDNMovementComponent final
{
public:
	class UDNMovementComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetDNMovementComponent) == 0x000008, "Wrong alignment on DNCharacter_GetDNMovementComponent");
static_assert(sizeof(DNCharacter_GetDNMovementComponent) == 0x000008, "Wrong size on DNCharacter_GetDNMovementComponent");
static_assert(offsetof(DNCharacter_GetDNMovementComponent, ReturnValue) == 0x000000, "Member 'DNCharacter_GetDNMovementComponent::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetMaxSpeedFactor
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_GetMaxSpeedFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetMaxSpeedFactor) == 0x000004, "Wrong alignment on DNCharacter_GetMaxSpeedFactor");
static_assert(sizeof(DNCharacter_GetMaxSpeedFactor) == 0x000004, "Wrong size on DNCharacter_GetMaxSpeedFactor");
static_assert(offsetof(DNCharacter_GetMaxSpeedFactor, ReturnValue) == 0x000000, "Member 'DNCharacter_GetMaxSpeedFactor::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetReplicatedCurrentAngleDeltaAbs
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_GetReplicatedCurrentAngleDeltaAbs final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetReplicatedCurrentAngleDeltaAbs) == 0x000004, "Wrong alignment on DNCharacter_GetReplicatedCurrentAngleDeltaAbs");
static_assert(sizeof(DNCharacter_GetReplicatedCurrentAngleDeltaAbs) == 0x000004, "Wrong size on DNCharacter_GetReplicatedCurrentAngleDeltaAbs");
static_assert(offsetof(DNCharacter_GetReplicatedCurrentAngleDeltaAbs, ReturnValue) == 0x000000, "Member 'DNCharacter_GetReplicatedCurrentAngleDeltaAbs::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetReplicatedCurrentAngleDir
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_GetReplicatedCurrentAngleDir final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetReplicatedCurrentAngleDir) == 0x000004, "Wrong alignment on DNCharacter_GetReplicatedCurrentAngleDir");
static_assert(sizeof(DNCharacter_GetReplicatedCurrentAngleDir) == 0x000004, "Wrong size on DNCharacter_GetReplicatedCurrentAngleDir");
static_assert(offsetof(DNCharacter_GetReplicatedCurrentAngleDir, ReturnValue) == 0x000000, "Member 'DNCharacter_GetReplicatedCurrentAngleDir::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetReplicatedFrictionFactorChangeDir
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_GetReplicatedFrictionFactorChangeDir final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetReplicatedFrictionFactorChangeDir) == 0x000004, "Wrong alignment on DNCharacter_GetReplicatedFrictionFactorChangeDir");
static_assert(sizeof(DNCharacter_GetReplicatedFrictionFactorChangeDir) == 0x000004, "Wrong size on DNCharacter_GetReplicatedFrictionFactorChangeDir");
static_assert(offsetof(DNCharacter_GetReplicatedFrictionFactorChangeDir, ReturnValue) == 0x000000, "Member 'DNCharacter_GetReplicatedFrictionFactorChangeDir::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetReplicatedMaxAccelerationCoef
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_GetReplicatedMaxAccelerationCoef final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetReplicatedMaxAccelerationCoef) == 0x000004, "Wrong alignment on DNCharacter_GetReplicatedMaxAccelerationCoef");
static_assert(sizeof(DNCharacter_GetReplicatedMaxAccelerationCoef) == 0x000004, "Wrong size on DNCharacter_GetReplicatedMaxAccelerationCoef");
static_assert(offsetof(DNCharacter_GetReplicatedMaxAccelerationCoef, ReturnValue) == 0x000000, "Member 'DNCharacter_GetReplicatedMaxAccelerationCoef::ReturnValue' has a wrong offset!");

// Function DynamicNode.DNCharacter.GetReplicatedMaxSpeedCoef
// 0x0004 (0x0004 - 0x0000)
struct DNCharacter_GetReplicatedMaxSpeedCoef final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DNCharacter_GetReplicatedMaxSpeedCoef) == 0x000004, "Wrong alignment on DNCharacter_GetReplicatedMaxSpeedCoef");
static_assert(sizeof(DNCharacter_GetReplicatedMaxSpeedCoef) == 0x000004, "Wrong size on DNCharacter_GetReplicatedMaxSpeedCoef");
static_assert(offsetof(DNCharacter_GetReplicatedMaxSpeedCoef, ReturnValue) == 0x000000, "Member 'DNCharacter_GetReplicatedMaxSpeedCoef::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.CheckPropsActorZoneOverlap
// 0x0018 (0x0018 - 0x0000)
struct ActionPropsActor_DN_CheckPropsActorZoneOverlap final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Charater;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APropsActorZone_DN*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_CheckPropsActorZoneOverlap) == 0x000008, "Wrong alignment on ActionPropsActor_DN_CheckPropsActorZoneOverlap");
static_assert(sizeof(ActionPropsActor_DN_CheckPropsActorZoneOverlap) == 0x000018, "Wrong size on ActionPropsActor_DN_CheckPropsActorZoneOverlap");
static_assert(offsetof(ActionPropsActor_DN_CheckPropsActorZoneOverlap, Branches) == 0x000000, "Member 'ActionPropsActor_DN_CheckPropsActorZoneOverlap::Branches' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_CheckPropsActorZoneOverlap, Charater) == 0x000008, "Member 'ActionPropsActor_DN_CheckPropsActorZoneOverlap::Charater' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_CheckPropsActorZoneOverlap, ReturnValue) == 0x000010, "Member 'ActionPropsActor_DN_CheckPropsActorZoneOverlap::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.CheckTargetSocketExist
// 0x000C (0x000C - 0x0000)
struct ActionPropsActor_DN_CheckTargetSocketExist final
{
public:
	class FName                                   TargetSocketName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_CheckTargetSocketExist) == 0x000004, "Wrong alignment on ActionPropsActor_DN_CheckTargetSocketExist");
static_assert(sizeof(ActionPropsActor_DN_CheckTargetSocketExist) == 0x00000C, "Wrong size on ActionPropsActor_DN_CheckTargetSocketExist");
static_assert(offsetof(ActionPropsActor_DN_CheckTargetSocketExist, TargetSocketName) == 0x000000, "Member 'ActionPropsActor_DN_CheckTargetSocketExist::TargetSocketName' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_CheckTargetSocketExist, ReturnValue) == 0x000008, "Member 'ActionPropsActor_DN_CheckTargetSocketExist::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.EndMoveEvent
// 0x0001 (0x0001 - 0x0000)
struct ActionPropsActor_DN_EndMoveEvent final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_EndMoveEvent) == 0x000001, "Wrong alignment on ActionPropsActor_DN_EndMoveEvent");
static_assert(sizeof(ActionPropsActor_DN_EndMoveEvent) == 0x000001, "Wrong size on ActionPropsActor_DN_EndMoveEvent");
static_assert(offsetof(ActionPropsActor_DN_EndMoveEvent, IsReverse) == 0x000000, "Member 'ActionPropsActor_DN_EndMoveEvent::IsReverse' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.HandMoveBackEvent
// 0x0040 (0x0040 - 0x0000)
struct ActionPropsActor_DN_HandMoveBackEvent final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurTime;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CurRelativeTransform;                              // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_HandMoveBackEvent) == 0x000010, "Wrong alignment on ActionPropsActor_DN_HandMoveBackEvent");
static_assert(sizeof(ActionPropsActor_DN_HandMoveBackEvent) == 0x000040, "Wrong size on ActionPropsActor_DN_HandMoveBackEvent");
static_assert(offsetof(ActionPropsActor_DN_HandMoveBackEvent, IsReverse) == 0x000000, "Member 'ActionPropsActor_DN_HandMoveBackEvent::IsReverse' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_HandMoveBackEvent, CurTime) == 0x000004, "Member 'ActionPropsActor_DN_HandMoveBackEvent::CurTime' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_HandMoveBackEvent, CurRelativeTransform) == 0x000010, "Member 'ActionPropsActor_DN_HandMoveBackEvent::CurRelativeTransform' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.HandReachedTargetSocketEvent
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_HandReachedTargetSocketEvent final
{
public:
	int32                                         HandIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReverse;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_HandReachedTargetSocketEvent) == 0x000004, "Wrong alignment on ActionPropsActor_DN_HandReachedTargetSocketEvent");
static_assert(sizeof(ActionPropsActor_DN_HandReachedTargetSocketEvent) == 0x000008, "Wrong size on ActionPropsActor_DN_HandReachedTargetSocketEvent");
static_assert(offsetof(ActionPropsActor_DN_HandReachedTargetSocketEvent, HandIdx) == 0x000000, "Member 'ActionPropsActor_DN_HandReachedTargetSocketEvent::HandIdx' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_HandReachedTargetSocketEvent, IsReverse) == 0x000004, "Member 'ActionPropsActor_DN_HandReachedTargetSocketEvent::IsReverse' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.IntermediatePointsReachedEvent
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_IntermediatePointsReachedEvent final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_IntermediatePointsReachedEvent) == 0x000004, "Wrong alignment on ActionPropsActor_DN_IntermediatePointsReachedEvent");
static_assert(sizeof(ActionPropsActor_DN_IntermediatePointsReachedEvent) == 0x000008, "Wrong size on ActionPropsActor_DN_IntermediatePointsReachedEvent");
static_assert(offsetof(ActionPropsActor_DN_IntermediatePointsReachedEvent, IsReverse) == 0x000000, "Member 'ActionPropsActor_DN_IntermediatePointsReachedEvent::IsReverse' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IntermediatePointsReachedEvent, Param_Index) == 0x000004, "Member 'ActionPropsActor_DN_IntermediatePointsReachedEvent::Param_Index' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.InteruptCurrentMovement
// 0x0001 (0x0001 - 0x0000)
struct ActionPropsActor_DN_InteruptCurrentMovement final
{
public:
	EInterruptBehaviorFollowActor_DN              Behavior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_InteruptCurrentMovement) == 0x000001, "Wrong alignment on ActionPropsActor_DN_InteruptCurrentMovement");
static_assert(sizeof(ActionPropsActor_DN_InteruptCurrentMovement) == 0x000001, "Wrong size on ActionPropsActor_DN_InteruptCurrentMovement");
static_assert(offsetof(ActionPropsActor_DN_InteruptCurrentMovement, Behavior) == 0x000000, "Member 'ActionPropsActor_DN_InteruptCurrentMovement::Behavior' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.IsDirectMode
// 0x0010 (0x0010 - 0x0000)
struct ActionPropsActor_DN_IsDirectMode final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FromIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_IsDirectMode) == 0x000004, "Wrong alignment on ActionPropsActor_DN_IsDirectMode");
static_assert(sizeof(ActionPropsActor_DN_IsDirectMode) == 0x000010, "Wrong size on ActionPropsActor_DN_IsDirectMode");
static_assert(offsetof(ActionPropsActor_DN_IsDirectMode, Branches) == 0x000000, "Member 'ActionPropsActor_DN_IsDirectMode::Branches' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsDirectMode, FromIndex) == 0x000004, "Member 'ActionPropsActor_DN_IsDirectMode::FromIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsDirectMode, ToIndex) == 0x000008, "Member 'ActionPropsActor_DN_IsDirectMode::ToIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsDirectMode, ReturnValue) == 0x00000C, "Member 'ActionPropsActor_DN_IsDirectMode::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.IsInPosition
// 0x0010 (0x0010 - 0x0000)
struct ActionPropsActor_DN_IsInPosition final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPropsActorPosition_DN                        NewPropsActorPosition;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntermediatePositionIndex;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_IsInPosition) == 0x000004, "Wrong alignment on ActionPropsActor_DN_IsInPosition");
static_assert(sizeof(ActionPropsActor_DN_IsInPosition) == 0x000010, "Wrong size on ActionPropsActor_DN_IsInPosition");
static_assert(offsetof(ActionPropsActor_DN_IsInPosition, Branches) == 0x000000, "Member 'ActionPropsActor_DN_IsInPosition::Branches' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsInPosition, NewPropsActorPosition) == 0x000001, "Member 'ActionPropsActor_DN_IsInPosition::NewPropsActorPosition' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsInPosition, IntermediatePositionIndex) == 0x000004, "Member 'ActionPropsActor_DN_IsInPosition::IntermediatePositionIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsInPosition, Tolerance) == 0x000008, "Member 'ActionPropsActor_DN_IsInPosition::Tolerance' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsInPosition, ReturnValue) == 0x00000C, "Member 'ActionPropsActor_DN_IsInPosition::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.IsMoveComplited
// 0x0002 (0x0002 - 0x0000)
struct ActionPropsActor_DN_IsMoveComplited final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_IsMoveComplited) == 0x000001, "Wrong alignment on ActionPropsActor_DN_IsMoveComplited");
static_assert(sizeof(ActionPropsActor_DN_IsMoveComplited) == 0x000002, "Wrong size on ActionPropsActor_DN_IsMoveComplited");
static_assert(offsetof(ActionPropsActor_DN_IsMoveComplited, Branches) == 0x000000, "Member 'ActionPropsActor_DN_IsMoveComplited::Branches' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsMoveComplited, ReturnValue) == 0x000001, "Member 'ActionPropsActor_DN_IsMoveComplited::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.IsNextReverse
// 0x0002 (0x0002 - 0x0000)
struct ActionPropsActor_DN_IsNextReverse final
{
public:
	EBranchesOutEnum                              Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_IsNextReverse) == 0x000001, "Wrong alignment on ActionPropsActor_DN_IsNextReverse");
static_assert(sizeof(ActionPropsActor_DN_IsNextReverse) == 0x000002, "Wrong size on ActionPropsActor_DN_IsNextReverse");
static_assert(offsetof(ActionPropsActor_DN_IsNextReverse, Branches) == 0x000000, "Member 'ActionPropsActor_DN_IsNextReverse::Branches' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_IsNextReverse, ReturnValue) == 0x000001, "Member 'ActionPropsActor_DN_IsNextReverse::ReturnValue' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetDirectModePairsBothDirection
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetDirectModePairsBothDirection final
{
public:
	int32                                         FirstIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetDirectModePairsBothDirection) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetDirectModePairsBothDirection");
static_assert(sizeof(ActionPropsActor_DN_SetDirectModePairsBothDirection) == 0x000008, "Wrong size on ActionPropsActor_DN_SetDirectModePairsBothDirection");
static_assert(offsetof(ActionPropsActor_DN_SetDirectModePairsBothDirection, FirstIndex) == 0x000000, "Member 'ActionPropsActor_DN_SetDirectModePairsBothDirection::FirstIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetDirectModePairsBothDirection, SecondIndex) == 0x000004, "Member 'ActionPropsActor_DN_SetDirectModePairsBothDirection::SecondIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetDirectModePairsSingleDirection
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetDirectModePairsSingleDirection final
{
public:
	int32                                         FromIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetDirectModePairsSingleDirection) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetDirectModePairsSingleDirection");
static_assert(sizeof(ActionPropsActor_DN_SetDirectModePairsSingleDirection) == 0x000008, "Wrong size on ActionPropsActor_DN_SetDirectModePairsSingleDirection");
static_assert(offsetof(ActionPropsActor_DN_SetDirectModePairsSingleDirection, FromIndex) == 0x000000, "Member 'ActionPropsActor_DN_SetDirectModePairsSingleDirection::FromIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetDirectModePairsSingleDirection, ToIndex) == 0x000004, "Member 'ActionPropsActor_DN_SetDirectModePairsSingleDirection::ToIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetNextTargetLocation
// 0x0004 (0x0004 - 0x0000)
struct ActionPropsActor_DN_SetNextTargetLocation final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetNextTargetLocation) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetNextTargetLocation");
static_assert(sizeof(ActionPropsActor_DN_SetNextTargetLocation) == 0x000004, "Wrong size on ActionPropsActor_DN_SetNextTargetLocation");
static_assert(offsetof(ActionPropsActor_DN_SetNextTargetLocation, Param_Index) == 0x000000, "Member 'ActionPropsActor_DN_SetNextTargetLocation::Param_Index' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetPosition
// 0x000C (0x000C - 0x0000)
struct ActionPropsActor_DN_SetPosition final
{
public:
	EPropsActorPosition_DN                        NewPropsActorPosition;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntermediatePositionIndex;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveFromIntermediateToStartPosition;               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_SetPosition) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetPosition");
static_assert(sizeof(ActionPropsActor_DN_SetPosition) == 0x00000C, "Wrong size on ActionPropsActor_DN_SetPosition");
static_assert(offsetof(ActionPropsActor_DN_SetPosition, NewPropsActorPosition) == 0x000000, "Member 'ActionPropsActor_DN_SetPosition::NewPropsActorPosition' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetPosition, IntermediatePositionIndex) == 0x000004, "Member 'ActionPropsActor_DN_SetPosition::IntermediatePositionIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetPosition, MoveFromIntermediateToStartPosition) == 0x000008, "Member 'ActionPropsActor_DN_SetPosition::MoveFromIntermediateToStartPosition' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponent
// 0x0010 (0x0010 - 0x0000)
struct ActionPropsActor_DN_SetSpecificHandleComponent final
{
public:
	class FName                                   TargetSocketName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandComponentTagName;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificHandleComponent) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetSpecificHandleComponent");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificHandleComponent) == 0x000010, "Wrong size on ActionPropsActor_DN_SetSpecificHandleComponent");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponent, TargetSocketName) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificHandleComponent::TargetSocketName' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponent, HandComponentTagName) == 0x000008, "Member 'ActionPropsActor_DN_SetSpecificHandleComponent::HandComponentTagName' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponentTargetIndex
// 0x0020 (0x0020 - 0x0000)
struct ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex final
{
public:
	TArray<int32>                                 TargetIndexArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandComponentTagName;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex) == 0x000008, "Wrong alignment on ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex) == 0x000020, "Wrong size on ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex, TargetIndexArray) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex::TargetIndexArray' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex, TargetSocketName) == 0x000010, "Member 'ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex::TargetSocketName' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex, HandComponentTagName) == 0x000018, "Member 'ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex::HandComponentTagName' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponentUsingTargetIndex
// 0x0004 (0x0004 - 0x0000)
struct ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex final
{
public:
	int32                                         TargetIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex) == 0x000004, "Wrong size on ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex, TargetIndex) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex::TargetIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponentUsingTargetIndexExt
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt final
{
public:
	int32                                         FromIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt) == 0x000008, "Wrong size on ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt, FromIndex) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt::FromIndex' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt, ToIndex) == 0x000004, "Member 'ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt::ToIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificIntermediatePoints
// 0x0004 (0x0004 - 0x0000)
struct ActionPropsActor_DN_SetSpecificIntermediatePoints final
{
public:
	int32                                         IntermediatePointsIndex;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificIntermediatePoints) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetSpecificIntermediatePoints");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificIntermediatePoints) == 0x000004, "Wrong size on ActionPropsActor_DN_SetSpecificIntermediatePoints");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificIntermediatePoints, IntermediatePointsIndex) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificIntermediatePoints::IntermediatePointsIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificIntermediatePointsUsingTargetIndex
// 0x0004 (0x0004 - 0x0000)
struct ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex final
{
public:
	int32                                         TargetIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex) == 0x000004, "Wrong size on ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex, TargetIndex) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex::TargetIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificIntermediateTargetIndex
// 0x0018 (0x0018 - 0x0000)
struct ActionPropsActor_DN_SetSpecificIntermediateTargetIndex final
{
public:
	TArray<int32>                                 TargetIndexArray;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         IntermediatePointIndex;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificIntermediateTargetIndex) == 0x000008, "Wrong alignment on ActionPropsActor_DN_SetSpecificIntermediateTargetIndex");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificIntermediateTargetIndex) == 0x000018, "Wrong size on ActionPropsActor_DN_SetSpecificIntermediateTargetIndex");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificIntermediateTargetIndex, TargetIndexArray) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificIntermediateTargetIndex::TargetIndexArray' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificIntermediateTargetIndex, IntermediatePointIndex) == 0x000010, "Member 'ActionPropsActor_DN_SetSpecificIntermediateTargetIndex::IntermediatePointIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetSpecificTargetSocket
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetSpecificTargetSocket final
{
public:
	class FName                                   SpecificTargetSocketName;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetSpecificTargetSocket) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetSpecificTargetSocket");
static_assert(sizeof(ActionPropsActor_DN_SetSpecificTargetSocket) == 0x000008, "Wrong size on ActionPropsActor_DN_SetSpecificTargetSocket");
static_assert(offsetof(ActionPropsActor_DN_SetSpecificTargetSocket, SpecificTargetSocketName) == 0x000000, "Member 'ActionPropsActor_DN_SetSpecificTargetSocket::SpecificTargetSocketName' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetTargetAlpha
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetTargetAlpha final
{
public:
	float                                         TargetAlpha;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeDirectionIfNeed;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActionPropsActor_DN_SetTargetAlpha) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetTargetAlpha");
static_assert(sizeof(ActionPropsActor_DN_SetTargetAlpha) == 0x000008, "Wrong size on ActionPropsActor_DN_SetTargetAlpha");
static_assert(offsetof(ActionPropsActor_DN_SetTargetAlpha, TargetAlpha) == 0x000000, "Member 'ActionPropsActor_DN_SetTargetAlpha::TargetAlpha' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetTargetAlpha, ChangeDirectionIfNeed) == 0x000004, "Member 'ActionPropsActor_DN_SetTargetAlpha::ChangeDirectionIfNeed' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetTargetAlphaReverse
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetTargetAlphaReverse final
{
public:
	float                                         TargetAlpha;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAlphaForReverseMode;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetTargetAlphaReverse) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetTargetAlphaReverse");
static_assert(sizeof(ActionPropsActor_DN_SetTargetAlphaReverse) == 0x000008, "Wrong size on ActionPropsActor_DN_SetTargetAlphaReverse");
static_assert(offsetof(ActionPropsActor_DN_SetTargetAlphaReverse, TargetAlpha) == 0x000000, "Member 'ActionPropsActor_DN_SetTargetAlphaReverse::TargetAlpha' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetTargetAlphaReverse, TargetAlphaForReverseMode) == 0x000004, "Member 'ActionPropsActor_DN_SetTargetAlphaReverse::TargetAlphaForReverseMode' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.SetTargetPosition
// 0x0008 (0x0008 - 0x0000)
struct ActionPropsActor_DN_SetTargetPosition final
{
public:
	EPropsActorPosition_DN                        NewPropsActorPosition;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IntermediatePositionIndex;                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_SetTargetPosition) == 0x000004, "Wrong alignment on ActionPropsActor_DN_SetTargetPosition");
static_assert(sizeof(ActionPropsActor_DN_SetTargetPosition) == 0x000008, "Wrong size on ActionPropsActor_DN_SetTargetPosition");
static_assert(offsetof(ActionPropsActor_DN_SetTargetPosition, NewPropsActorPosition) == 0x000000, "Member 'ActionPropsActor_DN_SetTargetPosition::NewPropsActorPosition' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_SetTargetPosition, IntermediatePositionIndex) == 0x000004, "Member 'ActionPropsActor_DN_SetTargetPosition::IntermediatePositionIndex' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.StartHandMoveEvent
// 0x0010 (0x0010 - 0x0000)
struct ActionPropsActor_DN_StartHandMoveEvent final
{
public:
	int32                                         HandIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReverse;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ToSocketName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_StartHandMoveEvent) == 0x000004, "Wrong alignment on ActionPropsActor_DN_StartHandMoveEvent");
static_assert(sizeof(ActionPropsActor_DN_StartHandMoveEvent) == 0x000010, "Wrong size on ActionPropsActor_DN_StartHandMoveEvent");
static_assert(offsetof(ActionPropsActor_DN_StartHandMoveEvent, HandIdx) == 0x000000, "Member 'ActionPropsActor_DN_StartHandMoveEvent::HandIdx' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_StartHandMoveEvent, IsReverse) == 0x000004, "Member 'ActionPropsActor_DN_StartHandMoveEvent::IsReverse' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_StartHandMoveEvent, ToSocketName) == 0x000008, "Member 'ActionPropsActor_DN_StartHandMoveEvent::ToSocketName' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.StartMoveEvent
// 0x0001 (0x0001 - 0x0000)
struct ActionPropsActor_DN_StartMoveEvent final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_StartMoveEvent) == 0x000001, "Wrong alignment on ActionPropsActor_DN_StartMoveEvent");
static_assert(sizeof(ActionPropsActor_DN_StartMoveEvent) == 0x000001, "Wrong size on ActionPropsActor_DN_StartMoveEvent");
static_assert(offsetof(ActionPropsActor_DN_StartMoveEvent, IsReverse) == 0x000000, "Member 'ActionPropsActor_DN_StartMoveEvent::IsReverse' has a wrong offset!");

// Function DynamicNode.ActionPropsActor_DN.UpdateEvent
// 0x000C (0x000C - 0x0000)
struct ActionPropsActor_DN_UpdateEvent final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntermediateAlpha;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentBlendAlpha;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionPropsActor_DN_UpdateEvent) == 0x000004, "Wrong alignment on ActionPropsActor_DN_UpdateEvent");
static_assert(sizeof(ActionPropsActor_DN_UpdateEvent) == 0x00000C, "Wrong size on ActionPropsActor_DN_UpdateEvent");
static_assert(offsetof(ActionPropsActor_DN_UpdateEvent, Alpha) == 0x000000, "Member 'ActionPropsActor_DN_UpdateEvent::Alpha' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_UpdateEvent, IntermediateAlpha) == 0x000004, "Member 'ActionPropsActor_DN_UpdateEvent::IntermediateAlpha' has a wrong offset!");
static_assert(offsetof(ActionPropsActor_DN_UpdateEvent, CurrentBlendAlpha) == 0x000008, "Member 'ActionPropsActor_DN_UpdateEvent::CurrentBlendAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AddAdditionalRotation_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_AddAdditionalRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotationBase;                                   // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotationInCrouch;                               // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotationInFalling;                              // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotationInAir;                                  // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotationInWater;                                // 0x003C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_AddAdditionalRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AddAdditionalRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AddAdditionalRotation_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_AddAdditionalRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, AddRotationBase) == 0x000008, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::AddRotationBase' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, TransitionTime) == 0x000014, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, AddRotationInCrouch) == 0x000018, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::AddRotationInCrouch' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, AddRotationInFalling) == 0x000024, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::AddRotationInFalling' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, AddRotationInAir) == 0x000030, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::AddRotationInAir' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AddAdditionalRotation_BL, AddRotationInWater) == 0x00003C, "Member 'DynamicNodeBPLibrary_AddAdditionalRotation_BL::AddRotationInWater' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AlignToActor_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_AlignToActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToRotate;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionOffset;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDegrees;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateOnce;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationAlpha;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_AlignToActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AlignToActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AlignToActor_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_AlignToActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, Actor) == 0x000008, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, BoneToRotate) == 0x000010, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::BoneToRotate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, PositionOffset) == 0x000018, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::PositionOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, OffsetRelative) == 0x000024, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, MaxDegrees) == 0x000028, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::MaxDegrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, TransitionTime) == 0x00002C, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, CalculateOnce) == 0x000030, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::CalculateOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AlignToActor_BL, RotationAlpha) == 0x000034, "Member 'DynamicNodeBPLibrary_AlignToActor_BL::RotationAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ApplyAdditiveAnimation_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AdditiveAnimation;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayOnce;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayFrom;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestart;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IntSpeedIfRestart;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, AdditiveAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::AdditiveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, IntSpeed) == 0x000010, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, PlayOnce) == 0x000014, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::PlayOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, PlayFrom) == 0x000018, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::PlayFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, CanRestart) == 0x00001C, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::CanRestart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, IntSpeedIfRestart) == 0x000020, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::IntSpeedIfRestart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL, ReturnValue) == 0x000024, "Member 'DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ApplyAdditiveBSAnimation_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        AdditiveAnimation;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeedPrevious;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BSDataToPrevious;                                  // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL, AdditiveAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL::AdditiveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL, IntSpeed) == 0x000010, "Member 'DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL, IntSpeedPrevious) == 0x000014, "Member 'DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL::IntSpeedPrevious' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL, BSDataToPrevious) == 0x000018, "Member 'DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL::BSDataToPrevious' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL, ReturnValue) == 0x000024, "Member 'DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ApplyAimOffset1D_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_ApplyAimOffset1D_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForNextTransition;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace1D*                 AimOffsetBlendSpace;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitX;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ApplyAimOffset1D_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_ApplyAimOffset1D_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ApplyAimOffset1D_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL, OnlyForNextTransition) == 0x000008, "Member 'DynamicNodeBPLibrary_ApplyAimOffset1D_BL::OnlyForNextTransition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL, AimOffsetBlendSpace) == 0x000010, "Member 'DynamicNodeBPLibrary_ApplyAimOffset1D_BL::AimOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL, InitX) == 0x000018, "Member 'DynamicNodeBPLibrary_ApplyAimOffset1D_BL::InitX' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset1D_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_ApplyAimOffset1D_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ApplyAimOffset2D_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_ApplyAimOffset2D_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForNextTransition;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   AimOffsetBlendSpace;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitX;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitY;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ApplyAimOffset2D_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_ApplyAimOffset2D_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ApplyAimOffset2D_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL, OnlyForNextTransition) == 0x000008, "Member 'DynamicNodeBPLibrary_ApplyAimOffset2D_BL::OnlyForNextTransition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL, AimOffsetBlendSpace) == 0x000010, "Member 'DynamicNodeBPLibrary_ApplyAimOffset2D_BL::AimOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL, InitX) == 0x000018, "Member 'DynamicNodeBPLibrary_ApplyAimOffset2D_BL::InitX' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL, InitY) == 0x00001C, "Member 'DynamicNodeBPLibrary_ApplyAimOffset2D_BL::InitY' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ApplyAimOffset2D_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_ApplyAimOffset2D_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_AllNotify_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL::AllNotifyDelegate_Multi' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_AnimationChange_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class UAnimationAsset* OldLinkedSequence, class UAnimationAsset* NewLinkedSequence)> AnimationChangeNotifyDelegate_Multi;               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL, AnimationChangeNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL::AnimationChangeNotifyDelegate_Multi' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_EndOfTrack_Once_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationTrack;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceIfExist;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL::AllNotifyDelegate_Multi' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL, AnimationTrack) == 0x000018, "Member 'DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL::AnimationTrack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL, ReplaceIfExist) == 0x000020, "Member 'DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL::ReplaceIfExist' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotify_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceIfExist;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL::AllNotifyDelegate_Multi' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL, NotifyName) == 0x000018, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL, ReplaceIfExist) == 0x000020, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL::ReplaceIfExist' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotify_Once_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceIfExist;                                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL::AllNotifyDelegate_Multi' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL, NotifyName) == 0x000018, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL, ReplaceIfExist) == 0x000020, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL::ReplaceIfExist' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotifyAndAsset_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationTrack;                                    // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceIfExist;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL::AllNotifyDelegate_Multi' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL, NotifyName) == 0x000018, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL, AnimationTrack) == 0x000020, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL::AnimationTrack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL, ReplaceIfExist) == 0x000028, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL::ReplaceIfExist' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotifyAndAsset_Once_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationTrack;                                    // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceIfExist;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL::AllNotifyDelegate_Multi' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL, NotifyName) == 0x000018, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL, AnimationTrack) == 0x000020, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL::AnimationTrack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL, ReplaceIfExist) == 0x000028, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL::ReplaceIfExist' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)> AllNotifyDelegate_Multi;                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationTrack;                                    // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaceIfExist;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL");
static_assert(sizeof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL, AllNotifyDelegate_Multi) == 0x000008, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL::AllNotifyDelegate_Multi' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL, NotifyName) == 0x000018, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL, AnimationTrack) == 0x000020, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL::AnimationTrack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL, ReplaceIfExist) == 0x000028, "Member 'DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL::ReplaceIfExist' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.BlendMachine_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_BlendMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        FirstAnimation;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        SecondAnimation;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ThirdAnimation;                                    // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InThirdPlayRate;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSecondValue;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_BlendMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_BlendMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_BlendMachine_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_BlendMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, AlphaValue) == 0x000008, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::AlphaValue' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, FirstAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::FirstAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, SecondAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::SecondAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, ThirdAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::ThirdAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, TransitionTime) == 0x000028, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, InPlayRate) == 0x00002C, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, InThirdPlayRate) == 0x000030, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::InThirdPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, MaxSecondValue) == 0x000034, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::MaxSecondValue' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BL, ReturnValue) == 0x000038, "Member 'DynamicNodeBPLibrary_BlendMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.BlendMachine_BlendSpace2D_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BledSpaceValueX;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BledSpaceValueY;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BlendSpaceAnimation;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL");
static_assert(sizeof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL, BledSpaceValueX) == 0x000008, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL::BledSpaceValueX' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL, BledSpaceValueY) == 0x00000C, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL::BledSpaceValueY' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL, BlendSpaceAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL::BlendSpaceAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL, PlayRate) == 0x000018, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.BlendMachine_BlendSpace_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BledSpaceValue;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          BlendSpaceAnimation;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL");
static_assert(sizeof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL, BledSpaceValue) == 0x000008, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL::BledSpaceValue' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL, BlendSpaceAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL::BlendSpaceAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL, PlayRate) == 0x000018, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.BreakEquipThing_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_BreakEquipThing_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnablePhysSimWhenTransition;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_BreakEquipThing_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_BreakEquipThing_BL");
static_assert(sizeof(DynamicNodeBPLibrary_BreakEquipThing_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_BreakEquipThing_BL");
static_assert(offsetof(DynamicNodeBPLibrary_BreakEquipThing_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_BreakEquipThing_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_BreakEquipThing_BL, EnablePhysSimWhenTransition) == 0x000008, "Member 'DynamicNodeBPLibrary_BreakEquipThing_BL::EnablePhysSimWhenTransition' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CalculateLeanVector_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_CalculateLeanVector_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeed;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XValFactorDiection;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YValFactorAcceleration;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YValFactorBracking;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityCurve_NoBreak_VelocityThreshold;           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityCurve_NoAccel_VelocityThreshold;           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0024(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CalculateLeanVector_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CalculateLeanVector_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CalculateLeanVector_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_CalculateLeanVector_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, MinSpeed) == 0x000008, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::MinSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, MaxSpeed) == 0x00000C, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::MaxSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, XValFactorDiection) == 0x000010, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::XValFactorDiection' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, YValFactorAcceleration) == 0x000014, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::YValFactorAcceleration' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, YValFactorBracking) == 0x000018, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::YValFactorBracking' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, VelocityCurve_NoBreak_VelocityThreshold) == 0x00001C, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::VelocityCurve_NoBreak_VelocityThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, VelocityCurve_NoAccel_VelocityThreshold) == 0x000020, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::VelocityCurve_NoAccel_VelocityThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalculateLeanVector_BL, ReturnValue) == 0x000024, "Member 'DynamicNodeBPLibrary_CalculateLeanVector_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CalibrateRearSocketWeightLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsProne;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DeltaRotationRoot;                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL, Enabled) == 0x000008, "Member 'DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL::Enabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL, IsProne) == 0x000009, "Member 'DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL::IsProne' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL, DeltaRotationRoot) == 0x00000C, "Member 'DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL::DeltaRotationRoot' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CapsuleTraceMulti_DN
// 0x0090 (0x0090 - 0x0000)
struct DynamicNodeBPLibrary_CapsuleTraceMulti_DN final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace_DN                            DrawDebugType;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x0064(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x0074(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CapsuleTraceMulti_DN");
static_assert(sizeof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN) == 0x000090, "Wrong size on DynamicNodeBPLibrary_CapsuleTraceMulti_DN");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, Start) == 0x000008, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::Start' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, End) == 0x000014, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::End' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, Rotation) == 0x000020, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::Rotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, Radius) == 0x00002C, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::Radius' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, HalfHeight) == 0x000030, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::HalfHeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, TraceChannel) == 0x000034, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::TraceChannel' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, bTraceComplex) == 0x000035, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::bTraceComplex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, ActorsToIgnore) == 0x000038, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, DrawDebugType) == 0x000048, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::DrawDebugType' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, OutHits) == 0x000050, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::OutHits' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, bIgnoreSelf) == 0x000060, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, TraceColor) == 0x000064, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::TraceColor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, TraceHitColor) == 0x000074, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::TraceHitColor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, DrawTime) == 0x000084, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::DrawTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceMulti_DN, ReturnValue) == 0x000088, "Member 'DynamicNodeBPLibrary_CapsuleTraceMulti_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CapsuleTraceSingle_DN
// 0x0108 (0x0108 - 0x0000)
struct DynamicNodeBPLibrary_CapsuleTraceSingle_DN final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceChannel;                                      // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace_DN                            DrawDebugType;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x004C(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x00D8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TraceColor;                                        // 0x00DC(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TraceHitColor;                                     // 0x00EC(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawTime;                                          // 0x00FC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0100(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CapsuleTraceSingle_DN");
static_assert(sizeof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN) == 0x000108, "Wrong size on DynamicNodeBPLibrary_CapsuleTraceSingle_DN");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, Start) == 0x000008, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::Start' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, End) == 0x000014, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::End' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, Rotation) == 0x000020, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::Rotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, Radius) == 0x00002C, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::Radius' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, HalfHeight) == 0x000030, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::HalfHeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, TraceChannel) == 0x000034, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::TraceChannel' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, bTraceComplex) == 0x000035, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::bTraceComplex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, ActorsToIgnore) == 0x000038, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, DrawDebugType) == 0x000048, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::DrawDebugType' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, OutHit) == 0x00004C, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::OutHit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, bIgnoreSelf) == 0x0000D8, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, TraceColor) == 0x0000DC, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::TraceColor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, TraceHitColor) == 0x0000EC, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::TraceHitColor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, DrawTime) == 0x0000FC, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::DrawTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CapsuleTraceSingle_DN, ReturnValue) == 0x000100, "Member 'DynamicNodeBPLibrary_CapsuleTraceSingle_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CheckActorZoneOverlap_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_CheckActorZoneOverlap_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APropsActorZone_DN*                     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_CheckActorZoneOverlap_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CheckActorZoneOverlap_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CheckActorZoneOverlap_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_CheckActorZoneOverlap_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CheckActorZoneOverlap_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CheckActorZoneOverlap_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckActorZoneOverlap_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_CheckActorZoneOverlap_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckActorZoneOverlap_BL, Actor) == 0x000010, "Member 'DynamicNodeBPLibrary_CheckActorZoneOverlap_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckActorZoneOverlap_BL, ReturnValue) == 0x000018, "Member 'DynamicNodeBPLibrary_CheckActorZoneOverlap_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CheckSpecificTransitionZone_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransitionZoneStatus_DN                      TransitionZoneB;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QueryID;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ZoneType;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL, TransitionZoneB) == 0x000008, "Member 'DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL::TransitionZoneB' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL, QueryID) == 0x00000C, "Member 'DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL::QueryID' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL, ZoneType) == 0x000010, "Member 'DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL::ZoneType' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL, ReturnValue) == 0x000018, "Member 'DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CheckTransitionZone_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_CheckTransitionZone_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransitionZoneStatus_DN                      TransitionZoneB;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QueryID;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CheckTransitionZone_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CheckTransitionZone_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CheckTransitionZone_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_CheckTransitionZone_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CheckTransitionZone_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CheckTransitionZone_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckTransitionZone_BL, TransitionZoneB) == 0x000008, "Member 'DynamicNodeBPLibrary_CheckTransitionZone_BL::TransitionZoneB' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckTransitionZone_BL, QueryID) == 0x00000C, "Member 'DynamicNodeBPLibrary_CheckTransitionZone_BL::QueryID' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CheckTransitionZone_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_CheckTransitionZone_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ClampZeroPoint_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_ClampZeroPoint_BL final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNegative;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNegative;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_ClampZeroPoint_BL) == 0x000004, "Wrong alignment on DynamicNodeBPLibrary_ClampZeroPoint_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ClampZeroPoint_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_ClampZeroPoint_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ClampZeroPoint_BL, Value) == 0x000000, "Member 'DynamicNodeBPLibrary_ClampZeroPoint_BL::Value' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ClampZeroPoint_BL, Min) == 0x000004, "Member 'DynamicNodeBPLibrary_ClampZeroPoint_BL::Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ClampZeroPoint_BL, Max) == 0x000008, "Member 'DynamicNodeBPLibrary_ClampZeroPoint_BL::Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ClampZeroPoint_BL, MinNegative) == 0x00000C, "Member 'DynamicNodeBPLibrary_ClampZeroPoint_BL::MinNegative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ClampZeroPoint_BL, MaxNegative) == 0x000010, "Member 'DynamicNodeBPLibrary_ClampZeroPoint_BL::MaxNegative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ClampZeroPoint_BL, ReturnValue) == 0x000014, "Member 'DynamicNodeBPLibrary_ClampZeroPoint_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CreateAnimChanceSet_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_CreateAnimChanceSet_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimChanceData_DN>             AnimSequenceArray;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PauseBetweenChoices;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomStartIndex;                                  // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContainsInternalSets;                              // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimChanceSet_DN*                      ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CreateAnimChanceSet_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_CreateAnimChanceSet_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CreateAnimChanceSet_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL, AnimSequenceArray) == 0x000008, "Member 'DynamicNodeBPLibrary_CreateAnimChanceSet_BL::AnimSequenceArray' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL, PauseBetweenChoices) == 0x000018, "Member 'DynamicNodeBPLibrary_CreateAnimChanceSet_BL::PauseBetweenChoices' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL, RandomStartIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_CreateAnimChanceSet_BL::RandomStartIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL, ContainsInternalSets) == 0x00001D, "Member 'DynamicNodeBPLibrary_CreateAnimChanceSet_BL::ContainsInternalSets' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimChanceSet_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_CreateAnimChanceSet_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CreateAnimTransitionSet_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_CreateAnimTransitionSet_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ToAnimation;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTransitionSetData_DN>          AnimTransitionArray;                               // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          UseEmptyArrayUseClassOnlyForSetManually;           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimTransitionSet_DN*                  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CreateAnimTransitionSet_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_CreateAnimTransitionSet_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CreateAnimTransitionSet_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL, ToAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_CreateAnimTransitionSet_BL::ToAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL, AnimTransitionArray) == 0x000010, "Member 'DynamicNodeBPLibrary_CreateAnimTransitionSet_BL::AnimTransitionArray' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL, UseEmptyArrayUseClassOnlyForSetManually) == 0x000020, "Member 'DynamicNodeBPLibrary_CreateAnimTransitionSet_BL::UseEmptyArrayUseClassOnlyForSetManually' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimTransitionSet_BL, ReturnValue) == 0x000028, "Member 'DynamicNodeBPLibrary_CreateAnimTransitionSet_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CreateAnimVariationSet_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_CreateAnimVariationSet_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVariationSetData_DN>           AnimSequenceArray;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentIndex;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IteratingEnable;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContainsInternalSets;                              // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimVariationSet_DN*                   ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CreateAnimVariationSet_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_CreateAnimVariationSet_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CreateAnimVariationSet_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL, AnimSequenceArray) == 0x000008, "Member 'DynamicNodeBPLibrary_CreateAnimVariationSet_BL::AnimSequenceArray' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL, CurrentIndex) == 0x000018, "Member 'DynamicNodeBPLibrary_CreateAnimVariationSet_BL::CurrentIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL, IteratingEnable) == 0x00001C, "Member 'DynamicNodeBPLibrary_CreateAnimVariationSet_BL::IteratingEnable' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL, ContainsInternalSets) == 0x00001D, "Member 'DynamicNodeBPLibrary_CreateAnimVariationSet_BL::ContainsInternalSets' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateAnimVariationSet_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_CreateAnimVariationSet_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CreateLoopNAnimationAsset_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequence;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopStartNotify;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopEndNotify;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLoopingDeltaTime;                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoopNAnimationAsset_DN*                ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, AnimSequence) == 0x000008, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::AnimSequence' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, LoopStartNotify) == 0x000010, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::LoopStartNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, LoopEndNotify) == 0x000018, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::LoopEndNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, PlayRate) == 0x000020, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, TransitionTime) == 0x000024, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, StartLoopingDeltaTime) == 0x000028, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::StartLoopingDeltaTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL, ReturnValue) == 0x000030, "Member 'DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CrouchMachine_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_CrouchMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        CrouchAnimation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        CrouchIdleAnimation;                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StandingAnimation;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReverseStartAsEndAnimation;                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime_ToC;                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_CIdle;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_SU;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CrouchMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CrouchMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CrouchMachine_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_CrouchMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, CrouchAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::CrouchAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, CrouchIdleAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::CrouchIdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, StandingAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::StandingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, UseReverseStartAsEndAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::UseReverseStartAsEndAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, TransitionTime_ToC) == 0x000024, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::TransitionTime_ToC' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, TransitionTime_CIdle) == 0x000028, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::TransitionTime_CIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, TransitionTime_SU) == 0x00002C, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::TransitionTime_SU' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, PlayRate) == 0x000030, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, TransitionTimeQuickReturn) == 0x000034, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CrouchMachine_BL, ReturnValue) == 0x000038, "Member 'DynamicNodeBPLibrary_CrouchMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.CustomStateMachine_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_CustomStateMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAccelerationForDM;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlayToStateAnimationTillEnd;                  // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlayFromStateAnimationTillEnd;                // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ToStateAnimation;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        FromStateAnimation;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReverseStartAsEndAnimation;                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime_ToS;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_Idle;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_FS;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_CustomStateMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_CustomStateMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_CustomStateMachine_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_CustomStateMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, CustomIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::CustomIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, UseAccelerationForDM) == 0x00000C, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::UseAccelerationForDM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, ForcePlayToStateAnimationTillEnd) == 0x00000D, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::ForcePlayToStateAnimationTillEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, ForcePlayFromStateAnimationTillEnd) == 0x00000E, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::ForcePlayFromStateAnimationTillEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, ToStateAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::ToStateAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, IdleAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, FromStateAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::FromStateAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, UseReverseStartAsEndAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::UseReverseStartAsEndAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, TransitionTime_ToS) == 0x00002C, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::TransitionTime_ToS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, TransitionTime_Idle) == 0x000030, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::TransitionTime_Idle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, TransitionTime_FS) == 0x000034, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::TransitionTime_FS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, PlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, TransitionTimeQuickReturn) == 0x00003C, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_CustomStateMachine_BL, ReturnValue) == 0x000040, "Member 'DynamicNodeBPLibrary_CustomStateMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableAdditiveAnimation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableAdditiveAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableAdditiveAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableAdditiveAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableAdditiveAnimation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableAdditiveAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAdditiveAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableAdditiveAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAdditiveAnimation_BL, IntSpeed) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableAdditiveAnimation_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAdditiveAnimation_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_DisableAdditiveAnimation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableAdditiveBSAnimation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL, IntSpeed) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableAimOffsetForNextTr_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableAllAdditiveAnimation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL, IntSpeed) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableAllBlendBoneStacksPause_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableAllErrorInfo_DN
// 0x0001 (0x0001 - 0x0000)
struct DynamicNodeBPLibrary_DisableAllErrorInfo_DN final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_DisableAllErrorInfo_DN) == 0x000001, "Wrong alignment on DynamicNodeBPLibrary_DisableAllErrorInfo_DN");
static_assert(sizeof(DynamicNodeBPLibrary_DisableAllErrorInfo_DN) == 0x000001, "Wrong size on DynamicNodeBPLibrary_DisableAllErrorInfo_DN");
static_assert(offsetof(DynamicNodeBPLibrary_DisableAllErrorInfo_DN, Disable) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableAllErrorInfo_DN::Disable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableDelegateOnAnimFinBlend_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContinueFinishStack;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL, ContinueFinishStack) == 0x000010, "Member 'DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL::ContinueFinishStack' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableInfoStrings_BL
// 0x0001 (0x0001 - 0x0000)
struct DynamicNodeBPLibrary_DisableInfoStrings_BL final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_DisableInfoStrings_BL) == 0x000001, "Wrong alignment on DynamicNodeBPLibrary_DisableInfoStrings_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableInfoStrings_BL) == 0x000001, "Wrong size on DynamicNodeBPLibrary_DisableInfoStrings_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableInfoStrings_BL, Disable) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableInfoStrings_BL::Disable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableLegsIKWhenMovingDownhill_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL, Disable) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL::Disable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableLookAt_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableLookAt_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableLookAt_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableLookAt_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableLookAt_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableLookAt_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableLookAt_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableLookAt_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableLookAt_BL, TransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableLookAt_BL::TransitionTime' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableTurnInPlaceAnimations_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL, Disabled) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL::Disabled' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DisableTurnToControlRotation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_DisableTurnToControlRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Disable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DisableTurnToControlRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DisableTurnToControlRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DisableTurnToControlRotation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_DisableTurnToControlRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DisableTurnToControlRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DisableTurnToControlRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DisableTurnToControlRotation_BL, Disable) == 0x000008, "Member 'DynamicNodeBPLibrary_DisableTurnToControlRotation_BL::Disable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DoubleMultiTransitionToAnimFromCurPose_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ToNewAsset;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayFrom;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTill;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        FinalAsset;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_final;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping_Final;                                  // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartPosition_Final;                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate_Final;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSyncGroups;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0045(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, ToNewAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::ToNewAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, PlayFrom) == 0x00001C, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::PlayFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, PlayTill) == 0x000020, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::PlayTill' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, FinalAsset) == 0x000028, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::FinalAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, TransitionTime_final) == 0x000030, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::TransitionTime_final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, bIsLooping_Final) == 0x000034, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::bIsLooping_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, InPlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, InStartPosition_Final) == 0x00003C, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::InStartPosition_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, InPlayRate_Final) == 0x000040, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::InPlayRate_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, UseSyncGroups) == 0x000044, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::UseSyncGroups' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL, ReturnValue) == 0x000045, "Member 'DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.DoubleTransitionToAnimFromCurPose_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ToNewAsset;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayFrom;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTill;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        FinalAsset;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_final;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping_Final;                                  // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartPosition_Final;                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate_Final;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, ToNewAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::ToNewAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, PlayFrom) == 0x00001C, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::PlayFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, PlayTill) == 0x000020, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::PlayTill' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, FinalAsset) == 0x000028, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::FinalAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, TransitionTime_final) == 0x000030, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::TransitionTime_final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, bIsLooping_Final) == 0x000034, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::bIsLooping_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, InPlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, InStartPosition_Final) == 0x00003C, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::InStartPosition_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, InPlayRate_Final) == 0x000040, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::InPlayRate_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL, ReturnValue) == 0x000044, "Member 'DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.EliminateYaw_DN
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_EliminateYaw_DN final
{
public:
	struct FRotator                               Rotator;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_EliminateYaw_DN) == 0x000004, "Wrong alignment on DynamicNodeBPLibrary_EliminateYaw_DN");
static_assert(sizeof(DynamicNodeBPLibrary_EliminateYaw_DN) == 0x000018, "Wrong size on DynamicNodeBPLibrary_EliminateYaw_DN");
static_assert(offsetof(DynamicNodeBPLibrary_EliminateYaw_DN, Rotator) == 0x000000, "Member 'DynamicNodeBPLibrary_EliminateYaw_DN::Rotator' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EliminateYaw_DN, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_EliminateYaw_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.EndAnimationStack_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_EndAnimationStack_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_EndAnimationStack_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_EndAnimationStack_BL");
static_assert(sizeof(DynamicNodeBPLibrary_EndAnimationStack_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_EndAnimationStack_BL");
static_assert(offsetof(DynamicNodeBPLibrary_EndAnimationStack_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_EndAnimationStack_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.EquipThing_BL
// 0x0058 (0x0058 - 0x0000)
struct DynamicNodeBPLibrary_EquipThing_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimationToPlay;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEquipThingData_DN>             EquipThingData;                                    // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 WeaponIndex, class FName NotifyToAction, bool FinishTransform)> DelegatesOnComplited;                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PlayFromNotify;                                    // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTillNotify;                                    // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestartAnimation;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_EquipThing_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_EquipThing_BL");
static_assert(sizeof(DynamicNodeBPLibrary_EquipThing_BL) == 0x000058, "Wrong size on DynamicNodeBPLibrary_EquipThing_BL");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_EquipThing_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_EquipThing_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, AnimationToPlay) == 0x000010, "Member 'DynamicNodeBPLibrary_EquipThing_BL::AnimationToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, EquipThingData) == 0x000018, "Member 'DynamicNodeBPLibrary_EquipThing_BL::EquipThingData' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, DelegatesOnComplited) == 0x000028, "Member 'DynamicNodeBPLibrary_EquipThing_BL::DelegatesOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, PlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_EquipThing_BL::PlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, PlayTillNotify) == 0x000040, "Member 'DynamicNodeBPLibrary_EquipThing_BL::PlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, TransitionTime) == 0x000048, "Member 'DynamicNodeBPLibrary_EquipThing_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, PlayRate) == 0x00004C, "Member 'DynamicNodeBPLibrary_EquipThing_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, CanRestartAnimation) == 0x000050, "Member 'DynamicNodeBPLibrary_EquipThing_BL::CanRestartAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_EquipThing_BL, ReturnValue) == 0x000051, "Member 'DynamicNodeBPLibrary_EquipThing_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.FindBetweenNormals_DN
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_FindBetweenNormals_DN final
{
public:
	struct FVector                                Vector1;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vector2;                                           // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Quat;                                              // 0x0020(0x0010)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_FindBetweenNormals_DN) == 0x000010, "Wrong alignment on DynamicNodeBPLibrary_FindBetweenNormals_DN");
static_assert(sizeof(DynamicNodeBPLibrary_FindBetweenNormals_DN) == 0x000040, "Wrong size on DynamicNodeBPLibrary_FindBetweenNormals_DN");
static_assert(offsetof(DynamicNodeBPLibrary_FindBetweenNormals_DN, Vector1) == 0x000000, "Member 'DynamicNodeBPLibrary_FindBetweenNormals_DN::Vector1' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FindBetweenNormals_DN, Vector2) == 0x00000C, "Member 'DynamicNodeBPLibrary_FindBetweenNormals_DN::Vector2' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FindBetweenNormals_DN, Quat) == 0x000020, "Member 'DynamicNodeBPLibrary_FindBetweenNormals_DN::Quat' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FindBetweenNormals_DN, ReturnValue) == 0x000030, "Member 'DynamicNodeBPLibrary_FindBetweenNormals_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.FinishAnimationBlendBoneAnimFin_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionEndOffset;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL");
static_assert(sizeof(DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL, TransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL, TransitionEndOffset) == 0x00000C, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL::TransitionEndOffset' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.FinishAnimationBlendBoneStack_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StackPriority;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL");
static_assert(sizeof(DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL, StackPriority) == 0x000010, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL::StackPriority' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL, TransitionTime) == 0x000014, "Member 'DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL::TransitionTime' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.FlyMachine_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_FlyMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartFlyAnimation;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleFlyAnimation;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndFlyAnimation;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOnlyAccelerationForDM;                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdlePoseVelocityTreshold;                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReverseStartAsEndAnimation;                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime_ToF;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_FIdle;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_EF;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_FlyMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_FlyMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_FlyMachine_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_FlyMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, StartFlyAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::StartFlyAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, IdleFlyAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::IdleFlyAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, EndFlyAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::EndFlyAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, UseOnlyAccelerationForDM) == 0x000020, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::UseOnlyAccelerationForDM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, IdlePoseVelocityTreshold) == 0x000024, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::IdlePoseVelocityTreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, UseReverseStartAsEndAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::UseReverseStartAsEndAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, TransitionTime_ToF) == 0x00002C, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::TransitionTime_ToF' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, TransitionTime_FIdle) == 0x000030, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::TransitionTime_FIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, TransitionTime_EF) == 0x000034, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::TransitionTime_EF' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, PlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, TransitionTimeQuickReturn) == 0x00003C, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FlyMachine_BL, ReturnValue) == 0x000040, "Member 'DynamicNodeBPLibrary_FlyMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ForceNextTransitionNOTMulti_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NextNOTMulti;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL, NextNOTMulti) == 0x000008, "Member 'DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL::NextNOTMulti' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ForceUpdateCurMachineAnimation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Update;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL, Update) == 0x000008, "Member 'DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL::Update' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ForceUsePivotThisFrame_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.FromRagdoll_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_FromRagdoll_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_FromRagdoll_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_FromRagdoll_BL");
static_assert(sizeof(DynamicNodeBPLibrary_FromRagdoll_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_FromRagdoll_BL");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdoll_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_FromRagdoll_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdoll_BL, TransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_FromRagdoll_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdoll_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_FromRagdoll_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.FromRagdollAnim_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_FromRagdollAnim_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFacingUp;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVerticalPose;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimationFromBackside;                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationFromFrontSide;                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationFromVerticalPose;                         // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromNotify;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTillNotify;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_FromRagdollAnim_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_FromRagdollAnim_BL");
static_assert(sizeof(DynamicNodeBPLibrary_FromRagdollAnim_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_FromRagdollAnim_BL");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, IsFacingUp) == 0x000008, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::IsFacingUp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, IsVerticalPose) == 0x000009, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::IsVerticalPose' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, AnimationFromBackside) == 0x000010, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::AnimationFromBackside' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, AnimationFromFrontSide) == 0x000018, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::AnimationFromFrontSide' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, AnimationFromVerticalPose) == 0x000020, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::AnimationFromVerticalPose' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, PlayFromNotify) == 0x000028, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::PlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, PlayTillNotify) == 0x000030, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::PlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, PlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, TransitionTime) == 0x00003C, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_FromRagdollAnim_BL, ReturnValue) == 0x000040, "Member 'DynamicNodeBPLibrary_FromRagdollAnim_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetAimOffsetAnimaAsset_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetAnimInstanceFromCharacter_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMultiNodeInstance_DN*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentAnimation_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetCurrentAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetCurrentAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetCurrentAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetCurrentAnimation_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetCurrentAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetCurrentAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentAnimation_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_GetCurrentAnimation_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentAnimation_BL, BoneName) == 0x000010, "Member 'DynamicNodeBPLibrary_GetCurrentAnimation_BL::BoneName' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentRootDeltaRotationCS_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentSlopeAngleCS_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentTrackInfo_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_GetCurrentTrackInfo_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TransitionFromAnimationAsset;                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTransition;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FullLenght;                                        // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLooping;                                         // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetCurrentTrackInfo_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_GetCurrentTrackInfo_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, TransitionFromAnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::TransitionFromAnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, InTransition) == 0x000018, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::InTransition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, FullLenght) == 0x00001C, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::FullLenght' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, CurrentTime) == 0x000020, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::CurrentTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, PlayRate) == 0x000024, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, IsLooping) == 0x000028, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::IsLooping' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackInfo_BL, BoneName) == 0x00002C, "Member 'DynamicNodeBPLibrary_GetCurrentTrackInfo_BL::BoneName' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentTrackPlaytime_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentTrackTimeInfo_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullLenght;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTime;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverallPlayTime;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL, FullLenght) == 0x000008, "Member 'DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL::FullLenght' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL, CurrentTime) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL::CurrentTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL, OverallPlayTime) == 0x000010, "Member 'DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL::OverallPlayTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL, BoneName) == 0x000014, "Member 'DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL::BoneName' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetEndSwimmStatus_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetEndSwimmStatus_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetEndSwimmStatus_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetEndSwimmStatus_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetEndSwimmStatus_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetEndSwimmStatus_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetEndSwimmStatus_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetEndSwimmStatus_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetEndSwimmStatus_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_GetEndSwimmStatus_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetFlyMachineMoveStatus_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccelerationStatus_DN                        AccelerationStatus;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL, AccelerationStatus) == 0x000008, "Member 'DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL::AccelerationStatus' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetGroundZeroLevelCSLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegZeroLevelCS_Right;                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegZeroLevelCS_Left;                               // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetDifference;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL, LegZeroLevelCS_Right) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL::LegZeroLevelCS_Right' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL, LegZeroLevelCS_Left) == 0x000010, "Member 'DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL::LegZeroLevelCS_Left' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL, GetDifference) == 0x000014, "Member 'DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL::GetDifference' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetHandSpeedCSHandsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetHorizontalPoseMeshRotation_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFacingUp;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LowerSpineBoneName;                                // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpperSpineBoneName;                                // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL, IsFacingUp) == 0x000008, "Member 'DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL::IsFacingUp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL, LowerSpineBoneName) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL::LowerSpineBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL, UpperSpineBoneName) == 0x000014, "Member 'DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL::UpperSpineBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastBlendSpaceMapVelocityValue_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastComplexNormalLegsIK_Left_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastComplexNormalLegsIK_Right_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_LeftFront_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_LeftRear_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_RightFront_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_RightRear_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastOrientationLegsIK_Left_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseZYAxis;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inverse;                                           // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetSimpleNormal;                                   // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL, UseZYAxis) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL::UseZYAxis' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL, Inverse) == 0x00000D, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL::Inverse' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL, GetSimpleNormal) == 0x00000E, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL::GetSimpleNormal' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastOrientationLegsIK_Right_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseZYAxis;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Inverse;                                           // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetSimpleNormal;                                   // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL, UseZYAxis) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL::UseZYAxis' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL, Inverse) == 0x00000D, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL::Inverse' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL, GetSimpleNormal) == 0x00000E, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL::GetSimpleNormal' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastPrelandedDistanceToWater_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistanceToWater;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL, OutDistanceToWater) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL::OutDistanceToWater' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastPrelandedHeight_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetLastPrelandedHeight_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastPrelandedHeight;                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastPrelandedHeight_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastPrelandedHeight_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastPrelandedHeight_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetLastPrelandedHeight_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastPrelandedHeight_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastPrelandedHeight_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastPrelandedHeight_BL, LastPrelandedHeight) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastPrelandedHeight_BL::LastPrelandedHeight' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastPrelandedWaterDepth_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutWaterDepth;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL, OutWaterDepth) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL::OutWaterDepth' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastTraceNormalLegsIK_Left_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLastTraceNormalLegsIK_Right_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL, ReturnValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetLocationBeforeIKHandsIK_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetComponentSpace;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL, GetComponentSpace) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL::GetComponentSpace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetNormalBy3Point_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_GetNormalBy3Point_BL final
{
public:
	struct FVector                                A_RUp;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B_LUp;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                C_Bot;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetNormalBy3Point_BL) == 0x000004, "Wrong alignment on DynamicNodeBPLibrary_GetNormalBy3Point_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetNormalBy3Point_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_GetNormalBy3Point_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy3Point_BL, A_RUp) == 0x000000, "Member 'DynamicNodeBPLibrary_GetNormalBy3Point_BL::A_RUp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy3Point_BL, B_LUp) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetNormalBy3Point_BL::B_LUp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy3Point_BL, C_Bot) == 0x000018, "Member 'DynamicNodeBPLibrary_GetNormalBy3Point_BL::C_Bot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy3Point_BL, ReturnValue) == 0x000024, "Member 'DynamicNodeBPLibrary_GetNormalBy3Point_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetNormalBy4Point_BL
// 0x003C (0x003C - 0x0000)
struct DynamicNodeBPLibrary_GetNormalBy4Point_BL final
{
public:
	struct FVector                                A_RUp;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                B_LUp;                                             // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                C_RBot;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                D_LBot;                                            // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetNormalBy4Point_BL) == 0x000004, "Wrong alignment on DynamicNodeBPLibrary_GetNormalBy4Point_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetNormalBy4Point_BL) == 0x00003C, "Wrong size on DynamicNodeBPLibrary_GetNormalBy4Point_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy4Point_BL, A_RUp) == 0x000000, "Member 'DynamicNodeBPLibrary_GetNormalBy4Point_BL::A_RUp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy4Point_BL, B_LUp) == 0x00000C, "Member 'DynamicNodeBPLibrary_GetNormalBy4Point_BL::B_LUp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy4Point_BL, C_RBot) == 0x000018, "Member 'DynamicNodeBPLibrary_GetNormalBy4Point_BL::C_RBot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy4Point_BL, D_LBot) == 0x000024, "Member 'DynamicNodeBPLibrary_GetNormalBy4Point_BL::D_LBot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNormalBy4Point_BL, ReturnValue) == 0x000030, "Member 'DynamicNodeBPLibrary_GetNormalBy4Point_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetNotifyDeltaTime_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_GetNotifyDeltaTime_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName2;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCurrentAnimAsset;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        FromSpecificAnimAsset;                             // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetNotifyDeltaTime_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_GetNotifyDeltaTime_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetNotifyDeltaTime_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL, NotifyName) == 0x000008, "Member 'DynamicNodeBPLibrary_GetNotifyDeltaTime_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL, NotifyName2) == 0x000010, "Member 'DynamicNodeBPLibrary_GetNotifyDeltaTime_BL::NotifyName2' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL, UseCurrentAnimAsset) == 0x000018, "Member 'DynamicNodeBPLibrary_GetNotifyDeltaTime_BL::UseCurrentAnimAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL, FromSpecificAnimAsset) == 0x000020, "Member 'DynamicNodeBPLibrary_GetNotifyDeltaTime_BL::FromSpecificAnimAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyDeltaTime_BL, ReturnValue) == 0x000028, "Member 'DynamicNodeBPLibrary_GetNotifyDeltaTime_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetNotifyTime_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_GetNotifyTime_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCurrentAnimAsset;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        FromSpecificAnimAsset;                             // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetNotifyTime_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetNotifyTime_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetNotifyTime_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_GetNotifyTime_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyTime_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetNotifyTime_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyTime_BL, NotifyName) == 0x000008, "Member 'DynamicNodeBPLibrary_GetNotifyTime_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyTime_BL, UseCurrentAnimAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_GetNotifyTime_BL::UseCurrentAnimAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyTime_BL, FromSpecificAnimAsset) == 0x000018, "Member 'DynamicNodeBPLibrary_GetNotifyTime_BL::FromSpecificAnimAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetNotifyTime_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_GetNotifyTime_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetPrelandedHitInfo_BL
// 0x0098 (0x0098 - 0x0000)
struct DynamicNodeBPLibrary_GetPrelandedHitInfo_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetPrelandedHitInfo_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetPrelandedHitInfo_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetPrelandedHitInfo_BL) == 0x000098, "Wrong size on DynamicNodeBPLibrary_GetPrelandedHitInfo_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetPrelandedHitInfo_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetPrelandedHitInfo_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetPrelandedHitInfo_BL, HitResult) == 0x000008, "Member 'DynamicNodeBPLibrary_GetPrelandedHitInfo_BL::HitResult' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetPrelandedWaterHitInfo_BL
// 0x0098 (0x0098 - 0x0000)
struct DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsHitFound;                                        // 0x0094(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL) == 0x000098, "Wrong size on DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL, HitResult) == 0x000008, "Member 'DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL::HitResult' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL, IsHitFound) == 0x000094, "Member 'DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL::IsHitFound' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetSortedDistanceArray_DN
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetSortedDistanceArray_DN final
{
public:
	bool                                          UseReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetSortedDistanceArray_DN) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetSortedDistanceArray_DN");
static_assert(sizeof(DynamicNodeBPLibrary_GetSortedDistanceArray_DN) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetSortedDistanceArray_DN");
static_assert(offsetof(DynamicNodeBPLibrary_GetSortedDistanceArray_DN, UseReverse) == 0x000000, "Member 'DynamicNodeBPLibrary_GetSortedDistanceArray_DN::UseReverse' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetSortedDistanceArray_DN, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_GetSortedDistanceArray_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetSortedDistanceIndexArray_DN
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN final
{
public:
	bool                                          UseReverse;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN");
static_assert(sizeof(DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN) == 0x000018, "Wrong size on DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN");
static_assert(offsetof(DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN, UseReverse) == 0x000000, "Member 'DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN::UseReverse' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetStartSwimmStatus_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetStartSwimmStatus_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetStartSwimmStatus_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetStartSwimmStatus_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetStartSwimmStatus_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetStartSwimmStatus_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetStartSwimmStatus_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetStartSwimmStatus_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetStartSwimmStatus_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_GetStartSwimmStatus_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetSwimmMachineMoveStatus_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESwimmingStatus_DN                            SwimmingStatus;                                    // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL, SwimmingStatus) == 0x000008, "Member 'DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL::SwimmingStatus' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.GetVerticalPoseMeshRotation_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RootBoneName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL, RootBoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL::RootBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL, Axis) == 0x000010, "Member 'DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL::Axis' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKAlignToActor_BL
// 0x00A0 (0x00A0 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PreAlignHandAnimation;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandAnimPlayFromNotify;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimTransitionTime;                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0050(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HandSocketName;                                    // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddHandRotation;                                   // 0x0068(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClampHandDeltaAngle;                               // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterToFixClampPosition;                         // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x007C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL) == 0x0000A0, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, PreAlignHandAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::PreAlignHandAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, HandAnimPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::HandAnimPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, HandAnimTransitionTime) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::HandAnimTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, TargetActor) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, ActorOffset) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, OffsetRelative) == 0x00005C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, HandSocketName) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::HandSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, AddHandRotation) == 0x000068, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::AddHandRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, ClampHandDeltaAngle) == 0x000074, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::ClampHandDeltaAngle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, MaxIterToFixClampPosition) == 0x000078, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::MaxIterToFixClampPosition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, AddUpperarmRotation) == 0x00007C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, TimeToMove) == 0x000088, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, ClampDirectionAngleLeft) == 0x00008C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, ClampDirectionAngleRight) == 0x000090, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, CalmpDistanceHandLength_Min) == 0x000094, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, CalmpDistanceHandLength_Max) == 0x000098, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL, FinalPositionTolerance) == 0x00009C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKAlignToMesh_BL
// 0x00A0 (0x00A0 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PreAlignHandAnimation;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandAnimPlayFromNotify;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimTransitionTime;                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         TargetMComponent;                                  // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshOffset;                                        // 0x0050(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HandSocketName;                                    // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddHandRotation;                                   // 0x0068(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClampHandDeltaAngle;                               // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterToFixClampPosition;                         // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x007C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL) == 0x0000A0, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, PreAlignHandAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::PreAlignHandAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, HandAnimPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::HandAnimPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, HandAnimTransitionTime) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::HandAnimTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, TargetMComponent) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::TargetMComponent' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, MeshOffset) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::MeshOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, OffsetRelative) == 0x00005C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, HandSocketName) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::HandSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, AddHandRotation) == 0x000068, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::AddHandRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, ClampHandDeltaAngle) == 0x000074, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::ClampHandDeltaAngle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, MaxIterToFixClampPosition) == 0x000078, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::MaxIterToFixClampPosition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, AddUpperarmRotation) == 0x00007C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, TimeToMove) == 0x000088, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, ClampDirectionAngleLeft) == 0x00008C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, ClampDirectionAngleRight) == 0x000090, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, CalmpDistanceHandLength_Min) == 0x000094, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, CalmpDistanceHandLength_Max) == 0x000098, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL, FinalPositionTolerance) == 0x00009C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKAlignToSocket_BL
// 0x0098 (0x0098 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PreAlignHandAnimation;                             // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandAnimPlayFromNotify;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimTransitionTime;                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         TargetMComponent;                                  // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandSocketName;                                    // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddHandRotation;                                   // 0x0060(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClampHandDeltaAngle;                               // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterToFixClampPosition;                         // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x0074(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x008C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL) == 0x000098, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, PreAlignHandAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::PreAlignHandAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, HandAnimPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::HandAnimPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, HandAnimTransitionTime) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::HandAnimTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, TargetMComponent) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::TargetMComponent' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, TargetSocketName) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::TargetSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, HandSocketName) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::HandSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, AddHandRotation) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::AddHandRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, ClampHandDeltaAngle) == 0x00006C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::ClampHandDeltaAngle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, MaxIterToFixClampPosition) == 0x000070, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::MaxIterToFixClampPosition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, AddUpperarmRotation) == 0x000074, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, TimeToMove) == 0x000080, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, ClampDirectionAngleLeft) == 0x000084, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, ClampDirectionAngleRight) == 0x000088, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, CalmpDistanceHandLength_Min) == 0x00008C, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, CalmpDistanceHandLength_Max) == 0x000090, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL, FinalPositionTolerance) == 0x000094, "Member 'DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKCheckConeAngle_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftMove;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightMove;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampDirectionAngleLeft;                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, HandIndex) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, LeftMove) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::LeftMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, RightMove) == 0x000014, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::RightMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, TargetActor) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, ActorOffset) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, OffsetRelative) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, ClampDirectionAngleLeft) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL, ClampDirectionAngleRight) == 0x000034, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL::ClampDirectionAngleRight' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKCheckDistance_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CalmpDistanceHandLength_Min;                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, HandIndex) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, TargetActor) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, ActorOffset) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, OffsetRelative) == 0x000024, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, CalmpDistanceHandLength_Min) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, CalmpDistanceHandLength_Max) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL, ReturnValue) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKCheckDistanceXY_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HandIndex;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CalmpDistanceHandLength_Min;                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, HandIndex) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, TargetActor) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, ActorOffset) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, OffsetRelative) == 0x000024, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, CalmpDistanceHandLength_Min) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, CalmpDistanceHandLength_Max) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL, ReturnValue) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKFollowActionPropsActor_BL
// 0x0080 (0x0080 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Reverse, bool StartMove, int32 IntermediatePointsReached, bool HandMoveBack, bool EndAction)> EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HandAnimation;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandAnimPlayFromNotify;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimTransitionTime;                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimStartMovingOffset;                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActionPropsActor_DN*                   ActionPropsActor;                                  // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandSocketName;                                    // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x0058(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMoveBack;                                    // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL) == 0x000080, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, HandAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::HandAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, HandAnimPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::HandAnimPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, HandAnimTransitionTime) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::HandAnimTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, HandAnimStartMovingOffset) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::HandAnimStartMovingOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, ActionPropsActor) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::ActionPropsActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, HandSocketName) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::HandSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, AddUpperarmRotation) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, TimeToMove) == 0x000064, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, TimeToMoveBack) == 0x000068, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::TimeToMoveBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, ClampDirectionAngleLeft) == 0x00006C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, ClampDirectionAngleRight) == 0x000070, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, CalmpDistanceHandLength_Min) == 0x000074, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, CalmpDistanceHandLength_Max) == 0x000078, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL, FinalPositionTolerance) == 0x00007C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKFollowActionPropsActor_TwoHands_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Reverse, bool StartMove, int32 IntermediatePointsReached, bool HandMoveBack, bool EndAction)> EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHandTargetSocketPairs_DN>      HandIdxTargetSocketPairs;                          // 0x0030(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActionPropsActor_DN*                   ActionPropsActor;                                  // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMoveBack;                                    // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, HandIdxTargetSocketPairs) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::HandIdxTargetSocketPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, ActionPropsActor) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::ActionPropsActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, TimeToMove) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, TimeToMoveBack) == 0x00004C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::TimeToMoveBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, ClampDirectionAngleLeft) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, ClampDirectionAngleRight) == 0x000054, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, CalmpDistanceHandLength_Min) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, CalmpDistanceHandLength_Max) == 0x00005C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL, FinalPositionTolerance) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKFollowCustomActor_BL
// 0x0090 (0x0090 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          HandAnimation;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandAnimPlayFromNotify;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimTransitionTime;                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         TargetMeshComponent;                               // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandSocketName;                                    // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHandsCCDIKTargetHandFollowData_DN> TargetHandDataArray;                               // 0x0058(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x0068(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL) == 0x000090, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, HandAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::HandAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, HandAnimPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::HandAnimPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, HandAnimTransitionTime) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::HandAnimTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, TargetMeshComponent) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::TargetMeshComponent' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, HandSocketName) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::HandSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, TargetHandDataArray) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::TargetHandDataArray' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, AddUpperarmRotation) == 0x000068, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, TimeToMove) == 0x000074, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, ClampDirectionAngleLeft) == 0x000078, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, ClampDirectionAngleRight) == 0x00007C, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, CalmpDistanceHandLength_Min) == 0x000080, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, CalmpDistanceHandLength_Max) == 0x000084, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL, FinalPositionTolerance) == 0x000088, "Member 'DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKGrabActor_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex, class FName SocketName, class AActor* Actor)> EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          GrabAnimation;                                     // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTimerOffset;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartNotifyName_Optional;                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GrabSocketNameOverride;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               LocationRule;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               RotationRule;                                      // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttachmentTransitionDuration;                      // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetPositionTolerance;                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, HandIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, GrabAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::GrabAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, TransitionTime) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, AnimTimerOffset) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::AnimTimerOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, StartNotifyName_Optional) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::StartNotifyName_Optional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, GrabSocketNameOverride) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::GrabSocketNameOverride' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, LocationRule) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::LocationRule' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, RotationRule) == 0x000041, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::RotationRule' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, AttachmentTransitionDuration) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::AttachmentTransitionDuration' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL, TargetPositionTolerance) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL::TargetPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKPrepareToPressButton_BL
// 0x0060 (0x0060 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AddUpperarmRotation;                               // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetIfMoving;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL) == 0x000060, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, MoveOutOfRangeDelegate) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, HandIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, TargetActor) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, ActorOffset) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, OffsetRelative) == 0x000034, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, AddUpperarmRotation) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, TimeToMove) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, ClampDirectionAngleLeft) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, ClampDirectionAngleRight) == 0x00004C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, CalmpDistanceHandLength_Min) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, CalmpDistanceHandLength_Max) == 0x000054, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL, ResetIfMoving) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL::ResetIfMoving' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKPressButton_BL
// 0x0060 (0x0060 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKPressButton_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex, bool StartPressing)> EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideFingerWhenBack;                                // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePreparePositionWhenBack;                        // 0x0036(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackMoveBoneIndex;                                 // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackMoveDistance;                                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x0040(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToPress;                                       // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToBack;                                        // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKPressButton_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL) == 0x000060, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKPressButton_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, HandIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, TargetActor) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, ActorOffset) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, OffsetRelative) == 0x000034, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, HideFingerWhenBack) == 0x000035, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::HideFingerWhenBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, UsePreparePositionWhenBack) == 0x000036, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::UsePreparePositionWhenBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, BackMoveBoneIndex) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::BackMoveBoneIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, BackMoveDistance) == 0x00003C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::BackMoveDistance' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, AddUpperarmRotation) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, TimeToMove) == 0x00004C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, TimeToPress) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::TimeToPress' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, TimeToBack) == 0x000054, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::TimeToBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButton_BL, FinalPositionTolerance) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButton_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKPressButtonSimple_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex, bool StartPressing)> EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AddUpperarmRotation;                               // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToPress;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToBack;                                        // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, HandIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, TargetActor) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, ActorOffset) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, OffsetRelative) == 0x000034, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, AddUpperarmRotation) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, TimeToMove) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, TimeToPress) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::TimeToPress' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, TimeToBack) == 0x00004C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::TimeToBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, ClampDirectionAngleLeft) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, ClampDirectionAngleRight) == 0x000054, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, CalmpDistanceHandLength_Min) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, CalmpDistanceHandLength_Max) == 0x00005C, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL, FinalPositionTolerance) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKReset_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKReset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetHandAnimation;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKReset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKReset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKReset_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKReset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKReset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKReset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKReset_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKReset_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKReset_BL, TimeToMove) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKReset_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKReset_BL, ResetHandAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKReset_BL::ResetHandAnimation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKResetHandMoveWhenCharacterMove_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Reset;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL, Reset) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL::Reset' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKResetPropsActor_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActionPropsActor_DN*                   ActionPropsActor;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL, ActionPropsActor) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL::ActionPropsActor' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetActorTarget_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              EventMoveOutOfRange;                               // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActorIsMovable;                                    // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AddUpperarmRotation;                               // 0x0048(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, EventMoveOutOfRange) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::EventMoveOutOfRange' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, TargetActor) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, ActorOffset) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, OffsetRelative) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, ActorIsMovable) == 0x000045, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::ActorIsMovable' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, AddUpperarmRotation) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, TimeToMove) == 0x000054, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, ClampDirectionAngleLeft) == 0x000058, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, ClampDirectionAngleRight) == 0x00005C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, CalmpDistanceHandLength_Min) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL, CalmpDistanceHandLength_Max) == 0x000064, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL::CalmpDistanceHandLength_Max' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetComponentSpaceTarget_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target_CS;                                         // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, HandIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, Target_CS) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::Target_CS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, AddUpperarmRotation) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, TimeToMove) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, ClampDirectionAngleLeft) == 0x00003C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, ClampDirectionAngleRight) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, CalmpDistanceHandLength_Min) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, CalmpDistanceHandLength_Max) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL, FinalPositionTolerance) == 0x00004C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetNewTrackingParams_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL, ClampDirectionAngleLeft) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL, ClampDirectionAngleRight) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL, CalmpDistanceHandLength_Min) == 0x000014, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL, CalmpDistanceHandLength_Max) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL::CalmpDistanceHandLength_Max' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetWorldSpaceTarget_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target_WS;                                         // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, HandIndex) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, Target_WS) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::Target_WS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, AddUpperarmRotation) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, TimeToMove) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, ClampDirectionAngleLeft) == 0x00003C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, ClampDirectionAngleRight) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, CalmpDistanceHandLength_Min) == 0x000044, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, CalmpDistanceHandLength_Max) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL, FinalPositionTolerance) == 0x00004C, "Member 'DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKStartGrabActor_BL
// 0x00B0 (0x00B0 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 HandIndex)>              EventOnComplited;                                  // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(int32 HandIndex)>              MoveOutOfRangeDelegate;                            // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PreGrabHandAnimation;                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HandAnimPlayFromNotify;                            // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandAnimTransitionTime;                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorOffset;                                       // 0x0050(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GrabSocketName;                                    // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHandsCCDIKAlignHandData_DN            AlignHandToActor;                                  // 0x0068(0x0020)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddUpperarmRotation;                               // 0x0088(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TimeToMove;                                        // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0098(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x009C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Min;                       // 0x00A0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength_Max;                       // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalPositionTolerance;                            // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL) == 0x0000B0, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, EventOnComplited) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::EventOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, MoveOutOfRangeDelegate) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::MoveOutOfRangeDelegate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, HandIndex) == 0x00002C, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, PreGrabHandAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::PreGrabHandAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, HandAnimPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::HandAnimPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, HandAnimTransitionTime) == 0x000040, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::HandAnimTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, TargetActor) == 0x000048, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, ActorOffset) == 0x000050, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::ActorOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, OffsetRelative) == 0x00005C, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, GrabSocketName) == 0x000060, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::GrabSocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, AlignHandToActor) == 0x000068, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::AlignHandToActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, AddUpperarmRotation) == 0x000088, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::AddUpperarmRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, TimeToMove) == 0x000094, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::TimeToMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, ClampDirectionAngleLeft) == 0x000098, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, ClampDirectionAngleRight) == 0x00009C, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, CalmpDistanceHandLength_Min) == 0x0000A0, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::CalmpDistanceHandLength_Min' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, CalmpDistanceHandLength_Max) == 0x0000A4, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::CalmpDistanceHandLength_Max' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL, FinalPositionTolerance) == 0x0000A8, "Member 'DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL::FinalPositionTolerance' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKUseGrabActorRelativeSocket_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRelativeActorSocket;                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyRelativeTransformBeforeHandSocket;            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL, UseRelativeActorSocket) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL::UseRelativeActorSocket' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL, TargetActor) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL::TargetActor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL, SocketName) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL::SocketName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL, ApplyRelativeTransformBeforeHandSocket) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL::ApplyRelativeTransformBeforeHandSocket' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKCalibrate_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKCalibrate_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DeltaRotation;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 OutRotatorStr;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKCalibrate_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKCalibrate_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKCalibrate_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_HandsIKCalibrate_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKCalibrate_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKCalibrate_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKCalibrate_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKCalibrate_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKCalibrate_BL, DeltaRotation) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKCalibrate_BL::DeltaRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKCalibrate_BL, OutRotatorStr) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKCalibrate_BL::OutRotatorStr' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKGetTransitionTime_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeTranslation;                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRotation;                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL, TransitionTimeTranslation) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL::TransitionTimeTranslation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL, TransitionTimeRotation) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL::TransitionTimeRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKMoveToActor_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKMoveToActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SolveUpperarm;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampDirectionAngleLeft;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetOffset;                                       // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKMoveToActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_HandsIKMoveToActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, Actor) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, SolveUpperarm) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::SolveUpperarm' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, ClampDirectionAngleLeft) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, ClampDirectionAngleRight) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKMoveToActor_BL, ResetOffset) == 0x000024, "Member 'DynamicNodeBPLibrary_HandsIKMoveToActor_BL::ResetOffset' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKOverrideSpecificData_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHandsIKSpecificDataOverride_DN> HandsIKSpecificDataArray;                          // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL, HandsIKSpecificDataArray) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL::HandsIKSpecificDataArray' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKResetAll_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKResetAll_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKResetAll_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKResetAll_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKResetAll_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_HandsIKResetAll_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKResetAll_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKResetAll_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKResetAll_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKResetAll_BL::HandIndex' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetInitDeltaHandRotation_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitRotation;                                      // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL, InitRotation) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL::InitRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetOffsetRotation_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotator_CS;                                  // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL, OffsetRotator_CS) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL::OffsetRotator_CS' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetOffsetTranslation_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Offset_CS;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SolveUpperarm;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL, Offset_CS) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL::Offset_CS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL, SolveUpperarm) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL::SolveUpperarm' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetTransitionTime_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeTranslation;                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRotation;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL, TransitionTimeTranslation) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL::TransitionTimeTranslation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL, TransitionTimeRotation) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL::TransitionTimeRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetTransitionTimeNext_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurTransitionTimeTranslation;                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurTransitionTimeRotation;                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextTransitionTimeTranslation;                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextTransitionTimeRotation;                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL, CurTransitionTimeTranslation) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL::CurTransitionTimeTranslation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL, CurTransitionTimeRotation) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL::CurTransitionTimeRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL, NextTransitionTimeTranslation) == 0x000014, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL::NextTransitionTimeTranslation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL, NextTransitionTimeRotation) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL::NextTransitionTimeRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetWorldSpaceRotation_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               TargetRotator_WS;                                  // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL, TargetRotator_WS) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL::TargetRotator_WS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL, Enabled) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL::Enabled' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetWorldSpaceTranslation_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Target_WS;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SolveUpperarm;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampDirectionAngleLeft;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalmpDistanceHandLength;                           // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, Target_WS) == 0x00000C, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::Target_WS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, SolveUpperarm) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::SolveUpperarm' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, ClampDirectionAngleLeft) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, ClampDirectionAngleRight) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, CalmpDistanceHandLength) == 0x000024, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::CalmpDistanceHandLength' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL, Enabled) == 0x000028, "Member 'DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL::Enabled' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKStopTracking_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKStopTracking_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKStopTracking_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKStopTracking_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKStopTracking_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_HandsIKStopTracking_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKStopTracking_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKStopTracking_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKStopTracking_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKStopTracking_BL::HandIndex' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HandsIKTurnToActor_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_HandsIKTurnToActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleLeft;                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClampDirectionAngleRight;                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetOffset;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HandsIKTurnToActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_HandsIKTurnToActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HandsIKTurnToActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_HandsIKTurnToActor_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL, Actor) == 0x000010, "Member 'DynamicNodeBPLibrary_HandsIKTurnToActor_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL, ClampDirectionAngleLeft) == 0x000018, "Member 'DynamicNodeBPLibrary_HandsIKTurnToActor_BL::ClampDirectionAngleLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL, ClampDirectionAngleRight) == 0x00001C, "Member 'DynamicNodeBPLibrary_HandsIKTurnToActor_BL::ClampDirectionAngleRight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HandsIKTurnToActor_BL, ResetOffset) == 0x000020, "Member 'DynamicNodeBPLibrary_HandsIKTurnToActor_BL::ResetOffset' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.HasDefferedTransitionAnimation_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IfWaterDepthMoreThan_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestWaterDepth;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL, TestWaterDepth) == 0x000008, "Member 'DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL::TestWaterDepth' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL, Branches) == 0x00000C, "Member 'DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ImpactHandle_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_ImpactHandle_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ImpactAnimation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTill_Notify;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseAmplitude;                                  // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideImpactDirection;                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OverrideImpactDirectionVector;                     // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ImpactHandle_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ImpactHandle_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ImpactHandle_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_ImpactHandle_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, ImpactAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::ImpactAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, PlayTill_Notify) == 0x000010, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::PlayTill_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, ImpulseAmplitude) == 0x00001C, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::ImpulseAmplitude' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, bOverrideImpactDirection) == 0x000020, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::bOverrideImpactDirection' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, OverrideImpactDirectionVector) == 0x000024, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::OverrideImpactDirectionVector' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ImpactHandle_BL, ReturnValue) == 0x000030, "Member 'DynamicNodeBPLibrary_ImpactHandle_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.InsertDistanceIndexMap_DN
// 0x000C (0x000C - 0x0000)
struct DynamicNodeBPLibrary_InsertDistanceIndexMap_DN final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearMapBeforeInsert;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_InsertDistanceIndexMap_DN) == 0x000004, "Wrong alignment on DynamicNodeBPLibrary_InsertDistanceIndexMap_DN");
static_assert(sizeof(DynamicNodeBPLibrary_InsertDistanceIndexMap_DN) == 0x00000C, "Wrong size on DynamicNodeBPLibrary_InsertDistanceIndexMap_DN");
static_assert(offsetof(DynamicNodeBPLibrary_InsertDistanceIndexMap_DN, Distance) == 0x000000, "Member 'DynamicNodeBPLibrary_InsertDistanceIndexMap_DN::Distance' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_InsertDistanceIndexMap_DN, Param_Index) == 0x000004, "Member 'DynamicNodeBPLibrary_InsertDistanceIndexMap_DN::Param_Index' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_InsertDistanceIndexMap_DN, ClearMapBeforeInsert) == 0x000008, "Member 'DynamicNodeBPLibrary_InsertDistanceIndexMap_DN::ClearMapBeforeInsert' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsAimOffsetEnabled_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_IsAimOffsetEnabled_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsAimOffsetEnabled_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsAimOffsetEnabled_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsAimOffsetEnabled_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_IsAimOffsetEnabled_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsAimOffsetEnabled_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsAimOffsetEnabled_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAimOffsetEnabled_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_IsAimOffsetEnabled_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAimOffsetEnabled_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_IsAimOffsetEnabled_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsAnimationSelectedInAnimationStack_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsAnimationStackActive_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsAnimationStackActive_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsAnimationStackActive_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsAnimationStackActive_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsAnimationStackActive_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsAnimationStackActive_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsAnimationStackActive_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsAnimationStackActive_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAnimationStackActive_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_IsAnimationStackActive_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsAssetPlaying_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_IsAssetPlaying_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsAssetPlaying_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsAssetPlaying_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsAssetPlaying_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_IsAssetPlaying_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsAssetPlaying_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsAssetPlaying_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAssetPlaying_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsAssetPlaying_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAssetPlaying_BL, BoneName) == 0x00000C, "Member 'DynamicNodeBPLibrary_IsAssetPlaying_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAssetPlaying_BL, AnimationAsset) == 0x000018, "Member 'DynamicNodeBPLibrary_IsAssetPlaying_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsAssetPlaying_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_IsAssetPlaying_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsBoxesIntersect_DN
// 0x003C (0x003C - 0x0000)
struct DynamicNodeBPLibrary_IsBoxesIntersect_DN final
{
public:
	struct FBox                                   Box1;                                              // 0x0000(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FBox                                   Box2;                                              // 0x001C(0x001C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsBoxesIntersect_DN) == 0x000004, "Wrong alignment on DynamicNodeBPLibrary_IsBoxesIntersect_DN");
static_assert(sizeof(DynamicNodeBPLibrary_IsBoxesIntersect_DN) == 0x00003C, "Wrong size on DynamicNodeBPLibrary_IsBoxesIntersect_DN");
static_assert(offsetof(DynamicNodeBPLibrary_IsBoxesIntersect_DN, Box1) == 0x000000, "Member 'DynamicNodeBPLibrary_IsBoxesIntersect_DN::Box1' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsBoxesIntersect_DN, Box2) == 0x00001C, "Member 'DynamicNodeBPLibrary_IsBoxesIntersect_DN::Box2' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsBoxesIntersect_DN, ReturnValue) == 0x000038, "Member 'DynamicNodeBPLibrary_IsBoxesIntersect_DN::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsCharacterInWaterVolume_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DepthOut;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthLimit;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL, DepthOut) == 0x00000C, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL::DepthOut' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL, DepthLimit) == 0x000010, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL::DepthLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL, ReturnValue) == 0x000014, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsCharacterInWaterVolumePure_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOut;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthLimit;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL, DepthOut) == 0x000008, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL::DepthOut' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL, DepthLimit) == 0x00000C, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL::DepthLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL, ReturnValue) == 0x000010, "Member 'DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsDelegateOnAnimFinBlendBound_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL, BoneName) == 0x00000C, "Member 'DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL, ReturnValue) == 0x000014, "Member 'DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsDiving_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsDiving_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsDiving_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsDiving_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsDiving_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsDiving_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsDiving_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsDiving_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsDiving_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsDiving_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsEquipUnequip_Active_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsEquipUnequip_Active_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsEquipUnequip_Active_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsEquipUnequip_Active_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsEquipUnequip_Active_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsEquipUnequip_Active_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsEquipUnequip_Active_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsEquipUnequip_Active_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsEquipUnequip_Active_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsEquipUnequip_Active_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsEquipUnequip_Active_BL, ReturnValue) == 0x000009, "Member 'DynamicNodeBPLibrary_IsEquipUnequip_Active_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsFacingUp_3Bone_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_IsFacingUp_3Bone_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PelvisBoneName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Spine_1BoneName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Spine_2BoneName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsFacingUp_3Bone_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_IsFacingUp_3Bone_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsFacingUp_3Bone_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL, PelvisBoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_IsFacingUp_3Bone_BL::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL, Spine_1BoneName) == 0x000010, "Member 'DynamicNodeBPLibrary_IsFacingUp_3Bone_BL::Spine_1BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL, Spine_2BoneName) == 0x000018, "Member 'DynamicNodeBPLibrary_IsFacingUp_3Bone_BL::Spine_2BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL, Axis) == 0x000020, "Member 'DynamicNodeBPLibrary_IsFacingUp_3Bone_BL::Axis' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_3Bone_BL, ReturnValue) == 0x00002C, "Member 'DynamicNodeBPLibrary_IsFacingUp_3Bone_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsFacingUp_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_IsFacingUp_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PelvisBoneName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Axis;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsFacingUp_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsFacingUp_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsFacingUp_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_IsFacingUp_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsFacingUp_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_BL, PelvisBoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_IsFacingUp_BL::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_BL, Axis) == 0x000010, "Member 'DynamicNodeBPLibrary_IsFacingUp_BL::Axis' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsFacingUp_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_IsFacingUp_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsImpactAnimationPlay_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsImpactAnimationPlay_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsImpactAnimationPlay_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsImpactAnimationPlay_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsImpactAnimationPlay_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsImpactAnimationPlay_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsImpactAnimationPlay_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsImpactAnimationPlay_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsImpactAnimationPlay_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_IsImpactAnimationPlay_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsJumpInWater_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsJumpInWater_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsJumpInWater_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsJumpInWater_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsJumpInWater_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsJumpInWater_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsJumpInWater_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsJumpInWater_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsJumpInWater_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsJumpInWater_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsLookAtActor_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_IsLookAtActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesEOutEnum_DN                          Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckPendingDisabled;                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsLookAtActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsLookAtActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsLookAtActor_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_IsLookAtActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsLookAtActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtActor_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsLookAtActor_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtActor_BL, Actor) == 0x000010, "Member 'DynamicNodeBPLibrary_IsLookAtActor_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtActor_BL, CheckPendingDisabled) == 0x000018, "Member 'DynamicNodeBPLibrary_IsLookAtActor_BL::CheckPendingDisabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtActor_BL, ReturnValue) == 0x000019, "Member 'DynamicNodeBPLibrary_IsLookAtActor_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsLookAtEnable_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsLookAtEnable_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesEOutEnum_DN                          Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckPendingDisabled;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsLookAtEnable_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsLookAtEnable_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsLookAtEnable_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsLookAtEnable_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtEnable_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsLookAtEnable_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtEnable_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsLookAtEnable_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtEnable_BL, CheckPendingDisabled) == 0x000009, "Member 'DynamicNodeBPLibrary_IsLookAtEnable_BL::CheckPendingDisabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsLookAtEnable_BL, ReturnValue) == 0x00000A, "Member 'DynamicNodeBPLibrary_IsLookAtEnable_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsPrelanded_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsPrelanded_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsPrelanded_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsPrelanded_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsPrelanded_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsPrelanded_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsPrelanded_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsPrelanded_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsPrelanded_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsPrelanded_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsShallowWaterMoving_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsShallowWaterMoving_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsShallowWaterMoving_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsShallowWaterMoving_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsShallowWaterMoving_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsShallowWaterMoving_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsShallowWaterMoving_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsShallowWaterMoving_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsShallowWaterMoving_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsShallowWaterMoving_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsShallowWaterMoving_BL, ReturnValue) == 0x000009, "Member 'DynamicNodeBPLibrary_IsShallowWaterMoving_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsShallowWaterMovingEnd_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsSurfacing_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_IsSurfacing_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsSurfacing_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsSurfacing_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsSurfacing_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_IsSurfacing_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsSurfacing_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsSurfacing_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsSurfacing_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_IsSurfacing_BL::Branches' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsVerticalPose_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_IsVerticalPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LowerSpineBoneName;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpperSpineBoneName;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalFactorOut;                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalFactor;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsVerticalPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsVerticalPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsVerticalPose_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_IsVerticalPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsVerticalPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPose_BL, LowerSpineBoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_IsVerticalPose_BL::LowerSpineBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPose_BL, UpperSpineBoneName) == 0x000010, "Member 'DynamicNodeBPLibrary_IsVerticalPose_BL::UpperSpineBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPose_BL, VerticalFactorOut) == 0x000018, "Member 'DynamicNodeBPLibrary_IsVerticalPose_BL::VerticalFactorOut' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPose_BL, VerticalFactor) == 0x00001C, "Member 'DynamicNodeBPLibrary_IsVerticalPose_BL::VerticalFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPose_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_IsVerticalPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.IsVerticalPoseRayTrace_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LowerSpineBoneName;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UpperSpineBoneName;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceHeight;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalFactorOut;                                 // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalFactor;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDebug;                                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL");
static_assert(sizeof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, LowerSpineBoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::LowerSpineBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, UpperSpineBoneName) == 0x000010, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::UpperSpineBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, TraceHeight) == 0x000018, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::TraceHeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, VerticalFactorOut) == 0x00001C, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::VerticalFactorOut' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, VerticalFactor) == 0x000020, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::VerticalFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, ShowDebug) == 0x000024, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::ShowDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL, ReturnValue) == 0x000025, "Member 'DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachine_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartJumpAnimation;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        FallingAnimation;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        LandedAnimation;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartJumpPlayTillNotify;                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandedPlayFromNotify;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandedPlayTillNotify;                              // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_SJ;                                 // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_FLoop;                              // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_L;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSpeedWhenDisableLanded;                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x004C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachine_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_JumpMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, StartJumpAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::StartJumpAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, FallingAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::FallingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, LandedAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::LandedAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, StartJumpPlayTillNotify) == 0x000020, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::StartJumpPlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, LandedPlayFromNotify) == 0x000028, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::LandedPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, LandedPlayTillNotify) == 0x000030, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::LandedPlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, TransitionTime_SJ) == 0x000038, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::TransitionTime_SJ' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, TransitionTime_FLoop) == 0x00003C, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::TransitionTime_FLoop' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, TransitionTime_L) == 0x000040, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::TransitionTime_L' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, PlayRate) == 0x000044, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, MovementSpeedWhenDisableLanded) == 0x000048, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::MovementSpeedWhenDisableLanded' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BL, ReturnValue) == 0x00004C, "Member 'DynamicNodeBPLibrary_JumpMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachine_BlockMovementUntilLandedFin_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        LandedAnimation;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlockMovementAndRotation;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL, LandedAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL::LandedAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL, BlockMovementAndRotation) == 0x000010, "Member 'DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL::BlockMovementAndRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BlockMovementAndRotation;                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL, BlockMovementAndRotation) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL::BlockMovementAndRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineExt_BL
// 0x0078 (0x0078 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachineExt_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartJumpAnimation;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        FallingAnimation;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        LongFallingAnimation;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        PreLandedAnimationOptional;                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        LandedAnimation;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartJumpPlayTillNotify;                           // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandedPlayFromNotify;                              // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandedPlayTillNotify;                              // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_SJ;                                 // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_FLoop;                              // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_LFLoop;                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_PL_Optional;                        // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_L;                                  // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSpeedWhenDisableLanded;                    // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongFallingThresholdVelocity;                      // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LongFallingThresholdUseOnlyZVel;                   // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreLandedHeightOptional;                           // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreLandedVelocityTresholdOptional;                 // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0074(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachineExt_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachineExt_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachineExt_BL) == 0x000078, "Wrong size on DynamicNodeBPLibrary_JumpMachineExt_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, StartJumpAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::StartJumpAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, FallingAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::FallingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, LongFallingAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::LongFallingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, PreLandedAnimationOptional) == 0x000020, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::PreLandedAnimationOptional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, LandedAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::LandedAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, StartJumpPlayTillNotify) == 0x000030, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::StartJumpPlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, LandedPlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::LandedPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, LandedPlayTillNotify) == 0x000040, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::LandedPlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, TransitionTime_SJ) == 0x000048, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::TransitionTime_SJ' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, TransitionTime_FLoop) == 0x00004C, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::TransitionTime_FLoop' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, TransitionTime_LFLoop) == 0x000050, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::TransitionTime_LFLoop' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, TransitionTime_PL_Optional) == 0x000054, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::TransitionTime_PL_Optional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, TransitionTime_L) == 0x000058, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::TransitionTime_L' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, PlayRate) == 0x00005C, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, MovementSpeedWhenDisableLanded) == 0x000060, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::MovementSpeedWhenDisableLanded' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, LongFallingThresholdVelocity) == 0x000064, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::LongFallingThresholdVelocity' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, LongFallingThresholdUseOnlyZVel) == 0x000068, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::LongFallingThresholdUseOnlyZVel' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, PreLandedHeightOptional) == 0x00006C, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::PreLandedHeightOptional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, PreLandedVelocityTresholdOptional) == 0x000070, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::PreLandedVelocityTresholdOptional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_BL, ReturnValue) == 0x000074, "Member 'DynamicNodeBPLibrary_JumpMachineExt_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineExt_MoveTracePoint_OneFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityVectorDistance;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZDecreaseFactor;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL, VelocityVectorDistance) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL::VelocityVectorDistance' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL, ZDecreaseFactor) == 0x00000C, "Member 'DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL::ZDecreaseFactor' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineExt_SetTraceOffset_OneFrame_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceOffsetWS;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL, TraceOffsetWS) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL::TraceOffsetWS' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineSimple_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_JumpMachineSimple_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        JumpAnimation;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartJumpPlayFromNotify;                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartJumpPlayTillNotify;                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandedPlayFromNotify;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LandedPlayTillNotify;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_SJ;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_FLoop;                              // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_L;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSpeedWhenDisableLanded;                    // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0044(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_JumpMachineSimple_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_JumpMachineSimple_BL");
static_assert(sizeof(DynamicNodeBPLibrary_JumpMachineSimple_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_JumpMachineSimple_BL");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, JumpAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::JumpAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, StartJumpPlayFromNotify) == 0x000010, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::StartJumpPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, StartJumpPlayTillNotify) == 0x000018, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::StartJumpPlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, LandedPlayFromNotify) == 0x000020, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::LandedPlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, LandedPlayTillNotify) == 0x000028, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::LandedPlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, TransitionTime_SJ) == 0x000030, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::TransitionTime_SJ' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, TransitionTime_FLoop) == 0x000034, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::TransitionTime_FLoop' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, TransitionTime_L) == 0x000038, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::TransitionTime_L' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, PlayRate) == 0x00003C, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, MovementSpeedWhenDisableLanded) == 0x000040, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::MovementSpeedWhenDisableLanded' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_JumpMachineSimple_BL, ReturnValue) == 0x000044, "Member 'DynamicNodeBPLibrary_JumpMachineSimple_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LayMachine_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_LayMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        LieDownAnimation;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        GetUpAnimation;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReverseStartAsEndAnimation;                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime_ToLD;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_LIdle;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_GU;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_LayMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LayMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LayMachine_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_LayMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LayMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, LieDownAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_LayMachine_BL::LieDownAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, IdleAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_LayMachine_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, GetUpAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_LayMachine_BL::GetUpAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, UseReverseStartAsEndAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_LayMachine_BL::UseReverseStartAsEndAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, TransitionTime_ToLD) == 0x000024, "Member 'DynamicNodeBPLibrary_LayMachine_BL::TransitionTime_ToLD' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, TransitionTime_LIdle) == 0x000028, "Member 'DynamicNodeBPLibrary_LayMachine_BL::TransitionTime_LIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, TransitionTime_GU) == 0x00002C, "Member 'DynamicNodeBPLibrary_LayMachine_BL::TransitionTime_GU' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, PlayRate) == 0x000030, "Member 'DynamicNodeBPLibrary_LayMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, TransitionTimeQuickReturn) == 0x000034, "Member 'DynamicNodeBPLibrary_LayMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LayMachine_BL, ReturnValue) == 0x000038, "Member 'DynamicNodeBPLibrary_LayMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LookAtActor_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_LookAtActor_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnchorBone;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToRotate;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionOffset;                                    // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePinch;                                          // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDegrees;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clamp_MaxYawToLookAt_Degrees;                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableLookAtWhenMaxYaw;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateOnce;                                     // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationAlpha;                                     // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_LookAtActor_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LookAtActor_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LookAtActor_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_LookAtActor_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, Actor) == 0x000008, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, AnchorBone) == 0x000010, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::AnchorBone' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, BoneToRotate) == 0x000018, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::BoneToRotate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, PositionOffset) == 0x000020, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::PositionOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, OffsetRelative) == 0x00002C, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, UsePinch) == 0x00002D, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::UsePinch' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, MaxDegrees) == 0x000030, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::MaxDegrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, Clamp_MaxYawToLookAt_Degrees) == 0x000034, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::Clamp_MaxYawToLookAt_Degrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, DisableLookAtWhenMaxYaw) == 0x000038, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::DisableLookAtWhenMaxYaw' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, TransitionTime) == 0x00003C, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, CalculateOnce) == 0x000040, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::CalculateOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActor_BL, RotationAlpha) == 0x000044, "Member 'DynamicNodeBPLibrary_LookAtActor_BL::RotationAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LookAtActorBone_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_LookAtActorBone_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnchorBone;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToRotate;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToLookAt;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionOffset;                                    // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePinch;                                          // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDegrees;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clamp_MaxYawToLookAt_Degrees;                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableLookAtWhenMaxYaw;                           // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime;                                    // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateOnce;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationAlpha;                                     // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_LookAtActorBone_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LookAtActorBone_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LookAtActorBone_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_LookAtActorBone_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, Actor) == 0x000008, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::Actor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, AnchorBone) == 0x000010, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::AnchorBone' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, BoneToRotate) == 0x000018, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::BoneToRotate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, BoneToLookAt) == 0x000020, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::BoneToLookAt' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, PositionOffset) == 0x000028, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::PositionOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, OffsetRelative) == 0x000034, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, UsePinch) == 0x000035, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::UsePinch' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, MaxDegrees) == 0x000038, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::MaxDegrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, Clamp_MaxYawToLookAt_Degrees) == 0x00003C, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::Clamp_MaxYawToLookAt_Degrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, DisableLookAtWhenMaxYaw) == 0x000040, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::DisableLookAtWhenMaxYaw' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, TransitionTime) == 0x000044, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, CalculateOnce) == 0x000048, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::CalculateOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtActorBone_BL, RotationAlpha) == 0x00004C, "Member 'DynamicNodeBPLibrary_LookAtActorBone_BL::RotationAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LookAtBone_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_LookAtBone_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnchorBone;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToRotate;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToLookAt;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionOffset;                                    // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OffsetRelative;                                    // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePinch;                                          // 0x002D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDegrees;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateOnce;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationAlpha;                                     // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_LookAtBone_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LookAtBone_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LookAtBone_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_LookAtBone_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, AnchorBone) == 0x000008, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::AnchorBone' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, BoneToRotate) == 0x000010, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::BoneToRotate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, BoneToLookAt) == 0x000018, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::BoneToLookAt' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, PositionOffset) == 0x000020, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::PositionOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, OffsetRelative) == 0x00002C, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::OffsetRelative' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, UsePinch) == 0x00002D, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::UsePinch' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, MaxDegrees) == 0x000030, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::MaxDegrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, TransitionTime) == 0x000034, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, CalculateOnce) == 0x000038, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::CalculateOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtBone_BL, RotationAlpha) == 0x00003C, "Member 'DynamicNodeBPLibrary_LookAtBone_BL::RotationAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LookAtSetAssetInitialDeltaRotation_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitialDeltaRotation;                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL, InitialDeltaRotation) == 0x000010, "Member 'DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL::InitialDeltaRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LookAtSetInitialDeltaRotation_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitialDeltaRotation;                              // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL, InitialDeltaRotation) == 0x000008, "Member 'DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL::InitialDeltaRotation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.LookAtSetMeshVectors_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_LookAtSetMeshVectors_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardVector;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_LookAtSetMeshVectors_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_LookAtSetMeshVectors_BL");
static_assert(sizeof(DynamicNodeBPLibrary_LookAtSetMeshVectors_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_LookAtSetMeshVectors_BL");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetMeshVectors_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_LookAtSetMeshVectors_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetMeshVectors_BL, ForwardVector) == 0x000008, "Member 'DynamicNodeBPLibrary_LookAtSetMeshVectors_BL::ForwardVector' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_LookAtSetMeshVectors_BL, UpVector) == 0x000014, "Member 'DynamicNodeBPLibrary_LookAtSetMeshVectors_BL::UpVector' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MontageSetup_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_MontageSetup_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimationAsset;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BreakIfMovementStatusChanged;                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreakIfStartMovingSecAfterStart;                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CanRestartMontageSecAfterStart;                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MontageSetup_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MontageSetup_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MontageSetup_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_MontageSetup_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MontageSetup_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MontageSetup_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MontageSetup_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_MontageSetup_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MontageSetup_BL, BreakIfMovementStatusChanged) == 0x000010, "Member 'DynamicNodeBPLibrary_MontageSetup_BL::BreakIfMovementStatusChanged' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MontageSetup_BL, BreakIfStartMovingSecAfterStart) == 0x000014, "Member 'DynamicNodeBPLibrary_MontageSetup_BL::BreakIfStartMovingSecAfterStart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MontageSetup_BL, CanRestartMontageSecAfterStart) == 0x000018, "Member 'DynamicNodeBPLibrary_MontageSetup_BL::CanRestartMontageSecAfterStart' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MoveHandTowardSpineHandsIK_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDistance;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpinePosOffsetCS;                                  // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL, MoveDistance) == 0x00000C, "Member 'DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL::MoveDistance' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL, SpinePosOffsetCS) == 0x000010, "Member 'DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL::SpinePosOffsetCS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL, IntSpeed) == 0x00001C, "Member 'DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL::IntSpeed' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MoveMachine_BL
// 0x0058 (0x0058 - 0x0000)
struct DynamicNodeBPLibrary_MoveMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleAssetIsPose_Notify;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        MoveAnimation;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        RunAnimation;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeIdle;                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeMove;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRun;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunPlayRate;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeed;                                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DropPlayRateWhenSmallVel;                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DropPlayRateCoef;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDropRateValue;                                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactHandleMoveCoef;                              // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomStartPosition;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MoveMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MoveMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MoveMachine_BL) == 0x000058, "Wrong size on DynamicNodeBPLibrary_MoveMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, IdleAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, IdleAssetIsPose_Notify) == 0x000010, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::IdleAssetIsPose_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, MoveAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::MoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, RunAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::RunAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, TransitionTimeIdle) == 0x000028, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::TransitionTimeIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, TransitionTimeMove) == 0x00002C, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::TransitionTimeMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, TransitionTimeRun) == 0x000030, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::TransitionTimeRun' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, PlayRate) == 0x000034, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, RunPlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::RunPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, MaxWalkSpeed) == 0x00003C, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, DropPlayRateWhenSmallVel) == 0x000040, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::DropPlayRateWhenSmallVel' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, DropPlayRateCoef) == 0x000044, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::DropPlayRateCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, MinDropRateValue) == 0x000048, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::MinDropRateValue' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, ImpactHandleMoveCoef) == 0x00004C, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::ImpactHandleMoveCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, RandomStartPosition) == 0x000050, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::RandomStartPosition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachine_BL, ReturnValue) == 0x000051, "Member 'DynamicNodeBPLibrary_MoveMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineExt_BL
// 0x0078 (0x0078 - 0x0000)
struct DynamicNodeBPLibrary_MoveMachineExt_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleAssetIsPose_Notify;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartMoveAnimation;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMovePlayTill_Notify;                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        MoveAnimation;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovePlayFrom_Notify;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndMoveAnimationOptional;                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndMovePlayFrom_Notify;                            // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        RunAnimation;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeSM;                                  // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeM;                                   // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeEM;                                  // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRun;                                 // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunPlayRate;                                       // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeed;                                      // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartStoppingCoef;                                 // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0074(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MoveMachineExt_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MoveMachineExt_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MoveMachineExt_BL) == 0x000078, "Wrong size on DynamicNodeBPLibrary_MoveMachineExt_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, IdleAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, IdleAssetIsPose_Notify) == 0x000010, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::IdleAssetIsPose_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, StartMoveAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::StartMoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, StartMovePlayTill_Notify) == 0x000020, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::StartMovePlayTill_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, MoveAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::MoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, MovePlayFrom_Notify) == 0x000030, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::MovePlayFrom_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, EndMoveAnimationOptional) == 0x000038, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::EndMoveAnimationOptional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, EndMovePlayFrom_Notify) == 0x000040, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::EndMovePlayFrom_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, RunAnimation) == 0x000048, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::RunAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, TransitionTime) == 0x000050, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, TransitionTimeSM) == 0x000054, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::TransitionTimeSM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, TransitionTimeM) == 0x000058, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::TransitionTimeM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, TransitionTimeEM) == 0x00005C, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::TransitionTimeEM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, TransitionTimeRun) == 0x000060, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::TransitionTimeRun' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, PlayRate) == 0x000064, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, RunPlayRate) == 0x000068, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::RunPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, MaxWalkSpeed) == 0x00006C, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, StartStoppingCoef) == 0x000070, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::StartStoppingCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExt_BL, ReturnValue) == 0x000074, "Member 'DynamicNodeBPLibrary_MoveMachineExt_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineExtMulti_2Legs_BL
// 0x0080 (0x0080 - 0x0000)
struct DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleAssetIsPose_Notify;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartMoveAnimation;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMovePlayTill_Notify;                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        MoveAnimation;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovePlayFrom_Notify;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndMoveAnimationOptional_Right;                    // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndMoveAnimationOptional_Left;                     // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndMovePlayFrom_Notify;                            // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        RunAnimation;                                      // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeSM;                                  // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeM;                                   // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeEM;                                  // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRun;                                 // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunPlayRate;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeed;                                      // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartStoppingCoef;                                 // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncAnimations;                                    // 0x007C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x007D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL) == 0x000080, "Wrong size on DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, IdleAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, IdleAssetIsPose_Notify) == 0x000010, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::IdleAssetIsPose_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, StartMoveAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::StartMoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, StartMovePlayTill_Notify) == 0x000020, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::StartMovePlayTill_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, MoveAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::MoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, MovePlayFrom_Notify) == 0x000030, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::MovePlayFrom_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, EndMoveAnimationOptional_Right) == 0x000038, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::EndMoveAnimationOptional_Right' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, EndMoveAnimationOptional_Left) == 0x000040, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::EndMoveAnimationOptional_Left' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, EndMovePlayFrom_Notify) == 0x000048, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::EndMovePlayFrom_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, RunAnimation) == 0x000050, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::RunAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, TransitionTime) == 0x000058, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, TransitionTimeSM) == 0x00005C, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::TransitionTimeSM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, TransitionTimeM) == 0x000060, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::TransitionTimeM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, TransitionTimeEM) == 0x000064, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::TransitionTimeEM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, TransitionTimeRun) == 0x000068, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::TransitionTimeRun' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, PlayRate) == 0x00006C, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, RunPlayRate) == 0x000070, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::RunPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, MaxWalkSpeed) == 0x000074, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, StartStoppingCoef) == 0x000078, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::StartStoppingCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, SyncAnimations) == 0x00007C, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::SyncAnimations' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL, ReturnValue) == 0x00007D, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineExtMulti_BL
// 0x0078 (0x0078 - 0x0000)
struct DynamicNodeBPLibrary_MoveMachineExtMulti_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleAssetIsPose_Notify;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartMoveAnimation;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartMovePlayTill_Notify;                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        MoveAnimation;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovePlayFrom_Notify;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndMoveAnimationOptional;                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndMovePlayFrom_Notify;                            // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        RunAnimation;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeSM;                                  // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeM;                                   // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeEM;                                  // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRun;                                 // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunPlayRate;                                       // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeed;                                      // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartStoppingCoef;                                 // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncAnimations;                                    // 0x0074(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0075(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MoveMachineExtMulti_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL) == 0x000078, "Wrong size on DynamicNodeBPLibrary_MoveMachineExtMulti_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, IdleAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, IdleAssetIsPose_Notify) == 0x000010, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::IdleAssetIsPose_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, StartMoveAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::StartMoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, StartMovePlayTill_Notify) == 0x000020, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::StartMovePlayTill_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, MoveAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::MoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, MovePlayFrom_Notify) == 0x000030, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::MovePlayFrom_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, EndMoveAnimationOptional) == 0x000038, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::EndMoveAnimationOptional' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, EndMovePlayFrom_Notify) == 0x000040, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::EndMovePlayFrom_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, RunAnimation) == 0x000048, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::RunAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, TransitionTime) == 0x000050, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, TransitionTimeSM) == 0x000054, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::TransitionTimeSM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, TransitionTimeM) == 0x000058, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::TransitionTimeM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, TransitionTimeEM) == 0x00005C, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::TransitionTimeEM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, TransitionTimeRun) == 0x000060, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::TransitionTimeRun' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, PlayRate) == 0x000064, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, RunPlayRate) == 0x000068, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::RunPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, MaxWalkSpeed) == 0x00006C, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, StartStoppingCoef) == 0x000070, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::StartStoppingCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, SyncAnimations) == 0x000074, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::SyncAnimations' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineExtMulti_BL, ReturnValue) == 0x000075, "Member 'DynamicNodeBPLibrary_MoveMachineExtMulti_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineMulti_BL
// 0x0058 (0x0058 - 0x0000)
struct DynamicNodeBPLibrary_MoveMachineMulti_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IdleAssetIsPose_Notify;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        MoveAnimation;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        RunAnimation;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeIdle;                                // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeMove;                                // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRun;                                 // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RunPlayRate;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxWalkSpeed;                                      // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DropPlayRateWhenSmallVel;                          // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DropPlayRateCoef;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDropRateValue;                                  // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactHandleMoveCoef;                              // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncAnimations;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MoveMachineMulti_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MoveMachineMulti_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MoveMachineMulti_BL) == 0x000058, "Wrong size on DynamicNodeBPLibrary_MoveMachineMulti_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, IdleAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, IdleAssetIsPose_Notify) == 0x000010, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::IdleAssetIsPose_Notify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, MoveAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::MoveAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, RunAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::RunAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, TransitionTimeIdle) == 0x000028, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::TransitionTimeIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, TransitionTimeMove) == 0x00002C, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::TransitionTimeMove' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, TransitionTimeRun) == 0x000030, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::TransitionTimeRun' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, PlayRate) == 0x000034, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, RunPlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::RunPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, MaxWalkSpeed) == 0x00003C, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, DropPlayRateWhenSmallVel) == 0x000040, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::DropPlayRateWhenSmallVel' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, DropPlayRateCoef) == 0x000044, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::DropPlayRateCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, MinDropRateValue) == 0x000048, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::MinDropRateValue' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, ImpactHandleMoveCoef) == 0x00004C, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::ImpactHandleMoveCoef' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, SyncAnimations) == 0x000050, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::SyncAnimations' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MoveMachineMulti_BL, ReturnValue) == 0x000051, "Member 'DynamicNodeBPLibrary_MoveMachineMulti_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MultiDoubleMultiTransitionToAnimFromCurPose_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        ToNewAsset;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayFrom;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayTill;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        FinalAsset;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_final;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping_Final;                                  // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStartPosition_Final;                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate_Final;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSyncGroups_1;                                   // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSyncGroups_2;                                   // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0046(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, ToNewAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::ToNewAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, PlayFrom) == 0x00001C, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::PlayFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, PlayTill) == 0x000020, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::PlayTill' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, FinalAsset) == 0x000028, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::FinalAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, TransitionTime_final) == 0x000030, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::TransitionTime_final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, bIsLooping_Final) == 0x000034, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::bIsLooping_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, InPlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, InStartPosition_Final) == 0x00003C, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::InStartPosition_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, InPlayRate_Final) == 0x000040, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::InPlayRate_Final' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, UseSyncGroups_1) == 0x000044, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::UseSyncGroups_1' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, UseSyncGroups_2) == 0x000045, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::UseSyncGroups_2' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL, ReturnValue) == 0x000046, "Member 'DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MultiTransitionToAnimFromCurPose_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SyncAnimations;                                    // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestart;                                        // 0x0025(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestartCheckTransition;                         // 0x0026(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TryStartFrom;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, AnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, bIsLooping) == 0x00001C, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::bIsLooping' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, InPlayRate) == 0x000020, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, SyncAnimations) == 0x000024, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::SyncAnimations' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, CanRestart) == 0x000025, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::CanRestart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, CanRestartCheckTransition) == 0x000026, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::CanRestartCheckTransition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, TryStartFrom) == 0x000028, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::TryStartFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL, ReturnValue) == 0x00002C, "Member 'DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.MultiTransitionToMontageFromCurPose_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimationAsset;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromSection;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestart;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSyncGroups;                                     // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, AnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, bIsLooping) == 0x00001C, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::bIsLooping' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, InPlayRate) == 0x000020, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, PlayFromSection) == 0x000024, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::PlayFromSection' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, StartingPosition) == 0x00002C, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::StartingPosition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, CanRestart) == 0x000030, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::CanRestart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, UseSyncGroups) == 0x000031, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::UseSyncGroups' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL, ReturnValue) == 0x000032, "Member 'DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PauseAllBlendBoneStacks_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PauseTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL, PauseTime) == 0x000008, "Member 'DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL::PauseTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL, TransitionTime) == 0x00000C, "Member 'DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL::TransitionTime' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PauseLookAt_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_PauseLookAt_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_PauseLookAt_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PauseLookAt_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PauseLookAt_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_PauseLookAt_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PauseLookAt_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PauseLookAt_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PauseLookAt_BL, Stop) == 0x000008, "Member 'DynamicNodeBPLibrary_PauseLookAt_BL::Stop' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PauseLookAtIfUsedTurnToControlRotation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL, Stop) == 0x000008, "Member 'DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL::Stop' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PauseToZeroLookAt_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_PauseToZeroLookAt_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_PauseToZeroLookAt_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PauseToZeroLookAt_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PauseToZeroLookAt_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_PauseToZeroLookAt_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PauseToZeroLookAt_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PauseToZeroLookAt_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PauseToZeroLookAt_BL, Stop) == 0x000008, "Member 'DynamicNodeBPLibrary_PauseToZeroLookAt_BL::Stop' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PauseToZeroLookAtIfUsedTurnToControlRotation_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Stop;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL, Stop) == 0x000008, "Member 'DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL::Stop' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PivotMachine_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_PivotMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        PivotAnimation;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccVelocityDirThreshold;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocityThreshold;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeToPlay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRateWhenPivot;                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AccelerationWhenPivot;                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateDirOnce;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayPivotIfZeroAcc;                                // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0032(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_PivotMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PivotMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PivotMachine_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_PivotMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, PivotAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::PivotAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, TransitionTime) == 0x000010, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, AccVelocityDirThreshold) == 0x000014, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::AccVelocityDirThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, MinVelocityThreshold) == 0x000018, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::MinVelocityThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, MinTimeToPlay) == 0x00001C, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::MinTimeToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, RotationRateWhenPivot) == 0x000020, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::RotationRateWhenPivot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, AccelerationWhenPivot) == 0x00002C, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::AccelerationWhenPivot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, CalculateDirOnce) == 0x000030, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::CalculateDirOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, PlayPivotIfZeroAcc) == 0x000031, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::PlayPivotIfZeroAcc' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachine_BL, ReturnValue) == 0x000032, "Member 'DynamicNodeBPLibrary_PivotMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PivotMachineExt_BL
// 0x0048 (0x0048 - 0x0000)
struct DynamicNodeBPLibrary_PivotMachineExt_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        PivotAnimation;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccVelocityDirThreshold;                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinVelocityThreshold;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeToPlay;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationRateWhenPivot;                             // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AccelerationWhenPivot;                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpTime;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InterpToRotationRateWhenPivot;                     // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InterpToAccelerationWhenPivot;                     // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateDirOnce;                                  // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayPivotIfZeroAcc;                                // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0046(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_PivotMachineExt_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PivotMachineExt_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PivotMachineExt_BL) == 0x000048, "Wrong size on DynamicNodeBPLibrary_PivotMachineExt_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, PivotAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::PivotAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, TransitionTime) == 0x000010, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, AccVelocityDirThreshold) == 0x000014, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::AccVelocityDirThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, MinVelocityThreshold) == 0x000018, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::MinVelocityThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, MinTimeToPlay) == 0x00001C, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::MinTimeToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, RotationRateWhenPivot) == 0x000020, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::RotationRateWhenPivot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, AccelerationWhenPivot) == 0x00002C, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::AccelerationWhenPivot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, InterpTime) == 0x000030, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::InterpTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, InterpToRotationRateWhenPivot) == 0x000034, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::InterpToRotationRateWhenPivot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, InterpToAccelerationWhenPivot) == 0x000040, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::InterpToAccelerationWhenPivot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, CalculateDirOnce) == 0x000044, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::CalculateDirOnce' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, PlayPivotIfZeroAcc) == 0x000045, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::PlayPivotIfZeroAcc' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_PivotMachineExt_BL, ReturnValue) == 0x000046, "Member 'DynamicNodeBPLibrary_PivotMachineExt_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.PreSetup_DAZCharacterLegsIK_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ProneMachine_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_ProneMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartProneAnimation;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartProneFromCrouchingAnimation;                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndProneAnimation;                                 // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndProneToCrouchingAnimation;                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReverseStartAsEndAnimation;                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime_To;                                 // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_Idle;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_From;                               // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ProneMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ProneMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ProneMachine_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_ProneMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, StartProneAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::StartProneAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, StartProneFromCrouchingAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::StartProneFromCrouchingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, IdleAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, EndProneAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::EndProneAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, EndProneToCrouchingAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::EndProneToCrouchingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, UseReverseStartAsEndAnimation) == 0x000030, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::UseReverseStartAsEndAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, TransitionTime_To) == 0x000034, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::TransitionTime_To' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, TransitionTime_Idle) == 0x000038, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::TransitionTime_Idle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, TransitionTime_From) == 0x00003C, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::TransitionTime_From' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, PlayRate) == 0x000040, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, TransitionTimeQuickReturn) == 0x000044, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ProneMachine_BL, ReturnValue) == 0x000048, "Member 'DynamicNodeBPLibrary_ProneMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.RebuildNodes_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_RebuildNodes_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_RebuildNodes_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_RebuildNodes_BL");
static_assert(sizeof(DynamicNodeBPLibrary_RebuildNodes_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_RebuildNodes_BL");
static_assert(offsetof(DynamicNodeBPLibrary_RebuildNodes_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_RebuildNodes_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_RebuildNodes_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_RebuildNodes_BL::BoneName' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ReleaseAnimationStack_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_ReleaseAnimationStack_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalTransitionTime;                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedMinTransitionTime;                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedMaxTransitionTime;                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ReleaseAnimationStack_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ReleaseAnimationStack_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ReleaseAnimationStack_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_ReleaseAnimationStack_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStack_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStack_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStack_BL, AdditionalTransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStack_BL::AdditionalTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStack_BL, CalculatedMinTransitionTime) == 0x00000C, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStack_BL::CalculatedMinTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStack_BL, CalculatedMaxTransitionTime) == 0x000010, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStack_BL::CalculatedMaxTransitionTime' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ReleaseAnimationStackAnimFin_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionEndOffset;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL, TransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL, TransitionEndOffset) == 0x00000C, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL::TransitionEndOffset' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ReleaseAnimationStackAnimFin_LevelToRelease_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionEndOffset;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LevelToRelease;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL, TransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL, TransitionEndOffset) == 0x00000C, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL::TransitionEndOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL, LevelToRelease) == 0x000010, "Member 'DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL::LevelToRelease' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ReleaseLevelPriorityAnimationStack_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LevelToRelease;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalTransitionTime;                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedMinTransitionTime;                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedMaxTransitionTime;                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL, LevelToRelease) == 0x000008, "Member 'DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL::LevelToRelease' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL, AdditionalTransitionTime) == 0x00000C, "Member 'DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL::AdditionalTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL, CalculatedMinTransitionTime) == 0x000010, "Member 'DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL::CalculatedMinTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL, CalculatedMaxTransitionTime) == 0x000014, "Member 'DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL::CalculatedMaxTransitionTime' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ResetPivot_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_ResetPivot_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ResetPivot_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ResetPivot_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ResetPivot_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_ResetPivot_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ResetPivot_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ResetPivot_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ResetPivot_BL, ReturnValue) == 0x000008, "Member 'DynamicNodeBPLibrary_ResetPivot_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ResetStartFromOverrideNextMachine_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SeatMachine_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_SeatMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        SeatDownAnimation;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        GetUpAnimation;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseReverseStartAsEndAnimation;                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime_ToSD;                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_SIdle;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_GU;                                 // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SeatMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SeatMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SeatMachine_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_SeatMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, SeatDownAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::SeatDownAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, IdleAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, GetUpAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::GetUpAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, UseReverseStartAsEndAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::UseReverseStartAsEndAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, TransitionTime_ToSD) == 0x000024, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::TransitionTime_ToSD' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, TransitionTime_SIdle) == 0x000028, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::TransitionTime_SIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, TransitionTime_GU) == 0x00002C, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::TransitionTime_GU' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, PlayRate) == 0x000030, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, TransitionTimeQuickReturn) == 0x000034, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SeatMachine_BL, ReturnValue) == 0x000038, "Member 'DynamicNodeBPLibrary_SeatMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAcclerationCurve_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetAcclerationCurve_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ForAnimAsset;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VelocityAccelerationCurve;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetAcclerationCurve_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAcclerationCurve_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAcclerationCurve_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetAcclerationCurve_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAcclerationCurve_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAcclerationCurve_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAcclerationCurve_BL, ForAnimAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAcclerationCurve_BL::ForAnimAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAcclerationCurve_BL, VelocityAccelerationCurve) == 0x000010, "Member 'DynamicNodeBPLibrary_SetAcclerationCurve_BL::VelocityAccelerationCurve' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAdditiveBlendSpaceData_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BSData;                                            // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntBSSpeed;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL, BSData) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL::BSData' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL, IntBSSpeed) == 0x000014, "Member 'DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL::IntBSSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL, ReturnValue) == 0x000018, "Member 'DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAimOffsetAnimationArray_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        AimOffsetBlendSpace;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimationAsset*>                AnimAssetArray;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ApplyAimAuto;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL, AimOffsetBlendSpace) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL::AimOffsetBlendSpace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL, AnimAssetArray) == 0x000010, "Member 'DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL::AnimAssetArray' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL, ApplyAimAuto) == 0x000020, "Member 'DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL::ApplyAimAuto' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAimOffsetAutoUpdate_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimOffsetAutoUpdateData_DN>   AnimOffsetDataArray;                               // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL, AnimOffsetDataArray) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL::AnimOffsetDataArray' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaAnimalRotatorCSLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha_Right;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha_Left;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL, Alpha_Right) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL::Alpha_Right' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL, Alpha_Left) == 0x000010, "Member 'DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL::Alpha_Left' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaHandsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetAlphaHandsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetAlphaHandsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAlphaHandsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAlphaHandsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetAlphaHandsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIK_BL, Alpha) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIK_BL::Alpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaHandsIKSpecificHand_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TranslationAlpha;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeedForChangeAlpha;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL, TranslationAlpha) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL::TranslationAlpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL, RotationAlpha) == 0x000010, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL::RotationAlpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL, IntSpeedForChangeAlpha) == 0x000014, "Member 'DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL::IntSpeedForChangeAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetAlphaLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetAlphaLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAlphaLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAlphaLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetAlphaLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAlphaLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaLegsIK_BL, Alpha) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAlphaLegsIK_BL::Alpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaLegsIK_BL, IntSpeed) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetAlphaLegsIK_BL::IntSpeed' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaProneIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetAlphaProneIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLegsIK;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegsMoveBotMulti;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetAlphaProneIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAlphaProneIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAlphaProneIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetAlphaProneIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaProneIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAlphaProneIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaProneIK_BL, Alpha) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAlphaProneIK_BL::Alpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaProneIK_BL, IntSpeed) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetAlphaProneIK_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaProneIK_BL, EnableLegsIK) == 0x000010, "Member 'DynamicNodeBPLibrary_SetAlphaProneIK_BL::EnableLegsIK' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAlphaProneIK_BL, LegsMoveBotMulti) == 0x000014, "Member 'DynamicNodeBPLibrary_SetAlphaProneIK_BL::LegsMoveBotMulti' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAltAlgorithmLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AltAlgorithmEnable;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL, AltAlgorithmEnable) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL::AltAlgorithmEnable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAnimationCurve_BL
// 0x0030 (0x0030 - 0x0000)
struct DynamicNodeBPLibrary_SetAnimationCurve_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAccelerationCurve;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AccelerationCurveName;                             // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOverrideVelocityCurve;                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OverrideVelocityCurveName;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseMaxSpeedCurve;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaxSpeedCurveName;                                 // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetAnimationCurve_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAnimationCurve_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAnimationCurve_BL) == 0x000030, "Wrong size on DynamicNodeBPLibrary_SetAnimationCurve_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, UseAccelerationCurve) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::UseAccelerationCurve' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, AccelerationCurveName) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::AccelerationCurveName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, UseOverrideVelocityCurve) == 0x000014, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::UseOverrideVelocityCurve' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, OverrideVelocityCurveName) == 0x000018, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::OverrideVelocityCurveName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, UseMaxSpeedCurve) == 0x000020, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::UseMaxSpeedCurve' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationCurve_BL, MaxSpeedCurveName) == 0x000024, "Member 'DynamicNodeBPLibrary_SetAnimationCurve_BL::MaxSpeedCurveName' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetAnimationStackLimit_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetAnimationStackLimit_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackPriorityLimit;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetAnimationStackLimit_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetAnimationStackLimit_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetAnimationStackLimit_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetAnimationStackLimit_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationStackLimit_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetAnimationStackLimit_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationStackLimit_BL, Enabled) == 0x000008, "Member 'DynamicNodeBPLibrary_SetAnimationStackLimit_BL::Enabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetAnimationStackLimit_BL, StackPriorityLimit) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetAnimationStackLimit_BL::StackPriorityLimit' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetBS2DModeOneFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBlendSpace2DMode_DN                          BlendSpace2DMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL, BlendSpace2DMode) == 0x000008, "Member 'DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL::BlendSpace2DMode' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetBSBlendSpeed_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetBSBlendSpeed_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetBSBlendSpeed_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetBSBlendSpeed_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetBSBlendSpeed_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetBSBlendSpeed_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetBSBlendSpeed_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetBSBlendSpeed_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetBSBlendSpeed_BL, Speed) == 0x000008, "Member 'DynamicNodeBPLibrary_SetBSBlendSpeed_BL::Speed' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetBSMapVelocityInputOneFrame_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 MapVelocityData;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL, MapVelocityData) == 0x000008, "Member 'DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL::MapVelocityData' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetCurrentStateToFalling_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_SetCurrentStateToFalling_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetCurrentStateToFalling_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetCurrentStateToFalling_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetCurrentStateToFalling_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_SetCurrentStateToFalling_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetCurrentStateToFalling_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetCurrentStateToFalling_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetCurrentStateToSwimming_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetCustomBSDirectionInputOneFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomBSDirection;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL, CustomBSDirection) == 0x000008, "Member 'DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL::CustomBSDirection' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetCustomBSVelocityInputOneFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomBSVelocity;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL, CustomBSVelocity) == 0x000008, "Member 'DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL::CustomBSVelocity' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetCustomStatusThisFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomStatus;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL, CustomIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL::CustomIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL, CustomStatus) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL::CustomStatus' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetDownVectorCSLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DownVectorCS;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL, DownVectorCS) == 0x000008, "Member 'DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL::DownVectorCS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL, IntSpeed) == 0x000014, "Member 'DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL::IntSpeed' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKAllPairs_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL, Enable) == 0x000008, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL::Enable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKAutoShrinkMode_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAutoShrinkMode;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShrinkingModeSpeedCoeff;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShrinkingModeStartOffsetSec;                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL, EnableAutoShrinkMode) == 0x000008, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL::EnableAutoShrinkMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL, ShrinkingModeSpeedCoeff) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL::ShrinkingModeSpeedCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL, ShrinkingModeStartOffsetSec) == 0x000010, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL::ShrinkingModeStartOffsetSec' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKIdleProcessing_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL, Enable) == 0x000008, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL::Enable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKPairs_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLegIndexEnabled_DN>            LegIndexEnabled;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BlendSpeed;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL, LegIndexEnabled) == 0x000008, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL::LegIndexEnabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL, BlendSpeed) == 0x000018, "Member 'DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL::BlendSpeed' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetFootPredictionEnabledLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootPredictionMode;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootPredictionCoeff;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL, FootPredictionMode) == 0x000008, "Member 'DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL::FootPredictionMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL, FootPredictionCoeff) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL::FootPredictionCoeff' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetFootRotationAlphaLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftLegAlpha;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightLegAlpha;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL, LeftLegAlpha) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL::LeftLegAlpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL, RightLegAlpha) == 0x000010, "Member 'DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL::RightLegAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetFootRotationEnableProneIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL, Enabled) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL::Enabled' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetFootRotationParamsLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootClampUpCoeff;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAngelClampDegreeBack;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAngelClampDegreeForward;                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL, FootClampUpCoeff) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL::FootClampUpCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL, FootAngelClampDegreeBack) == 0x000010, "Member 'DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL::FootAngelClampDegreeBack' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL, FootAngelClampDegreeForward) == 0x000014, "Member 'DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL::FootAngelClampDegreeForward' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetForceShareTimeNextTransition_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceSkipStartFromAssets;                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL, ForceSkipStartFromAssets) == 0x000010, "Member 'DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL::ForceSkipStartFromAssets' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetGroundDeltaLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundDelta;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL, GroundDelta) == 0x000008, "Member 'DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL::GroundDelta' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL, IntSpeed) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL::IntSpeed' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetGroundDeltaOverrideLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGroundDeltaLegsOverride_DN>    SetGroundOverride;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL, SetGroundOverride) == 0x000008, "Member 'DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL::SetGroundOverride' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetGroundZeroLevelCSLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LegIndex;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegZeroLevelCS_Right;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegZeroLevelCS_Left;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL, Enabled) == 0x000008, "Member 'DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL::Enabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL, LegIndex) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL, LegZeroLevelCS_Right) == 0x000010, "Member 'DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL::LegZeroLevelCS_Right' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL, LegZeroLevelCS_Left) == 0x000014, "Member 'DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL::LegZeroLevelCS_Left' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetHandsIKRootBones_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetHandsIKRootBones_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HandIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IkHandBoneName;                                    // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetHandsIKRootBones_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetHandsIKRootBones_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetHandsIKRootBones_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetHandsIKRootBones_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetHandsIKRootBones_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetHandsIKRootBones_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetHandsIKRootBones_BL, HandIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetHandsIKRootBones_BL::HandIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetHandsIKRootBones_BL, IkHandBoneName) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetHandsIKRootBones_BL::IkHandBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetHandsIKRootBones_BL, Enable) == 0x000014, "Member 'DynamicNodeBPLibrary_SetHandsIKRootBones_BL::Enable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetInstantlyAlphaProneIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLegsIK;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LegsMoveBotMulti;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL, Alpha) == 0x000008, "Member 'DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL::Alpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL, EnableLegsIK) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL::EnableLegsIK' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL, LegsMoveBotMulti) == 0x000010, "Member 'DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL::LegsMoveBotMulti' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLayStatusThisFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLayStatusThisFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LieStatus;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLayStatusThisFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLayStatusThisFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLayStatusThisFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLayStatusThisFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLayStatusThisFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLayStatusThisFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLayStatusThisFrame_BL, LieStatus) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLayStatusThisFrame_BL::LieStatus' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKDontMoveBodyMode_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DontMoveBodyMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyOnlyWnehDownVector;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL, DontMoveBodyMode) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL::DontMoveBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL, ApplyOnlyWnehDownVector) == 0x000009, "Member 'DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL::ApplyOnlyWnehDownVector' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKLineTraceDistance_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceUpValue;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDownValue;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL, TraceUpValue) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL::TraceUpValue' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL, TraceDownValue) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL::TraceDownValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKRootBones_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_SetLegsIKRootBones_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IkFootRightBoneName;                               // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IkFootLeftBoneName;                                // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLegsIKRootBones_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_SetLegsIKRootBones_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLegsIKRootBones_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLegsIKRootBones_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL, IkFootRightBoneName) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetLegsIKRootBones_BL::IkFootRightBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL, IkFootLeftBoneName) == 0x000014, "Member 'DynamicNodeBPLibrary_SetLegsIKRootBones_BL::IkFootLeftBoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKRootBones_BL, Enable) == 0x00001C, "Member 'DynamicNodeBPLibrary_SetLegsIKRootBones_BL::Enable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKShrinkAlpha_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShrinkAlpha;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL, ShrinkAlpha) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL::ShrinkAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKTraceChannel_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceTypeQuery;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL, TraceTypeQuery) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL::TraceTypeQuery' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKUseDynamicZPosition_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseZDynamic;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL, UseZDynamic) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL::UseZDynamic' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetLevelToReleaseForAnimFin_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LevelToRelease;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL, LevelToRelease) == 0x000008, "Member 'DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL::LevelToRelease' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetMaxLiftLegsLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLiftLegs;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL, MaxLiftLegs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL::MaxLiftLegs' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetMaxLiftLegsOverrideLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaxLiftLegsOverride_DN>        MaxLiftLegsOverride;                               // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL, MaxLiftLegsOverride) == 0x000008, "Member 'DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL::MaxLiftLegsOverride' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetMaxSpeedCurve_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetMaxSpeedCurve_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ForAnimAsset;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VelocityCurve;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetMaxSpeedCurve_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetMaxSpeedCurve_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetMaxSpeedCurve_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetMaxSpeedCurve_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurve_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurve_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurve_BL, ForAnimAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurve_BL::ForAnimAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurve_BL, VelocityCurve) == 0x000010, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurve_BL::VelocityCurve' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetMaxSpeedCurveAlpha_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedCurveAlpha;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL, MaxSpeedCurveAlpha) == 0x000008, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL::MaxSpeedCurveAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetMaxSpeedCurveVelocityDirectionThreshold_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityDirectionThreshold;                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetValueIfGoBeyond;                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL, VelocityDirectionThreshold) == 0x000008, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL::VelocityDirectionThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL, ResetValueIfGoBeyond) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL::ResetValueIfGoBeyond' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetNextPoseOfsset_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_SetNextPoseOfsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddRootRotation;                                   // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                AddRootTranslation;                                // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetNextPoseOfsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetNextPoseOfsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetNextPoseOfsset_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_SetNextPoseOfsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextPoseOfsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetNextPoseOfsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextPoseOfsset_BL, AddRootRotation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetNextPoseOfsset_BL::AddRootRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextPoseOfsset_BL, AddRootTranslation) == 0x000014, "Member 'DynamicNodeBPLibrary_SetNextPoseOfsset_BL::AddRootTranslation' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetNextTransitionTime_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetNextTransitionTime_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextTransitionTime;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAddToInsteadOfOverriding;                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetNextTransitionTime_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetNextTransitionTime_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetNextTransitionTime_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetNextTransitionTime_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTime_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetNextTransitionTime_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTime_BL, NextTransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_SetNextTransitionTime_BL::NextTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTime_BL, Timer) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetNextTransitionTime_BL::Timer' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTime_BL, UseAddToInsteadOfOverriding) == 0x000010, "Member 'DynamicNodeBPLibrary_SetNextTransitionTime_BL::UseAddToInsteadOfOverriding' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetNextTransitionTimeOnlyOnce_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextTransitionTime;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAddToInsteadOfOverriding;                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL, NextTransitionTime) == 0x000008, "Member 'DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL::NextTransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL, Timer) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL::Timer' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL, MaxCount) == 0x000010, "Member 'DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL::MaxCount' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL, UseAddToInsteadOfOverriding) == 0x000014, "Member 'DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL::UseAddToInsteadOfOverriding' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetOffsetAnimalRotatorCSLegsIK_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetAnimalRotatorCS_Right;                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetAnimalRotatorCS_Left;                        // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL, OffsetAnimalRotatorCS_Right) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL::OffsetAnimalRotatorCS_Right' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL, OffsetAnimalRotatorCS_Left) == 0x000018, "Member 'DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL::OffsetAnimalRotatorCS_Left' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetPhysicalMaterialCalculationLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalcEnable;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL, CalcEnable) == 0x000008, "Member 'DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL::CalcEnable' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetPlayingForCurrentAsset_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ToSpecificAnimationAsset;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForSpecificAnimationAsset;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopMultiTransition;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, ToSpecificAnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::ToSpecificAnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, OnlyForSpecificAnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::OnlyForSpecificAnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, bPlaying) == 0x000011, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::bPlaying' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, BoneName) == 0x000014, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, StopMultiTransition) == 0x00001C, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::StopMultiTransition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL, ReturnValue) == 0x00001D, "Member 'DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetPlayRateForCurrentAsset_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        ToSpecificAnimationAsset;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForSpecificAnimationAsset;                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL, ToSpecificAnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL::ToSpecificAnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL, OnlyForSpecificAnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL::OnlyForSpecificAnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL, PlayRate) == 0x000014, "Member 'DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL, BoneName) == 0x000018, "Member 'DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL, ReturnValue) == 0x000020, "Member 'DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetPlayRateOverrideNextMachine_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL, Animation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL::Animation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL, PlayRate) == 0x000010, "Member 'DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL::PlayRate' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetPluginInfoTimer_DN
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetPluginInfoTimer_DN final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timer;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAllInfo;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetPluginInfoTimer_DN) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetPluginInfoTimer_DN");
static_assert(sizeof(DynamicNodeBPLibrary_SetPluginInfoTimer_DN) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetPluginInfoTimer_DN");
static_assert(offsetof(DynamicNodeBPLibrary_SetPluginInfoTimer_DN, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetPluginInfoTimer_DN::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPluginInfoTimer_DN, Timer) == 0x000008, "Member 'DynamicNodeBPLibrary_SetPluginInfoTimer_DN::Timer' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetPluginInfoTimer_DN, DisableAllInfo) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetPluginInfoTimer_DN::DisableAllInfo' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetProneIKTraceChannel_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetProneIKTraceChannel_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               TraceTypeQuery;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetProneIKTraceChannel_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetProneIKTraceChannel_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetProneIKTraceChannel_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetProneIKTraceChannel_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetProneIKTraceChannel_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetProneIKTraceChannel_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetProneIKTraceChannel_BL, TraceTypeQuery) == 0x000008, "Member 'DynamicNodeBPLibrary_SetProneIKTraceChannel_BL::TraceTypeQuery' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetRearSocketWeightLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftRearSocketWeight;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightRearSocketWeight;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERearSocketWeightSlopeType_DN                 SlopeType;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL, LeftRearSocketWeight) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL::LeftRearSocketWeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL, RightRearSocketWeight) == 0x000010, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL::RightRearSocketWeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL, SlopeType) == 0x000014, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL::SlopeType' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetRearSocketWeightProneIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftRearSocketWeight;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightRearSocketWeight;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERearSocketWeightSlopeType_DN                 SlopeType;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL, LeftRearSocketWeight) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL::LeftRearSocketWeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL, RightRearSocketWeight) == 0x000010, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL::RightRearSocketWeight' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL, SlopeType) == 0x000014, "Member 'DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL::SlopeType' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetSeatStatusThisFrame_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SeatStatus;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL, SeatStatus) == 0x000008, "Member 'DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL::SeatStatus' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetSeparateMaxLowerRoot_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SeparateMaxLowerRoot;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL, Enabled) == 0x000008, "Member 'DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL::Enabled' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL, SeparateMaxLowerRoot) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL::SeparateMaxLowerRoot' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetStartFromMap_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_SetStartFromMap_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 StartFromArray;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetStartFromMap_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetStartFromMap_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetStartFromMap_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_SetStartFromMap_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromMap_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetStartFromMap_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromMap_BL, Animation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetStartFromMap_BL::Animation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromMap_BL, StartFromArray) == 0x000010, "Member 'DynamicNodeBPLibrary_SetStartFromMap_BL::StartFromArray' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromMap_BL, Enabled) == 0x000020, "Member 'DynamicNodeBPLibrary_SetStartFromMap_BL::Enabled' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetStartFromOverrideNextMachine_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayFrom;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayOnce;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL, Animation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL::Animation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL, PlayFrom) == 0x000010, "Member 'DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL::PlayFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL, PlayOnce) == 0x000014, "Member 'DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL::PlayOnce' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTransitionTimeLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeLegs;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeLegsRotation;                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeRoot;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingTransitionCoeff;                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL, TransitionTimeLegs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL::TransitionTimeLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL, TransitionTimeLegsRotation) == 0x00000C, "Member 'DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL::TransitionTimeLegsRotation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL, TransitionTimeRoot) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL::TransitionTimeRoot' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL, MovingTransitionCoeff) == 0x000014, "Member 'DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL::MovingTransitionCoeff' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimations_BL
// 0x0058 (0x0058 - 0x0000)
struct DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceLeftAnimation;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceRightAnimation;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimitBlend;                                   // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedIn;                                      // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedFrom;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeAnimBlendSpeed;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBlendSpeedFactor;                              // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleRotationThredhold;                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OneFrameRotationThredhold;                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptivePlayRate;                               // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptivePlayRateFactor;                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAdaptivePlayRateLimit;                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdaptivePlayRateLimit;                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptiveAnimationEnd;                           // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveAnimationEndYawThreshold;                  // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAlphaWhenMoving;                                // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL) == 0x000058, "Wrong size on DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, TurnInPlaceLeftAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::TurnInPlaceLeftAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, TurnInPlaceRightAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::TurnInPlaceRightAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, SpeedLimit) == 0x000018, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::SpeedLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, SpeedLimitBlend) == 0x00001C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::SpeedLimitBlend' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, BlendSpeedIn) == 0x000020, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::BlendSpeedIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, BlendSpeedFrom) == 0x000024, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::BlendSpeedFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, ChangeAnimBlendSpeed) == 0x000028, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::ChangeAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, FastBlendSpeedFactor) == 0x00002C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::FastBlendSpeedFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, MinAngleRotationThredhold) == 0x000030, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::MinAngleRotationThredhold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, OneFrameRotationThredhold) == 0x000034, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::OneFrameRotationThredhold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, UseAdaptivePlayRate) == 0x000038, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::UseAdaptivePlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, AdaptivePlayRateFactor) == 0x00003C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::AdaptivePlayRateFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, MinAdaptivePlayRateLimit) == 0x000040, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::MinAdaptivePlayRateLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, MaxAdaptivePlayRateLimit) == 0x000044, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::MaxAdaptivePlayRateLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, UseAdaptiveAnimationEnd) == 0x000048, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::UseAdaptiveAnimationEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, AdaptiveAnimationEndYawThreshold) == 0x00004C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::AdaptiveAnimationEndYawThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL, MaxAlphaWhenMoving) == 0x000050, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL::MaxAlphaWhenMoving' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsForAsset_BL
// 0x0060 (0x0060 - 0x0000)
struct DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceLeftAnimation;                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceRightAnimation;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimitBlend;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedIn;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedFrom;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeAnimBlendSpeed;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBlendSpeedFactor;                              // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleRotationThredhold;                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OneFrameRotationThredhold;                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptivePlayRate;                               // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptivePlayRateFactor;                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAdaptivePlayRateLimit;                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAdaptivePlayRateLimit;                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptiveAnimationEnd;                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveAnimationEndYawThreshold;                  // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAlphaWhenMoving;                                // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL) == 0x000060, "Wrong size on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, TurnInPlaceLeftAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::TurnInPlaceLeftAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, TurnInPlaceRightAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::TurnInPlaceRightAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, SpeedLimit) == 0x000020, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::SpeedLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, SpeedLimitBlend) == 0x000024, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::SpeedLimitBlend' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, BlendSpeedIn) == 0x000028, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::BlendSpeedIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, BlendSpeedFrom) == 0x00002C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::BlendSpeedFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, ChangeAnimBlendSpeed) == 0x000030, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::ChangeAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, FastBlendSpeedFactor) == 0x000034, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::FastBlendSpeedFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, MinAngleRotationThredhold) == 0x000038, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::MinAngleRotationThredhold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, OneFrameRotationThredhold) == 0x00003C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::OneFrameRotationThredhold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, UseAdaptivePlayRate) == 0x000040, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::UseAdaptivePlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, AdaptivePlayRateFactor) == 0x000044, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::AdaptivePlayRateFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, MinAdaptivePlayRateLimit) == 0x000048, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::MinAdaptivePlayRateLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, MaxAdaptivePlayRateLimit) == 0x00004C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::MaxAdaptivePlayRateLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, UseAdaptiveAnimationEnd) == 0x000050, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::UseAdaptiveAnimationEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, AdaptiveAnimationEndYawThreshold) == 0x000054, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::AdaptiveAnimationEndYawThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL, MaxAlphaWhenMoving) == 0x000058, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL::MaxAlphaWhenMoving' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponent2_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceLeftAnimation;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceRightAnimation;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedIn;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedFrom;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeAnimBlendSpeed;                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBlendSpeedFactor;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateFixed;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptiveAnimationEnd;                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveAnimationEndYawThreshold;                  // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, TurnInPlaceLeftAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::TurnInPlaceLeftAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, TurnInPlaceRightAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::TurnInPlaceRightAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, SpeedLimit) == 0x000018, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::SpeedLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, BlendSpeedIn) == 0x00001C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::BlendSpeedIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, BlendSpeedFrom) == 0x000020, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::BlendSpeedFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, ChangeAnimBlendSpeed) == 0x000024, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::ChangeAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, FastBlendSpeedFactor) == 0x000028, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::FastBlendSpeedFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, PlayRateFixed) == 0x00002C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::PlayRateFixed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, UseAdaptiveAnimationEnd) == 0x000030, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::UseAdaptiveAnimationEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL, AdaptiveAnimationEndYawThreshold) == 0x000034, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL::AdaptiveAnimationEndYawThreshold' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponent_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceLeftAnimation;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceRightAnimation;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedIn;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedFrom;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeAnimBlendSpeed;                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBlendSpeedFactor;                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateFixed;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptiveAnimationEnd;                           // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveAnimationEndYawThreshold;                  // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, TurnInPlaceLeftAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::TurnInPlaceLeftAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, TurnInPlaceRightAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::TurnInPlaceRightAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, SpeedLimit) == 0x000018, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::SpeedLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, BlendSpeedIn) == 0x00001C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::BlendSpeedIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, BlendSpeedFrom) == 0x000020, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::BlendSpeedFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, ChangeAnimBlendSpeed) == 0x000024, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::ChangeAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, FastBlendSpeedFactor) == 0x000028, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::FastBlendSpeedFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, PlayRateFixed) == 0x00002C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::PlayRateFixed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, UseAdaptiveAnimationEnd) == 0x000030, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::UseAdaptiveAnimationEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL, AdaptiveAnimationEndYawThreshold) == 0x000034, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL::AdaptiveAnimationEndYawThreshold' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceLeftAnimation;                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceRightAnimation;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedIn;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedFrom;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeAnimBlendSpeed;                              // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBlendSpeedFactor;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateFixed;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptiveAnimationEnd;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveAnimationEndYawThreshold;                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, TurnInPlaceLeftAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::TurnInPlaceLeftAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, TurnInPlaceRightAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::TurnInPlaceRightAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, SpeedLimit) == 0x000020, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::SpeedLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, BlendSpeedIn) == 0x000024, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::BlendSpeedIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, BlendSpeedFrom) == 0x000028, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::BlendSpeedFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, ChangeAnimBlendSpeed) == 0x00002C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::ChangeAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, FastBlendSpeedFactor) == 0x000030, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::FastBlendSpeedFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, PlayRateFixed) == 0x000034, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::PlayRateFixed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, UseAdaptiveAnimationEnd) == 0x000038, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::UseAdaptiveAnimationEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL, AdaptiveAnimationEndYawThreshold) == 0x00003C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL::AdaptiveAnimationEndYawThreshold' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceLeftAnimation;                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        TurnInPlaceRightAnimation;                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLimit;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedIn;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendSpeedFrom;                                    // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeAnimBlendSpeed;                              // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastBlendSpeedFactor;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRateFixed;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAdaptiveAnimationEnd;                           // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdaptiveAnimationEndYawThreshold;                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, AnimationAsset) == 0x000008, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, TurnInPlaceLeftAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::TurnInPlaceLeftAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, TurnInPlaceRightAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::TurnInPlaceRightAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, SpeedLimit) == 0x000020, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::SpeedLimit' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, BlendSpeedIn) == 0x000024, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::BlendSpeedIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, BlendSpeedFrom) == 0x000028, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::BlendSpeedFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, ChangeAnimBlendSpeed) == 0x00002C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::ChangeAnimBlendSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, FastBlendSpeedFactor) == 0x000030, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::FastBlendSpeedFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, PlayRateFixed) == 0x000034, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::PlayRateFixed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, UseAdaptiveAnimationEnd) == 0x000038, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::UseAdaptiveAnimationEnd' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL, AdaptiveAnimationEndYawThreshold) == 0x00003C, "Member 'DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL::AdaptiveAnimationEndYawThreshold' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetUpdateFrameRateLegsIK_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL, UpdateFrameRate) == 0x000008, "Member 'DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL::UpdateFrameRate' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupDelegateOnAnimBlendBoneFinBlend_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UAnimationAsset* Sequence, class FName BoneName)> AnimBlendBoneFinDelegate;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL, AnimBlendBoneFinDelegate) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL::AnimBlendBoneFinDelegate' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupDelegateOnAnimFinBlend_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class UAnimationAsset* Sequence)> AnimFinDelegate;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL, AnimFinDelegate) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL::AnimFinDelegate' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupHandsCCDIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetupHandsCCDIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHandsCCDIKData_DN>             HandsCCDIKData;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetupHandsCCDIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupHandsCCDIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupHandsCCDIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetupHandsCCDIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupHandsCCDIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupHandsCCDIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupHandsCCDIK_BL, HandsCCDIKData) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupHandsCCDIK_BL::HandsCCDIKData' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupHandsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_SetupHandsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHandsIKData_DN>                HandsIKData;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetupHandsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupHandsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupHandsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_SetupHandsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupHandsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupHandsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupHandsIK_BL, HandsIKData) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupHandsIK_BL::HandsIKData' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIK_BL
// 0x0090 (0x0090 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairs_DN                      RootLegsPairs;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRootLegsPairs_DN>              FrontLegsPairs;                                    // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootPredictionMode;                                // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootPredictionCoeff;                               // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignRootToGround;                                 // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignFrontRearPlane;                               // 0x006E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowBodyMode;                                       // 0x006F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IkLegs;                                            // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StairsLegDownCoeff;                                // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAngelClampDegree;                              // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootClampUpCoeff;                                  // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRootTrace;                                      // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootTraceRate;                                     // 0x0084(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootTraceAlpha;                                    // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIK_BL) == 0x000090, "Wrong size on DynamicNodeBPLibrary_SetupLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, RootLegsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::RootLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, FrontLegsPairs) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::FrontLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, UpdateFrameRate) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, FootPredictionMode) == 0x000064, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::FootPredictionMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, FootPredictionCoeff) == 0x000068, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::FootPredictionCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, ShowTraceDebug) == 0x00006C, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, AlignRootToGround) == 0x00006D, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::AlignRootToGround' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, AlignFrontRearPlane) == 0x00006E, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::AlignFrontRearPlane' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, LowBodyMode) == 0x00006F, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::LowBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, IkLegs) == 0x000070, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::IkLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, StairsLegDownCoeff) == 0x000074, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::StairsLegDownCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, FootAngelClampDegree) == 0x000078, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::FootAngelClampDegree' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, FootClampUpCoeff) == 0x00007C, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::FootClampUpCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, UseRootTrace) == 0x000080, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::UseRootTrace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, RootTraceRate) == 0x000084, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::RootTraceRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIK_BL, RootTraceAlpha) == 0x000088, "Member 'DynamicNodeBPLibrary_SetupLegsIK_BL::RootTraceAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKAnimals_BL
// 0x0070 (0x0070 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKAnimals_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairs_DN                      RootLegsPairs;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootPredictionMode;                                // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootPredictionCoeff;                               // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowBodyMode;                                       // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IkLegs;                                            // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StairsLegDownCoeff;                                // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAngelClampDegree;                              // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootClampUpCoeff;                                  // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKAnimals_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL) == 0x000070, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKAnimals_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, RootLegsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::RootLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, UpdateFrameRate) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, FootPredictionMode) == 0x000054, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::FootPredictionMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, FootPredictionCoeff) == 0x000058, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::FootPredictionCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, ShowTraceDebug) == 0x00005C, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, LowBodyMode) == 0x00005D, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::LowBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, IkLegs) == 0x00005E, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::IkLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, StairsLegDownCoeff) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::StairsLegDownCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, FootAngelClampDegree) == 0x000064, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::FootAngelClampDegree' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimals_BL, FootClampUpCoeff) == 0x000068, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimals_BL::FootClampUpCoeff' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKAnimalsSimple_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairsSimple_DN                RootLegsPairs;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootPredictionMode;                                // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootPredictionCoeff;                               // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowBodyMode;                                       // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IkLegs;                                            // 0x005E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StairsLegDownCoeff;                                // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, RootLegsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::RootLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, UpdateFrameRate) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, FootPredictionMode) == 0x000054, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::FootPredictionMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, FootPredictionCoeff) == 0x000058, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::FootPredictionCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, ShowTraceDebug) == 0x00005C, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, LowBodyMode) == 0x00005D, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::LowBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, IkLegs) == 0x00005E, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::IkLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL, StairsLegDownCoeff) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL::StairsLegDownCoeff' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKHumanoids_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairs_DN                      RootLegsPairs;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootPredictionMode;                                // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootPredictionCoeff;                               // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootAngelClampDegree;                              // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootClampUpCoeff;                                  // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, RootLegsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::RootLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, UpdateFrameRate) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, FootPredictionMode) == 0x000054, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::FootPredictionMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, FootPredictionCoeff) == 0x000058, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::FootPredictionCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, ShowTraceDebug) == 0x00005C, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, FootAngelClampDegree) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::FootAngelClampDegree' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL, FootClampUpCoeff) == 0x000064, "Member 'DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL::FootClampUpCoeff' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKSimple_BL
// 0x0088 (0x0088 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKSimple_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairsSimple_DN                RootLegsPairs;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRootLegsPairsSimple_DN>        FrontLegsPairs;                                    // 0x0050(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FootPredictionMode;                                // 0x0064(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FootPredictionCoeff;                               // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x006C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignRootToGround;                                 // 0x006D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignOnlyFrontRearPlane;                           // 0x006E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowBodyMode;                                       // 0x006F(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IkLegs;                                            // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StairsLegDownCoeff;                                // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRootTrace;                                      // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootTraceRate;                                     // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootTraceAlpha;                                    // 0x0080(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKSimple_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL) == 0x000088, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKSimple_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, RootLegsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::RootLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, FrontLegsPairs) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::FrontLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, UpdateFrameRate) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, FootPredictionMode) == 0x000064, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::FootPredictionMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, FootPredictionCoeff) == 0x000068, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::FootPredictionCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, ShowTraceDebug) == 0x00006C, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, AlignRootToGround) == 0x00006D, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::AlignRootToGround' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, AlignOnlyFrontRearPlane) == 0x00006E, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::AlignOnlyFrontRearPlane' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, LowBodyMode) == 0x00006F, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::LowBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, IkLegs) == 0x000070, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::IkLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, StairsLegDownCoeff) == 0x000074, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::StairsLegDownCoeff' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, UseRootTrace) == 0x000078, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::UseRootTrace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, RootTraceRate) == 0x00007C, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::RootTraceRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSimple_BL, RootTraceAlpha) == 0x000080, "Member 'DynamicNodeBPLibrary_SetupLegsIKSimple_BL::RootTraceAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKSpiders_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKSpiders_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairsSSimple_DN               RootLegsPairsSSimple;                              // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowBodyMode;                                       // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IkLegs;                                            // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignOnlyFrontRearPlane;                           // 0x0057(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRootTrace;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootTraceRate;                                     // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootTraceAlpha;                                    // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKSpiders_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKSpiders_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, RootLegsPairsSSimple) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::RootLegsPairsSSimple' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, UpdateFrameRate) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, ShowTraceDebug) == 0x000054, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, LowBodyMode) == 0x000055, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::LowBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, IkLegs) == 0x000056, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::IkLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, AlignOnlyFrontRearPlane) == 0x000057, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::AlignOnlyFrontRearPlane' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, UseRootTrace) == 0x000058, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::UseRootTrace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, RootTraceRate) == 0x00005C, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::RootTraceRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpiders_BL, RootTraceAlpha) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpiders_BL::RootTraceAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKSpidersSimple_BL
// 0x0068 (0x0068 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootLegsPairsSimple_DN                RootLegsPairs;                                     // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LowBodyMode;                                       // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IkLegs;                                            // 0x0056(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignOnlyFrontRearPlane;                           // 0x0057(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRootTrace;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootTraceRate;                                     // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootTraceAlpha;                                    // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL) == 0x000068, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, RootLegsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::RootLegsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, UpdateFrameRate) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, ShowTraceDebug) == 0x000054, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, LowBodyMode) == 0x000055, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::LowBodyMode' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, IkLegs) == 0x000056, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::IkLegs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, AlignOnlyFrontRearPlane) == 0x000057, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::AlignOnlyFrontRearPlane' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, UseRootTrace) == 0x000058, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::UseRootTrace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, RootTraceRate) == 0x00005C, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::RootTraceRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL, RootTraceAlpha) == 0x000060, "Member 'DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL::RootTraceAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKWorms_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_SetupLegsIKWorms_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootSSocketPairs_DN                   RootSocketsPairs;                                  // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignOnlyFrontRearPlane;                           // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRootTrace;                                      // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RootTraceRate;                                     // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RootTraceAlpha;                                    // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupLegsIKWorms_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_SetupLegsIKWorms_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, RootSocketsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::RootSocketsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, UpdateFrameRate) == 0x000040, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, ShowTraceDebug) == 0x000044, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, AlignOnlyFrontRearPlane) == 0x000045, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::AlignOnlyFrontRearPlane' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, UseRootTrace) == 0x000046, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::UseRootTrace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, RootTraceRate) == 0x000048, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::RootTraceRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupLegsIKWorms_BL, RootTraceAlpha) == 0x00004C, "Member 'DynamicNodeBPLibrary_SetupLegsIKWorms_BL::RootTraceAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SetupProneIK_BL
// 0x0060 (0x0060 - 0x0000)
struct DynamicNodeBPLibrary_SetupProneIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRootSSocketPairs_DN                   RootSocketsPairs;                                  // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         UpdateFrameRate;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowTraceDebug;                                    // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlignOnlyFrontRearPlane;                           // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SideAngleClamp;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalAngleClamp;                                   // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MeshRotator;                                       // 0x0050(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SetupProneIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SetupProneIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SetupProneIK_BL) == 0x000060, "Wrong size on DynamicNodeBPLibrary_SetupProneIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, RootSocketsPairs) == 0x000008, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::RootSocketsPairs' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, UpdateFrameRate) == 0x000040, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::UpdateFrameRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, ShowTraceDebug) == 0x000044, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::ShowTraceDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, AlignOnlyFrontRearPlane) == 0x000045, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::AlignOnlyFrontRearPlane' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, SideAngleClamp) == 0x000048, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::SideAngleClamp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, TotalAngleClamp) == 0x00004C, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::TotalAngleClamp' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SetupProneIK_BL, MeshRotator) == 0x000050, "Member 'DynamicNodeBPLibrary_SetupProneIK_BL::MeshRotator' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.ShiftTracePointLegsIK_BL
// 0x0028 (0x0028 - 0x0000)
struct DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaVectorCSLeft;                                 // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeltaVectorCSRight;                                // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL) == 0x000028, "Wrong size on DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL, DeltaVectorCSLeft) == 0x00000C, "Member 'DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL::DeltaVectorCSLeft' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL, DeltaVectorCSRight) == 0x000018, "Member 'DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL::DeltaVectorCSRight' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SlopeDetection_BL
// 0x0050 (0x0050 - 0x0000)
struct DynamicNodeBPLibrary_SlopeDetection_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESlopeStatus_DN                               SlopeStatus;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RayTraceNomalThreshold;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeUpThresholdIn;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeUpThresholdOut;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeDownThresholdIn;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeDownThresholdOut;                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeOnSlopeToPlay;                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeUpMinTimeToPlay;                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlopeDownMinTimeToPlay;                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeSlopeDirMinTimeToPlay;                       // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayDistance;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayHeightFactor;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use4Rays;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Use4RaysHalfWidth;                                 // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UpdateRate;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowDebug;                                         // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SlopeDetection_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SlopeDetection_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SlopeDetection_BL) == 0x000050, "Wrong size on DynamicNodeBPLibrary_SlopeDetection_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeStatus) == 0x000008, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeStatus' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, RayTraceNomalThreshold) == 0x00000C, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::RayTraceNomalThreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeUpThresholdIn) == 0x000010, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeUpThresholdIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeUpThresholdOut) == 0x000014, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeUpThresholdOut' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeDownThresholdIn) == 0x000018, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeDownThresholdIn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeDownThresholdOut) == 0x00001C, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeDownThresholdOut' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, MinTimeOnSlopeToPlay) == 0x000020, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::MinTimeOnSlopeToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeUpMinTimeToPlay) == 0x000024, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeUpMinTimeToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, SlopeDownMinTimeToPlay) == 0x000028, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::SlopeDownMinTimeToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, ChangeSlopeDirMinTimeToPlay) == 0x00002C, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::ChangeSlopeDirMinTimeToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, RayDistance) == 0x000030, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::RayDistance' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, RayHeightFactor) == 0x000034, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::RayHeightFactor' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, Use4Rays) == 0x000038, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::Use4Rays' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, Use4RaysHalfWidth) == 0x00003C, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::Use4RaysHalfWidth' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, UpdateRate) == 0x000040, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::UpdateRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, ShowDebug) == 0x000044, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::ShowDebug' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SlopeDetection_BL, ReturnValue) == 0x000048, "Member 'DynamicNodeBPLibrary_SlopeDetection_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.StartAnimationStack_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_StartAnimationStack_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StackPriority;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoneBlendAlpha;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseTransitionZones;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_StartAnimationStack_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_StartAnimationStack_BL");
static_assert(sizeof(DynamicNodeBPLibrary_StartAnimationStack_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_StartAnimationStack_BL");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, StackPriority) == 0x000009, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::StackPriority' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, BoneName) == 0x00000C, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, BoneBlendAlpha) == 0x000014, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::BoneBlendAlpha' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, BlendTime) == 0x000018, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::BlendTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_StartAnimationStack_BL, UseTransitionZones) == 0x00001C, "Member 'DynamicNodeBPLibrary_StartAnimationStack_BL::UseTransitionZones' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.SwimmMachine_BL
// 0x0060 (0x0060 - 0x0000)
struct DynamicNodeBPLibrary_SwimmMachine_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        StartSwimmingAnimation;                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleAnimation;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        IdleSurfaceAnimation;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        EndSwimmingAnimation;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        JumpOutOfWaterAnimation;                           // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOnlyAccelerationForDM;                          // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShallowWaterImmersionDepth;                        // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceSwimmImmersionDepth;                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutOfWaterImmersionDepth;                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdlePoseVelocityTreshold;                          // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_ToS;                                // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_SIdle;                              // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime_ES;                                 // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTimeQuickReturn;                         // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrelandedInWaterAddPlaySec;                        // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationReturnTypes_DN                      ReturnValue;                                       // 0x005C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_SwimmMachine_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_SwimmMachine_BL");
static_assert(sizeof(DynamicNodeBPLibrary_SwimmMachine_BL) == 0x000060, "Wrong size on DynamicNodeBPLibrary_SwimmMachine_BL");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, StartSwimmingAnimation) == 0x000008, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::StartSwimmingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, IdleAnimation) == 0x000010, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::IdleAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, IdleSurfaceAnimation) == 0x000018, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::IdleSurfaceAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, EndSwimmingAnimation) == 0x000020, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::EndSwimmingAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, JumpOutOfWaterAnimation) == 0x000028, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::JumpOutOfWaterAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, UseOnlyAccelerationForDM) == 0x000030, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::UseOnlyAccelerationForDM' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, ShallowWaterImmersionDepth) == 0x000034, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::ShallowWaterImmersionDepth' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, SurfaceSwimmImmersionDepth) == 0x000038, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::SurfaceSwimmImmersionDepth' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, OutOfWaterImmersionDepth) == 0x00003C, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::OutOfWaterImmersionDepth' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, IdlePoseVelocityTreshold) == 0x000040, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::IdlePoseVelocityTreshold' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, TransitionTime_ToS) == 0x000044, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::TransitionTime_ToS' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, TransitionTime_SIdle) == 0x000048, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::TransitionTime_SIdle' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, TransitionTime_ES) == 0x00004C, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::TransitionTime_ES' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, PlayRate) == 0x000050, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, TransitionTimeQuickReturn) == 0x000054, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::TransitionTimeQuickReturn' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, PrelandedInWaterAddPlaySec) == 0x000058, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::PrelandedInWaterAddPlaySec' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_SwimmMachine_BL, ReturnValue) == 0x00005C, "Member 'DynamicNodeBPLibrary_SwimmMachine_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.TransitionToAnimFromCurPose_BL
// 0x0040 (0x0040 - 0x0000)
struct DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimationAsset;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromNotify;                                    // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTillNotify;                                    // 0x002C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestart;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartFrom;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL) == 0x000040, "Wrong size on DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, AnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, bIsLooping) == 0x00001C, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::bIsLooping' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, InPlayRate) == 0x000020, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, PlayFromNotify) == 0x000024, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::PlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, PlayTillNotify) == 0x00002C, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::PlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, CanRestart) == 0x000034, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::CanRestart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, StartFrom) == 0x000038, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::StartFrom' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL, ReturnValue) == 0x00003C, "Member 'DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.TransitionToMontageFromCurPose_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AnimationAsset;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLooping;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InPlayRate;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayFromSection;                                   // 0x0024(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingPosition;                                  // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestart;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL");
static_assert(sizeof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, AnimationAsset) == 0x000010, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::AnimationAsset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, TransitionTime) == 0x000018, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, bIsLooping) == 0x00001C, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::bIsLooping' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, InPlayRate) == 0x000020, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::InPlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, PlayFromSection) == 0x000024, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::PlayFromSection' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, StartingPosition) == 0x00002C, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::StartingPosition' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, CanRestart) == 0x000030, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::CanRestart' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL, ReturnValue) == 0x000031, "Member 'DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.TurnToControlRotation_BL
// 0x0038 (0x0038 - 0x0000)
struct DynamicNodeBPLibrary_TurnToControlRotation_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnchorBone;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneToRotate;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePinch;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchMulti;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchUpperGap;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchBottomGap;                                    // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchOffset;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDegrees;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAlpha;                                     // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_TurnToControlRotation_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_TurnToControlRotation_BL");
static_assert(sizeof(DynamicNodeBPLibrary_TurnToControlRotation_BL) == 0x000038, "Wrong size on DynamicNodeBPLibrary_TurnToControlRotation_BL");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, AnchorBone) == 0x000008, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::AnchorBone' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, BoneToRotate) == 0x000010, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::BoneToRotate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, UsePinch) == 0x000018, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::UsePinch' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, PitchMulti) == 0x00001C, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::PitchMulti' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, PitchUpperGap) == 0x000020, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::PitchUpperGap' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, PitchBottomGap) == 0x000024, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::PitchBottomGap' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, PitchOffset) == 0x000028, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::PitchOffset' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, MaxDegrees) == 0x00002C, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::MaxDegrees' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, TransitionTime) == 0x000030, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_TurnToControlRotation_BL, RotationAlpha) == 0x000034, "Member 'DynamicNodeBPLibrary_TurnToControlRotation_BL::RotationAlpha' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UnassignDelegate_AllNotify_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UnassignDelegate_AnimationChange_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UnassignDelegate_SpecificNotify_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL, NotifyName) == 0x000008, "Member 'DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL::NotifyName' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UnAssignDelegate_SpecificNotifyAndAsset_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NotifyName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UAnimSequenceBase*                AnimationTrack;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL, NotifyName) == 0x000008, "Member 'DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL::NotifyName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL, AnimationTrack) == 0x000010, "Member 'DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL::AnimationTrack' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UnEquipThing_BL
// 0x0058 (0x0058 - 0x0000)
struct DynamicNodeBPLibrary_UnEquipThing_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBranchesOutEnum                              Branches;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationAsset*                        AnimationToPlay;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUnEquipThingData_DN>           UnEquipThingData;                                  // 0x0018(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TDelegate<void(int32 WeaponIndex, class FName NotifyToAction, bool FinishTransform)> DelegatesOnComplited;                              // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   PlayFromNotify;                                    // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PlayTillNotify;                                    // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRestartAnimation;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0051(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UnEquipThing_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UnEquipThing_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UnEquipThing_BL) == 0x000058, "Wrong size on DynamicNodeBPLibrary_UnEquipThing_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, Branches) == 0x000008, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::Branches' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, AnimationToPlay) == 0x000010, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::AnimationToPlay' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, UnEquipThingData) == 0x000018, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::UnEquipThingData' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, DelegatesOnComplited) == 0x000028, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::DelegatesOnComplited' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, PlayFromNotify) == 0x000038, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::PlayFromNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, PlayTillNotify) == 0x000040, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::PlayTillNotify' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, TransitionTime) == 0x000048, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::TransitionTime' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, PlayRate) == 0x00004C, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::PlayRate' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, CanRestartAnimation) == 0x000050, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::CanRestartAnimation' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UnEquipThing_BL, ReturnValue) == 0x000051, "Member 'DynamicNodeBPLibrary_UnEquipThing_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.Update_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_Update_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_Update_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_Update_BL");
static_assert(sizeof(DynamicNodeBPLibrary_Update_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_Update_BL");
static_assert(offsetof(DynamicNodeBPLibrary_Update_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_Update_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UpdateAimOffset_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_UpdateAimOffset_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XVal;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YVal;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UpdateAimOffset_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UpdateAimOffset_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UpdateAimOffset_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_UpdateAimOffset_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffset_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UpdateAimOffset_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffset_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_UpdateAimOffset_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffset_BL, XVal) == 0x000010, "Member 'DynamicNodeBPLibrary_UpdateAimOffset_BL::XVal' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffset_BL, YVal) == 0x000014, "Member 'DynamicNodeBPLibrary_UpdateAimOffset_BL::YVal' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffset_BL, ReturnValue) == 0x000018, "Member 'DynamicNodeBPLibrary_UpdateAimOffset_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UpdateAimOffsetSmooth_BL
// 0x0020 (0x0020 - 0x0000)
struct DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XVal;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YVal;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntSpeed;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL) == 0x000020, "Wrong size on DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL, BoneName) == 0x000008, "Member 'DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL::BoneName' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL, XVal) == 0x000010, "Member 'DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL::XVal' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL, YVal) == 0x000014, "Member 'DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL::YVal' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL, IntSpeed) == 0x000018, "Member 'DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL::IntSpeed' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL, ReturnValue) == 0x00001C, "Member 'DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL::ReturnValue' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UseMeshSpaceNextBlendBone_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeshSpace;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL, bMeshSpace) == 0x000008, "Member 'DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL::bMeshSpace' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UseNextIKFunctionFoProneIK_BL
// 0x0008 (0x0008 - 0x0000)
struct DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL) == 0x000008, "Wrong size on DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL::OwnCharacter' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UseSmoothBlendOut_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_UseSmoothBlendOut_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Use;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UseSmoothBlendOut_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UseSmoothBlendOut_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UseSmoothBlendOut_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_UseSmoothBlendOut_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UseSmoothBlendOut_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UseSmoothBlendOut_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseSmoothBlendOut_BL, Use) == 0x000008, "Member 'DynamicNodeBPLibrary_UseSmoothBlendOut_BL::Use' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UseSphereTraceLegsIK_BL
// 0x0018 (0x0018 - 0x0000)
struct DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LegIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseSphereTrace;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereRadius;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL) == 0x000018, "Wrong size on DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL, LegIndex) == 0x000008, "Member 'DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL::LegIndex' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL, UseSphereTrace) == 0x00000C, "Member 'DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL::UseSphereTrace' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL, SphereRadius) == 0x000010, "Member 'DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL::SphereRadius' has a wrong offset!");

// Function DynamicNode.DynamicNodeBPLibrary.UseTurnInPlaceOnlyForSelectedAssets_BL
// 0x0010 (0x0010 - 0x0000)
struct DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL final
{
public:
	class ACharacter*                             OwnCharacter;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForSelectedTurnAssets;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyForSelectedTurnInPlaceAssets;                  // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL) == 0x000008, "Wrong alignment on DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL");
static_assert(sizeof(DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL) == 0x000010, "Wrong size on DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL");
static_assert(offsetof(DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL, OwnCharacter) == 0x000000, "Member 'DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL::OwnCharacter' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL, OnlyForSelectedTurnAssets) == 0x000008, "Member 'DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL::OnlyForSelectedTurnAssets' has a wrong offset!");
static_assert(offsetof(DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL, OnlyForSelectedTurnInPlaceAssets) == 0x000009, "Member 'DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL::OnlyForSelectedTurnInPlaceAssets' has a wrong offset!");

}

