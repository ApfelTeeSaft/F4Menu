#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteamMulti_GameInstance

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SteamMulti_GameInstance.SteamMulti_GameInstance_C
// 0x00B0 (0x0258 - 0x01A8)
class USteamMulti_GameInstance_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         ACH_Save_Success;                                  // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SaveArea;                                          // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SaveOverlapArea;                                   // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SaveAreaB;                                         // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ACH_Gold;                                          // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ACH_Chicken_ThrowCount;                            // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ACH_WaterDie;                                      // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ACH_Dodge_10000_Clear;                             // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GoldChicken_S;                                     // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GoldKnight_S;                                      // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D2[0x2];                                      // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeathKnight;                                       // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UWorld>                  TAM_Level;                                         // 0x01D8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	int32                                         DeathChicken;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChallengeMode_;                                    // 0x0204(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TeleportLocation;                                  // 0x0208(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temporary_SaveLocation;                            // 0x0214(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BloodOff_;                                         // 0x0220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_Tutorial;                                    // 0x0221(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_1;                                           // 0x0222(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_2;                                           // 0x0223(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_3;                                           // 0x0224(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_4;                                           // 0x0225(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_5;                                           // 0x0226(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_227[0x1];                                      // 0x0227(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeathKnight_ItemGame;                              // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayManOrChick_F_;                                 // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Temporary_SaveValue;                               // 0x022D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MapClear_;                                         // 0x022E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_22F[0x1];                                      // 0x022F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NowPlayerID;                                       // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Level_6;                                           // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TutorialInfo_Integer;                              // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Level_7;                                           // 0x023C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UI_SelectMap_ID;                                   // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharErrorRestart;                                  // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Tip_OnOff;                                         // 0x0245(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Level_Nin;                                         // 0x0246(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_247[0x1];                                      // 0x0247(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NIn_AllRecord_Hour;                                // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NIn_AllRecord_Min;                                 // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NIn_AllRecord_Sec;                                 // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_SteamMulti_GameInstance(int32 EntryPoint);
	void LevelOrSave_BooleanOFF();
	void TAM01_AreaSpawn();
	void ACH_GoldComplete();
	void OnSuccess_8D1DA87E4031EE510894B7A66E3D985F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnFailure_8D1DA87E4031EE510894B7A66E3D985F(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag);
	void OnSuccess_2EDDD2CE4D9215C34AA819A5BD7A9840();
	void OnFailure_2EDDD2CE4D9215C34AA819A5BD7A9840();
	void ALTF4GameInstanceRef(class USteamMulti_GameInstance_C** ALTF4_GI);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SteamMulti_GameInstance_C">();
	}
	static class USteamMulti_GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USteamMulti_GameInstance_C>();
	}
};
static_assert(alignof(USteamMulti_GameInstance_C) == 0x000008, "Wrong alignment on USteamMulti_GameInstance_C");
static_assert(sizeof(USteamMulti_GameInstance_C) == 0x000258, "Wrong size on USteamMulti_GameInstance_C");
static_assert(offsetof(USteamMulti_GameInstance_C, UberGraphFrame) == 0x0001A8, "Member 'USteamMulti_GameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, ACH_Save_Success) == 0x0001B0, "Member 'USteamMulti_GameInstance_C::ACH_Save_Success' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, SaveArea) == 0x0001B4, "Member 'USteamMulti_GameInstance_C::SaveArea' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, SaveOverlapArea) == 0x0001B8, "Member 'USteamMulti_GameInstance_C::SaveOverlapArea' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, SaveAreaB) == 0x0001BC, "Member 'USteamMulti_GameInstance_C::SaveAreaB' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, ACH_Gold) == 0x0001C0, "Member 'USteamMulti_GameInstance_C::ACH_Gold' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, ACH_Chicken_ThrowCount) == 0x0001C4, "Member 'USteamMulti_GameInstance_C::ACH_Chicken_ThrowCount' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, ACH_WaterDie) == 0x0001C8, "Member 'USteamMulti_GameInstance_C::ACH_WaterDie' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, ACH_Dodge_10000_Clear) == 0x0001CC, "Member 'USteamMulti_GameInstance_C::ACH_Dodge_10000_Clear' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, GoldChicken_S) == 0x0001D0, "Member 'USteamMulti_GameInstance_C::GoldChicken_S' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, GoldKnight_S) == 0x0001D1, "Member 'USteamMulti_GameInstance_C::GoldKnight_S' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, DeathKnight) == 0x0001D4, "Member 'USteamMulti_GameInstance_C::DeathKnight' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, TAM_Level) == 0x0001D8, "Member 'USteamMulti_GameInstance_C::TAM_Level' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, DeathChicken) == 0x000200, "Member 'USteamMulti_GameInstance_C::DeathChicken' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, ChallengeMode_) == 0x000204, "Member 'USteamMulti_GameInstance_C::ChallengeMode_' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, TeleportLocation) == 0x000208, "Member 'USteamMulti_GameInstance_C::TeleportLocation' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Temporary_SaveLocation) == 0x000214, "Member 'USteamMulti_GameInstance_C::Temporary_SaveLocation' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, BloodOff_) == 0x000220, "Member 'USteamMulti_GameInstance_C::BloodOff_' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_Tutorial) == 0x000221, "Member 'USteamMulti_GameInstance_C::Level_Tutorial' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_1) == 0x000222, "Member 'USteamMulti_GameInstance_C::Level_1' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_2) == 0x000223, "Member 'USteamMulti_GameInstance_C::Level_2' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_3) == 0x000224, "Member 'USteamMulti_GameInstance_C::Level_3' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_4) == 0x000225, "Member 'USteamMulti_GameInstance_C::Level_4' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_5) == 0x000226, "Member 'USteamMulti_GameInstance_C::Level_5' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, DeathKnight_ItemGame) == 0x000228, "Member 'USteamMulti_GameInstance_C::DeathKnight_ItemGame' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, PlayManOrChick_F_) == 0x00022C, "Member 'USteamMulti_GameInstance_C::PlayManOrChick_F_' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Temporary_SaveValue) == 0x00022D, "Member 'USteamMulti_GameInstance_C::Temporary_SaveValue' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, MapClear_) == 0x00022E, "Member 'USteamMulti_GameInstance_C::MapClear_' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, NowPlayerID) == 0x000230, "Member 'USteamMulti_GameInstance_C::NowPlayerID' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_6) == 0x000234, "Member 'USteamMulti_GameInstance_C::Level_6' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, TutorialInfo_Integer) == 0x000238, "Member 'USteamMulti_GameInstance_C::TutorialInfo_Integer' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_7) == 0x00023C, "Member 'USteamMulti_GameInstance_C::Level_7' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, UI_SelectMap_ID) == 0x000240, "Member 'USteamMulti_GameInstance_C::UI_SelectMap_ID' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, CharErrorRestart) == 0x000244, "Member 'USteamMulti_GameInstance_C::CharErrorRestart' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Tip_OnOff) == 0x000245, "Member 'USteamMulti_GameInstance_C::Tip_OnOff' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, Level_Nin) == 0x000246, "Member 'USteamMulti_GameInstance_C::Level_Nin' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, NIn_AllRecord_Hour) == 0x000248, "Member 'USteamMulti_GameInstance_C::NIn_AllRecord_Hour' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, NIn_AllRecord_Min) == 0x00024C, "Member 'USteamMulti_GameInstance_C::NIn_AllRecord_Min' has a wrong offset!");
static_assert(offsetof(USteamMulti_GameInstance_C, NIn_AllRecord_Sec) == 0x000250, "Member 'USteamMulti_GameInstance_C::NIn_AllRecord_Sec' has a wrong offset!");

}

