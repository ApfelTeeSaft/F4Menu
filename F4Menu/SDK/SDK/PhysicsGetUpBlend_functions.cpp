#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsGetUpBlend

#include "Basic.hpp"

#include "PhysicsGetUpBlend_classes.hpp"
#include "PhysicsGetUpBlend_parameters.hpp"


namespace SDK
{

// Function PhysicsGetUpBlend.PhysicsGetUpBlendAnimInstance.GetUpFinish
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPhysicsGetUpBlendAnimInstance::GetUpFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendAnimInstance", "GetUpFinish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendAnimInstance.OnActionSet
// (Event, Public, BlueprintEvent)

void UPhysicsGetUpBlendAnimInstance::OnActionSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendAnimInstance", "OnActionSet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendAnimInstance.SetAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EActionType                             NewAction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsGetUpBlendAnimInstance::SetAction(const EActionType NewAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendAnimInstance", "SetAction");

	Params::PhysicsGetUpBlendAnimInstance_SetAction Parms{};

	Parms.NewAction = NewAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendAnimInstance.IsGetUpAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsGetUpBlendAnimInstance::IsGetUpAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendAnimInstance", "IsGetUpAnimation");

	Params::PhysicsGetUpBlendAnimInstance_IsGetUpAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendAnimInstance.IsRagdoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsGetUpBlendAnimInstance::IsRagdoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendAnimInstance", "IsRagdoll");

	Params::PhysicsGetUpBlendAnimInstance_IsRagdoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.Fall
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::Fall(float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "Fall");

	Params::PhysicsGetUpBlendCharacter_Fall Parms{};

	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.Fall_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::Fall_NetMulticast(float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "Fall_NetMulticast");

	Params::PhysicsGetUpBlendCharacter_Fall_NetMulticast Parms{};

	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.Fall_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::Fall_Server(float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "Fall_Server");

	Params::PhysicsGetUpBlendCharacter_Fall_Server Parms{};

	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.FallImpulse
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERadialImpulseFalloff                   Falloff                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVelChange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::FallImpulse(const struct FVector& Origin, float Radius, float Strength, float Delay, ERadialImpulseFalloff Falloff, bool bVelChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "FallImpulse");

	Params::PhysicsGetUpBlendCharacter_FallImpulse Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Radius = Radius;
	Parms.Strength = Strength;
	Parms.Delay = Delay;
	Parms.Falloff = Falloff;
	Parms.bVelChange = bVelChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.FallImpulse_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERadialImpulseFalloff                   Falloff                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVelChange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::FallImpulse_NetMulticast(const struct FVector& Origin, float Radius, float Strength, float Delay, ERadialImpulseFalloff Falloff, bool bVelChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "FallImpulse_NetMulticast");

	Params::PhysicsGetUpBlendCharacter_FallImpulse_NetMulticast Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Radius = Radius;
	Parms.Strength = Strength;
	Parms.Delay = Delay;
	Parms.Falloff = Falloff;
	Parms.bVelChange = bVelChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.FallImpulse_Server
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          Origin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERadialImpulseFalloff                   Falloff                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVelChange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::FallImpulse_Server(const struct FVector& Origin, float Radius, float Strength, float Delay, ERadialImpulseFalloff Falloff, bool bVelChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "FallImpulse_Server");

	Params::PhysicsGetUpBlendCharacter_FallImpulse_Server Parms{};

	Parms.Origin = std::move(Origin);
	Parms.Radius = Radius;
	Parms.Strength = Strength;
	Parms.Delay = Delay;
	Parms.Falloff = Falloff;
	Parms.bVelChange = bVelChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.FallInput
// (Final, Native, Public, BlueprintCallable)

void APhysicsGetUpBlendCharacter::FallInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "FallInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.K2_SetGetUpOrientation
// (Event, Protected, BlueprintEvent)
// Parameters:
// EGetUpOrientation                       GetUpOrientation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::K2_SetGetUpOrientation(EGetUpOrientation GetUpOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "K2_SetGetUpOrientation");

	Params::PhysicsGetUpBlendCharacter_K2_SetGetUpOrientation Parms{};

	Parms.GetUpOrientation = GetUpOrientation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.SetAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EActionType                             NewAction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool APhysicsGetUpBlendCharacter::SetAction(EActionType NewAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "SetAction");

	Params::PhysicsGetUpBlendCharacter_SetAction Parms{};

	Parms.NewAction = NewAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsGetUpBlend.PhysicsGetUpBlendCharacter.SetGetUpOrientation_NetMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, NetValidate)
// Parameters:
// EGetUpOrientation                       GetUpOrientation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APhysicsGetUpBlendCharacter::SetGetUpOrientation_NetMulticast(EGetUpOrientation GetUpOrientation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsGetUpBlendCharacter", "SetGetUpOrientation_NetMulticast");

	Params::PhysicsGetUpBlendCharacter_SetGetUpOrientation_NetMulticast Parms{};

	Parms.GetUpOrientation = GetUpOrientation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

