#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlobalInteractableUserWidget

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Slate_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.OnChangeInputDeviceUI__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature final
{
public:
	bool                                          bIsGamepadBeingUsed_0;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature");
static_assert(sizeof(GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature, bIsGamepadBeingUsed_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_OnChangeInputDeviceUI__DelegateSignature::bIsGamepadBeingUsed_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.ExecuteUbergraph_GlobalInteractableUserWidget
// 0x0008 (0x0008 - 0x0000)
struct GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget) == 0x000004, "Wrong alignment on GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget");
static_assert(sizeof(GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget) == 0x000008, "Wrong size on GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget");
static_assert(offsetof(GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget, EntryPoint) == 0x000000, "Member 'GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget, K2Node_Event_IsDesignTime) == 0x000004, "Member 'GlobalInteractableUserWidget_C_ExecuteUbergraph_GlobalInteractableUserWidget::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_PreConstruct) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_PreConstruct");
static_assert(sizeof(GlobalInteractableUserWidget_C_PreConstruct) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_PreConstruct");
static_assert(offsetof(GlobalInteractableUserWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GlobalInteractableUserWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetTextAppearence
// 0x00C8 (0x00C8 - 0x0000)
struct GlobalInteractableUserWidget_C_SetTextAppearence final
{
public:
	class UTextBlock*                             TextObject;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         Font;                                              // 0x0008(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0070(0x0028)()
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0098(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x00B0(0x0018)()
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetTextAppearence) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_SetTextAppearence");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetTextAppearence) == 0x0000C8, "Wrong size on GlobalInteractableUserWidget_C_SetTextAppearence");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetTextAppearence, TextObject) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetTextAppearence::TextObject' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetTextAppearence, Font) == 0x000008, "Member 'GlobalInteractableUserWidget_C_SetTextAppearence::Font' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetTextAppearence, Color) == 0x000060, "Member 'GlobalInteractableUserWidget_C_SetTextAppearence::Color' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetTextAppearence, K2Node_MakeStruct_SlateColor) == 0x000070, "Member 'GlobalInteractableUserWidget_C_SetTextAppearence::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetTextAppearence, CallFunc_GetText_ReturnValue) == 0x000098, "Member 'GlobalInteractableUserWidget_C_SetTextAppearence::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetTextAppearence, CallFunc_TextToUpper_ReturnValue) == 0x0000B0, "Member 'GlobalInteractableUserWidget_C_SetTextAppearence::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetEditableTextAppearence
// 0x02E8 (0x02E8 - 0x0000)
struct GlobalInteractableUserWidget_C_SetEditableTextAppearence final
{
public:
	class UEditableText*                          EditableText;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         Font;                                              // 0x0008(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetText_ReturnValue;                      // 0x0070(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0088(0x0018)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00A0(0x0028)()
	struct FEditableTextStyle                     K2Node_MakeStruct_EditableTextStyle;               // 0x00C8(0x0220)()
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetEditableTextAppearence) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_SetEditableTextAppearence");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetEditableTextAppearence) == 0x0002E8, "Wrong size on GlobalInteractableUserWidget_C_SetEditableTextAppearence");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, EditableText) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::EditableText' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, Font) == 0x000008, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::Font' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, Color) == 0x000060, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::Color' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, CallFunc_GetText_ReturnValue) == 0x000070, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::CallFunc_GetText_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, CallFunc_TextToUpper_ReturnValue) == 0x000088, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, K2Node_MakeStruct_SlateColor) == 0x0000A0, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetEditableTextAppearence, K2Node_MakeStruct_EditableTextStyle) == 0x0000C8, "Member 'GlobalInteractableUserWidget_C_SetEditableTextAppearence::K2Node_MakeStruct_EditableTextStyle' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetGlobalGeneralData
// 0x000C (0x000C - 0x0000)
struct GlobalInteractableUserWidget_C_GetGlobalGeneralData final
{
public:
	bool                                          bPlayFadeAnimations_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayFadeAnimationLength_0;                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIntroLogosSkippable_0;                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIntroEnabled_0;                                   // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetGlobalGeneralData) == 0x000004, "Wrong alignment on GlobalInteractableUserWidget_C_GetGlobalGeneralData");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetGlobalGeneralData) == 0x00000C, "Wrong size on GlobalInteractableUserWidget_C_GetGlobalGeneralData");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalGeneralData, bPlayFadeAnimations_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetGlobalGeneralData::bPlayFadeAnimations_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalGeneralData, PlayFadeAnimationLength_0) == 0x000004, "Member 'GlobalInteractableUserWidget_C_GetGlobalGeneralData::PlayFadeAnimationLength_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalGeneralData, bIntroLogosSkippable_0) == 0x000008, "Member 'GlobalInteractableUserWidget_C_GetGlobalGeneralData::bIntroLogosSkippable_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalGeneralData, bIntroEnabled_0) == 0x000009, "Member 'GlobalInteractableUserWidget_C_GetGlobalGeneralData::bIntroEnabled_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetGlobalFonts
// 0x01C0 (0x01C0 - 0x0000)
struct GlobalInteractableUserWidget_C_GetGlobalFonts final
{
public:
	struct FSlateFontInfo                         MainFont_0;                                        // 0x0000(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	struct FSlateFontInfo                         SmallTitleFont_0;                                  // 0x0058(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	struct FSlateFontInfo                         MediumTitleFont_0;                                 // 0x00B0(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	struct FSlateFontInfo                         LargeTitleFont_0;                                  // 0x0108(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	struct FSlateFontInfo                         ValueFont_0;                                       // 0x0160(0x0058)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          OnlyUppercase_0;                                   // 0x01B8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetGlobalFonts) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_GetGlobalFonts");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetGlobalFonts) == 0x0001C0, "Wrong size on GlobalInteractableUserWidget_C_GetGlobalFonts");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalFonts, MainFont_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetGlobalFonts::MainFont_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalFonts, SmallTitleFont_0) == 0x000058, "Member 'GlobalInteractableUserWidget_C_GetGlobalFonts::SmallTitleFont_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalFonts, MediumTitleFont_0) == 0x0000B0, "Member 'GlobalInteractableUserWidget_C_GetGlobalFonts::MediumTitleFont_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalFonts, LargeTitleFont_0) == 0x000108, "Member 'GlobalInteractableUserWidget_C_GetGlobalFonts::LargeTitleFont_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalFonts, ValueFont_0) == 0x000160, "Member 'GlobalInteractableUserWidget_C_GetGlobalFonts::ValueFont_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalFonts, OnlyUppercase_0) == 0x0001B8, "Member 'GlobalInteractableUserWidget_C_GetGlobalFonts::OnlyUppercase_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetGlobalSounds
// 0x0038 (0x0038 - 0x0000)
struct GlobalInteractableUserWidget_C_GetGlobalSounds final
{
public:
	class USoundCue*                              SelectSound_0;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              BackSound_0;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              HoverSound_0;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ChangeSound_0;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              SliderSound_0;                                     // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              BackgroundMusic_0;                                 // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              CreditsMusic_0;                                    // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetGlobalSounds) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_GetGlobalSounds");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetGlobalSounds) == 0x000038, "Wrong size on GlobalInteractableUserWidget_C_GetGlobalSounds");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, SelectSound_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::SelectSound_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, BackSound_0) == 0x000008, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::BackSound_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, HoverSound_0) == 0x000010, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::HoverSound_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, ChangeSound_0) == 0x000018, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::ChangeSound_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, SliderSound_0) == 0x000020, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::SliderSound_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, BackgroundMusic_0) == 0x000028, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::BackgroundMusic_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalSounds, CreditsMusic_0) == 0x000030, "Member 'GlobalInteractableUserWidget_C_GetGlobalSounds::CreditsMusic_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetGlobalColors
// 0x0090 (0x0090 - 0x0000)
struct GlobalInteractableUserWidget_C_GetGlobalColors final
{
public:
	struct FLinearColor                           MainColor_0;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor_0;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightExtraColor_0;                             // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MenuBackgroundColor_0;                             // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WidgetBackgroundColor_0;                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SymbolColor_0;                                     // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SubtleColor_0;                                     // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DecisionButtonColor_0;                             // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SliderBackgroundColor_0;                           // 0x0080(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetGlobalColors) == 0x000004, "Wrong alignment on GlobalInteractableUserWidget_C_GetGlobalColors");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetGlobalColors) == 0x000090, "Wrong size on GlobalInteractableUserWidget_C_GetGlobalColors");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, MainColor_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::MainColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, HighlightColor_0) == 0x000010, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::HighlightColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, HighlightExtraColor_0) == 0x000020, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::HighlightExtraColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, MenuBackgroundColor_0) == 0x000030, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::MenuBackgroundColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, WidgetBackgroundColor_0) == 0x000040, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::WidgetBackgroundColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, SymbolColor_0) == 0x000050, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::SymbolColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, SubtleColor_0) == 0x000060, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::SubtleColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, DecisionButtonColor_0) == 0x000070, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::DecisionButtonColor_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetGlobalColors, SliderBackgroundColor_0) == 0x000080, "Member 'GlobalInteractableUserWidget_C_GetGlobalColors::SliderBackgroundColor_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetCurrentInputDeviceUI
// 0x0020 (0x0020 - 0x0000)
struct GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI final
{
public:
	struct FKey                                   InKey;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bIsMouseInput;                                     // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsGamepadInput;                                   // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Key_IsGamepadKey_ReturnValue;             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI) == 0x000020, "Wrong size on GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI, InKey) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI::InKey' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI, bIsMouseInput) == 0x000018, "Member 'GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI::bIsMouseInput' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI, bIsGamepadInput) == 0x000019, "Member 'GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI::bIsGamepadInput' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI, CallFunc_Key_IsGamepadKey_ReturnValue) == 0x00001B, "Member 'GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI::CallFunc_Key_IsGamepadKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00001C, "Member 'GlobalInteractableUserWidget_C_SetCurrentInputDeviceUI::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetCurrentInputDeviceUI
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI final
{
public:
	bool                                          bIsGamepadBeingUsed_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI, bIsGamepadBeingUsed_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetCurrentInputDeviceUI::bIsGamepadBeingUsed_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.OnMouseMove
// 0x0230 (0x0230 - 0x0000)
struct GlobalInteractableUserWidget_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetCursorDelta_ReturnValue;  // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize2D_ReturnValue;                      // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x0170(0x00B8)()
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_OnMouseMove) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_OnMouseMove");
static_assert(sizeof(GlobalInteractableUserWidget_C_OnMouseMove) == 0x000230, "Wrong size on GlobalInteractableUserWidget_C_OnMouseMove");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, ReturnValue) == 0x0000A8, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, CallFunc_PointerEvent_GetCursorDelta_ReturnValue) == 0x000160, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::CallFunc_PointerEvent_GetCursorDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, CallFunc_VSize2D_ReturnValue) == 0x000168, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::CallFunc_VSize2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, CallFunc_Abs_ReturnValue) == 0x00016C, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, K2Node_MakeStruct_EventReply) == 0x000170, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::K2Node_MakeStruct_EventReply' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseMove, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000228, "Member 'GlobalInteractableUserWidget_C_OnMouseMove::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.OnMouseButtonDown
// 0x0280 (0x0280 - 0x0000)
struct GlobalInteractableUserWidget_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   PressedMouseKey;                                   // 0x0160(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0178(0x0018)(HasGetValueTypeHash)
	struct FInputChord                            K2Node_MakeStruct_InputChord;                      // 0x0190(0x0020)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x01BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x01BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1C2[0x6];                                      // 0x01C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x01C8(0x00B8)()
};
static_assert(alignof(GlobalInteractableUserWidget_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_OnMouseButtonDown");
static_assert(sizeof(GlobalInteractableUserWidget_C_OnMouseButtonDown) == 0x000280, "Wrong size on GlobalInteractableUserWidget_C_OnMouseButtonDown");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, PressedMouseKey) == 0x000160, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::PressedMouseKey' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000178, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, K2Node_MakeStruct_InputChord) == 0x000190, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::K2Node_MakeStruct_InputChord' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_Array_Find_ReturnValue) == 0x0001B0, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_Array_Find_ReturnValue_1) == 0x0001B4, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0001B8, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0001B9, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x0001BA, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x0001BB, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_Array_Find_ReturnValue_2) == 0x0001BC, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x0001C0, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x0001C1, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnMouseButtonDown, K2Node_MakeStruct_EventReply) == 0x0001C8, "Member 'GlobalInteractableUserWidget_C_OnMouseButtonDown::K2Node_MakeStruct_EventReply' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetActiveMenu
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_SetActiveMenu final
{
public:
	bool                                          bIsActiveMenu_0;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetActiveMenu) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_SetActiveMenu");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetActiveMenu) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_SetActiveMenu");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetActiveMenu, bIsActiveMenu_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetActiveMenu::bIsActiveMenu_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetIsActiveMenu
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_GetIsActiveMenu final
{
public:
	bool                                          bIsActiveMenu_0;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetIsActiveMenu) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_GetIsActiveMenu");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetIsActiveMenu) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_GetIsActiveMenu");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetIsActiveMenu, bIsActiveMenu_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetIsActiveMenu::bIsActiveMenu_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.OnKeyDown
// 0x0278 (0x0278 - 0x0000)
struct GlobalInteractableUserWidget_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKeyEvent                              KeyEvent;                                          // 0x0128(0x0038)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_3;            // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_4;                 // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_5;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_4;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_5;            // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_4;          // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_5;          // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_6;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_7;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_6;            // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_7;            // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_6;          // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_7;          // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0190(0x0018)(HasGetValueTypeHash)
	struct FKey                                   CallFunc_GetKey_ReturnValue_1;                     // 0x01A8(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x01C0(0x00B8)()
};
static_assert(alignof(GlobalInteractableUserWidget_C_OnKeyDown) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_OnKeyDown");
static_assert(sizeof(GlobalInteractableUserWidget_C_OnKeyDown) == 0x000278, "Wrong size on GlobalInteractableUserWidget_C_OnKeyDown");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, ReturnValue) == 0x000070, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, KeyEvent) == 0x000128, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::KeyEvent' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue) == 0x000160, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_1) == 0x000164, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000168, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000169, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x00016A, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x00016B, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_2) == 0x00016C, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_3) == 0x000170, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000174, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_3) == 0x000175, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x000176, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x000177, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_4) == 0x000178, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_5) == 0x00017C, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_4) == 0x000180, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_5) == 0x000181, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_4) == 0x000182, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_5) == 0x000183, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_6) == 0x000184, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_Array_Find_ReturnValue_7) == 0x000188, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_Array_Find_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_6) == 0x00018C, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_NotEqual_IntInt_ReturnValue_7) == 0x00018D, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_NotEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_6) == 0x00018E, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_EqualEqual_KeyKey_ReturnValue_7) == 0x00018F, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_EqualEqual_KeyKey_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_GetKey_ReturnValue) == 0x000190, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, CallFunc_GetKey_ReturnValue_1) == 0x0001A8, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::CallFunc_GetKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyDown, K2Node_MakeStruct_EventReply) == 0x0001C0, "Member 'GlobalInteractableUserWidget_C_OnKeyDown::K2Node_MakeStruct_EventReply' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetAllowNavigation
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_SetAllowNavigation final
{
public:
	bool                                          bAllowNavigation_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetAllowNavigation) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_SetAllowNavigation");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetAllowNavigation) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_SetAllowNavigation");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetAllowNavigation, bAllowNavigation_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetAllowNavigation::bAllowNavigation_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetAllowNavigation
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_GetAllowNavigation final
{
public:
	bool                                          bAllowNavigation_0;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetAllowNavigation) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_GetAllowNavigation");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetAllowNavigation) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_GetAllowNavigation");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetAllowNavigation, bAllowNavigation_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetAllowNavigation::bAllowNavigation_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.OnKeyUp
// 0x03D0 (0x03D0 - 0x0000)
struct GlobalInteractableUserWidget_C_OnKeyUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0070(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKeyEvent                              KeyEvent;                                          // 0x0128(0x0038)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_3;            // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_2;          // 0x0176(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_3;          // 0x0177(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_4;                 // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_5;                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_4;            // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_5;            // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_4;          // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_5;          // 0x0183(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Find_ReturnValue_6;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_7;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_6;            // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_7;            // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_6;          // 0x018E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_7;          // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FKey                                   CallFunc_GetKey_ReturnValue;                       // 0x0190(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_8;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_8;          // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_8;            // 0x01AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1AE[0x2];                                      // 0x01AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            K2Node_MakeStruct_EventReply;                      // 0x01B0(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue_1;                     // 0x0268(0x0018)(HasGetValueTypeHash)
	struct FKey                                   CallFunc_GetKey_ReturnValue_2;                     // 0x0280(0x0018)(HasGetValueTypeHash)
	struct FKey                                   CallFunc_GetKey_ReturnValue_3;                     // 0x0298(0x0018)(HasGetValueTypeHash)
	struct FKey                                   CallFunc_GetKey_ReturnValue_4;                     // 0x02B0(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_9;                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_10;                // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_9;            // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_10;           // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_9;          // 0x02D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_10;         // 0x02D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CallFunc_GetKey_ReturnValue_5;                     // 0x02D8(0x0018)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_11;                // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_11;         // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_11;           // 0x02F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsActiveMenu_bIsActiveMenu;            // 0x02F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F7[0x1];                                      // 0x02F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            K2Node_MakeStruct_EventReply_1;                    // 0x02F8(0x00B8)()
	struct FKey                                   CallFunc_GetKey_ReturnValue_6;                     // 0x03B0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsValid_ReturnValue;                  // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_OnKeyUp) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_OnKeyUp");
static_assert(sizeof(GlobalInteractableUserWidget_C_OnKeyUp) == 0x0003D0, "Wrong size on GlobalInteractableUserWidget_C_OnKeyUp");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, MyGeometry) == 0x000000, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, InKeyEvent) == 0x000038, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::InKeyEvent' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, ReturnValue) == 0x000070, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, KeyEvent) == 0x000128, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::KeyEvent' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue) == 0x000160, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_1) == 0x000164, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000168, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000169, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x00016A, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x00016B, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_2) == 0x00016C, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_3) == 0x000170, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000174, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_3) == 0x000175, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_2) == 0x000176, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_3) == 0x000177, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_4) == 0x000178, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_5) == 0x00017C, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_4) == 0x000180, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_5) == 0x000181, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_4) == 0x000182, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_5) == 0x000183, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_6) == 0x000184, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_7) == 0x000188, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_6) == 0x00018C, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_7) == 0x00018D, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_6) == 0x00018E, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_7) == 0x00018F, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue) == 0x000190, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_8) == 0x0001A8, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_8) == 0x0001AC, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_8) == 0x0001AD, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, K2Node_MakeStruct_EventReply) == 0x0001B0, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::K2Node_MakeStruct_EventReply' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue_1) == 0x000268, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue_2) == 0x000280, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue_3) == 0x000298, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue_4) == 0x0002B0, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_9) == 0x0002C8, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_10) == 0x0002CC, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_9) == 0x0002D0, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_10) == 0x0002D1, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_9) == 0x0002D2, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_10) == 0x0002D3, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue_5) == 0x0002D8, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Array_Find_ReturnValue_11) == 0x0002F0, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Array_Find_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_EqualEqual_KeyKey_ReturnValue_11) == 0x0002F4, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_EqualEqual_KeyKey_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_NotEqual_IntInt_ReturnValue_11) == 0x0002F5, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_NotEqual_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetIsActiveMenu_bIsActiveMenu) == 0x0002F6, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetIsActiveMenu_bIsActiveMenu' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, K2Node_MakeStruct_EventReply_1) == 0x0002F8, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::K2Node_MakeStruct_EventReply_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_GetKey_ReturnValue_6) == 0x0003B0, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_GetKey_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_Key_IsValid_ReturnValue) == 0x0003C8, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_Key_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_OnKeyUp, CallFunc_BooleanAND_ReturnValue) == 0x0003C9, "Member 'GlobalInteractableUserWidget_C_OnKeyUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetIsMenu
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_SetIsMenu final
{
public:
	bool                                          bIsMenu_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetIsMenu) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_SetIsMenu");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetIsMenu) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_SetIsMenu");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsMenu, bIsMenu_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetIsMenu::bIsMenu_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetIsMenu
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_GetIsMenu final
{
public:
	bool                                          bIsMenu_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetIsMenu) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_GetIsMenu");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetIsMenu) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_GetIsMenu");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetIsMenu, bIsMenu_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetIsMenu::bIsMenu_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.GetIsGamepadBeingUsed
// 0x0001 (0x0001 - 0x0000)
struct GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed final
{
public:
	bool                                          bIsGamepadBeingUsed_0;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed) == 0x000001, "Wrong alignment on GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed");
static_assert(sizeof(GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed) == 0x000001, "Wrong size on GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed");
static_assert(offsetof(GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed, bIsGamepadBeingUsed_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_GetIsGamepadBeingUsed::bIsGamepadBeingUsed_0' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetGlobalSettingsFonts
// 0x01B8 (0x01B8 - 0x0000)
struct GlobalInteractableUserWidget_C_SetGlobalSettingsFonts final
{
public:
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0000(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_1;                 // 0x0058(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_2;                 // 0x00B0(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_3;                 // 0x0108(0x0058)(HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo_4;                 // 0x0160(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_SetGlobalSettingsFonts");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts) == 0x0001B8, "Wrong size on GlobalInteractableUserWidget_C_SetGlobalSettingsFonts");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts, K2Node_MakeStruct_SlateFontInfo) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsFonts::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts, K2Node_MakeStruct_SlateFontInfo_1) == 0x000058, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsFonts::K2Node_MakeStruct_SlateFontInfo_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts, K2Node_MakeStruct_SlateFontInfo_2) == 0x0000B0, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsFonts::K2Node_MakeStruct_SlateFontInfo_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts, K2Node_MakeStruct_SlateFontInfo_3) == 0x000108, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsFonts::K2Node_MakeStruct_SlateFontInfo_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsFonts, K2Node_MakeStruct_SlateFontInfo_4) == 0x000160, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsFonts::K2Node_MakeStruct_SlateFontInfo_4' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetGlobalSettingsMenuKeybindings
// 0x0080 (0x0080 - 0x0000)
struct GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings final
{
public:
	TArray<struct FKey>                           K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_1;                          // 0x0010(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_2;                          // 0x0020(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_3;                          // 0x0030(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_4;                          // 0x0040(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_5;                          // 0x0050(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_6;                          // 0x0060(0x0010)(ReferenceParm)
	TArray<struct FKey>                           K2Node_MakeArray_Array_7;                          // 0x0070(0x0010)(ReferenceParm)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings) == 0x000080, "Wrong size on GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_1) == 0x000010, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_2) == 0x000020, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_3) == 0x000030, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_4) == 0x000040, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_5) == 0x000050, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_6) == 0x000060, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings, K2Node_MakeArray_Array_7) == 0x000070, "Member 'GlobalInteractableUserWidget_C_SetGlobalSettingsMenuKeybindings::K2Node_MakeArray_Array_7' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.SetIsGamepadBeingUsed
// 0x0028 (0x0028 - 0x0000)
struct GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed final
{
public:
	bool                                          bIsGamepadBeingUsed_0;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationX;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMousePosition_LocationY;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetMousePosition_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed");
static_assert(sizeof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed) == 0x000028, "Wrong size on GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, bIsGamepadBeingUsed_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::bIsGamepadBeingUsed_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, CallFunc_GetMousePosition_LocationX) == 0x000010, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::CallFunc_GetMousePosition_LocationX' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, CallFunc_GetMousePosition_LocationY) == 0x000014, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::CallFunc_GetMousePosition_LocationY' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, CallFunc_GetMousePosition_ReturnValue) == 0x000018, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::CallFunc_GetMousePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, CallFunc_FTrunc_ReturnValue) == 0x00001C, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed, CallFunc_FTrunc_ReturnValue_1) == 0x000020, "Member 'GlobalInteractableUserWidget_C_SetIsGamepadBeingUsed::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");

// Function GlobalInteractableUserWidget.GlobalInteractableUserWidget_C.DelayAnimation
// 0x0020 (0x0020 - 0x0000)
struct GlobalInteractableUserWidget_C_DelayAnimation final
{
public:
	class UWidgetAnimation*                       DelayAnimation_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             Delegate;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlobalInteractableUserWidget_C_DelayAnimation) == 0x000008, "Wrong alignment on GlobalInteractableUserWidget_C_DelayAnimation");
static_assert(sizeof(GlobalInteractableUserWidget_C_DelayAnimation) == 0x000020, "Wrong size on GlobalInteractableUserWidget_C_DelayAnimation");
static_assert(offsetof(GlobalInteractableUserWidget_C_DelayAnimation, DelayAnimation_0) == 0x000000, "Member 'GlobalInteractableUserWidget_C_DelayAnimation::DelayAnimation_0' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_DelayAnimation, Delegate) == 0x000008, "Member 'GlobalInteractableUserWidget_C_DelayAnimation::Delegate' has a wrong offset!");
static_assert(offsetof(GlobalInteractableUserWidget_C_DelayAnimation, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'GlobalInteractableUserWidget_C_DelayAnimation::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

}

