#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlobalInteractableUserWidget

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass GlobalInteractableUserWidget.GlobalInteractableUserWidget_C
// 0x0398 (0x05F8 - 0x0260)
class UGlobalInteractableUserWidget_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       DelayAnimation500ms;                               // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation100ms;                               // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation300ms;                               // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation1000ms;                              // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation200ms;                               // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DelayAnimation70ms;                                // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainColor;                                         // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightColor;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         MainFont;                                          // 0x02B8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         SmallTitleFont;                                    // 0x0310(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class USoundCue*                              SelectSound;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              BackSound;                                         // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              HoverSound;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              ChangeSound;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              SliderSound;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HighlightExtraColor;                               // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         MediumTitleFont;                                   // 0x03A0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         LargeTitleFont;                                    // 0x03F8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSlateFontInfo                         ValueFont;                                         // 0x0450(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          OnlyUppercase;                                     // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MenuBackgroundColor;                               // 0x04AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WidgetBackgroundColor;                             // 0x04BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SymbolColor;                                       // 0x04CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              BackgroundMusic;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsGamepadBeingUsed;                               // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangeInputDeviceUI;                             // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsMenu;                                           // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsActiveMenu;                                     // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_502[0x6];                                      // 0x0502(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FKey>                           KeybindingsUp;                                     // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsDown;                                   // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsLeft;                                   // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsRight;                                  // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsSelect;                                 // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsBack;                                   // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bAllowNavigation;                                  // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsNavigationCooledDown;                           // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_56A[0x6];                                      // 0x056A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   PressedKey;                                        // 0x0570(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPlayFadeAnimations;                               // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_589[0x3];                                      // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayFadeAnimationLength;                           // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SubtleColor;                                       // 0x0590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FKey>                           KeybindingsReset;                                  // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FKey>                           KeybindingsExtra;                                  // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIntroLogosSkippable;                              // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C1[0x3];                                      // 0x05C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DecisionButtonColor;                               // 0x05C4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SliderBackgroundColor;                             // 0x05D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              CreditsMusic;                                      // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSelectCooledDown;                                // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBackCooledDown;                                  // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsResetCooledDown;                                 // 0x05F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsExtraCooledDown;                                 // 0x05F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIntroEnabled;                                     // 0x05F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnChangeInputDeviceUI__DelegateSignature(bool bIsGamepadBeingUsed_0);
	void ExecuteUbergraph_GlobalInteractableUserWidget(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnNavigationCooldownStart();
	void OnPressedExtra();
	void OnPressedReset();
	void OnPressedBack();
	void OnPressedSelect();
	void OnPressedLeft();
	void OnPressedRight();
	void OnPressedDown();
	void OnPressedUp();
	void OnGlobalSettingsApply();
	void OnPressedAnyKey();
	void SetTextAppearence(class UTextBlock* TextObject, const struct FSlateFontInfo& Font, const struct FLinearColor& Color);
	void SetEditableTextAppearence(class UEditableText* EditableText, const struct FSlateFontInfo& Font, const struct FLinearColor& Color);
	void GetGlobalGeneralData(bool* bPlayFadeAnimations_0, float* PlayFadeAnimationLength_0, bool* bIntroLogosSkippable_0, bool* bIntroEnabled_0);
	void GetGlobalFonts(struct FSlateFontInfo* MainFont_0, struct FSlateFontInfo* SmallTitleFont_0, struct FSlateFontInfo* MediumTitleFont_0, struct FSlateFontInfo* LargeTitleFont_0, struct FSlateFontInfo* ValueFont_0, bool* OnlyUppercase_0);
	void GetGlobalSounds(class USoundCue** SelectSound_0, class USoundCue** BackSound_0, class USoundCue** HoverSound_0, class USoundCue** ChangeSound_0, class USoundCue** SliderSound_0, class USoundCue** BackgroundMusic_0, class USoundCue** CreditsMusic_0);
	void GetGlobalColors(struct FLinearColor* MainColor_0, struct FLinearColor* HighlightColor_0, struct FLinearColor* HighlightExtraColor_0, struct FLinearColor* MenuBackgroundColor_0, struct FLinearColor* WidgetBackgroundColor_0, struct FLinearColor* SymbolColor_0, struct FLinearColor* SubtleColor_0, struct FLinearColor* DecisionButtonColor_0, struct FLinearColor* SliderBackgroundColor_0);
	void SetGlobalVariableValues();
	void SetCurrentInputDeviceUI(const struct FKey& InKey, bool bIsMouseInput);
	void GetCurrentInputDeviceUI(bool* bIsGamepadBeingUsed_0);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void SetActiveMenu(bool bIsActiveMenu_0);
	void GetIsActiveMenu(bool* bIsActiveMenu_0);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void SetAllowNavigation(bool bAllowNavigation_0);
	void GetAllowNavigation(bool* bAllowNavigation_0);
	struct FEventReply OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void SetIsMenu(bool bIsMenu_0);
	void GetIsMenu(bool* bIsMenu_0);
	void GetIsGamepadBeingUsed(bool* bIsGamepadBeingUsed_0);
	void SetGlobalSettingsGeneral();
	void SetGlobalSettingsColors();
	void SetGlobalSettingsSounds();
	void SetGlobalSettingsFonts();
	void SetGlobalSettingsMenuKeybindings();
	void SetIsGamepadBeingUsed(bool bIsGamepadBeingUsed_0);
	void DelayAnimation(class UWidgetAnimation* DelayAnimation_0, TDelegate<void()> Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GlobalInteractableUserWidget_C">();
	}
	static class UGlobalInteractableUserWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalInteractableUserWidget_C>();
	}
};
static_assert(alignof(UGlobalInteractableUserWidget_C) == 0x000008, "Wrong alignment on UGlobalInteractableUserWidget_C");
static_assert(sizeof(UGlobalInteractableUserWidget_C) == 0x0005F8, "Wrong size on UGlobalInteractableUserWidget_C");
static_assert(offsetof(UGlobalInteractableUserWidget_C, UberGraphFrame) == 0x000260, "Member 'UGlobalInteractableUserWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation500ms) == 0x000268, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation500ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation100ms) == 0x000270, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation100ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation300ms) == 0x000278, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation300ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation1000ms) == 0x000280, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation1000ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation200ms) == 0x000288, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation200ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DelayAnimation70ms) == 0x000290, "Member 'UGlobalInteractableUserWidget_C::DelayAnimation70ms' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MainColor) == 0x000298, "Member 'UGlobalInteractableUserWidget_C::MainColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, HighlightColor) == 0x0002A8, "Member 'UGlobalInteractableUserWidget_C::HighlightColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MainFont) == 0x0002B8, "Member 'UGlobalInteractableUserWidget_C::MainFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SmallTitleFont) == 0x000310, "Member 'UGlobalInteractableUserWidget_C::SmallTitleFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SelectSound) == 0x000368, "Member 'UGlobalInteractableUserWidget_C::SelectSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, BackSound) == 0x000370, "Member 'UGlobalInteractableUserWidget_C::BackSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, HoverSound) == 0x000378, "Member 'UGlobalInteractableUserWidget_C::HoverSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, ChangeSound) == 0x000380, "Member 'UGlobalInteractableUserWidget_C::ChangeSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SliderSound) == 0x000388, "Member 'UGlobalInteractableUserWidget_C::SliderSound' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, HighlightExtraColor) == 0x000390, "Member 'UGlobalInteractableUserWidget_C::HighlightExtraColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MediumTitleFont) == 0x0003A0, "Member 'UGlobalInteractableUserWidget_C::MediumTitleFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, LargeTitleFont) == 0x0003F8, "Member 'UGlobalInteractableUserWidget_C::LargeTitleFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, ValueFont) == 0x000450, "Member 'UGlobalInteractableUserWidget_C::ValueFont' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, OnlyUppercase) == 0x0004A8, "Member 'UGlobalInteractableUserWidget_C::OnlyUppercase' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, MenuBackgroundColor) == 0x0004AC, "Member 'UGlobalInteractableUserWidget_C::MenuBackgroundColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, WidgetBackgroundColor) == 0x0004BC, "Member 'UGlobalInteractableUserWidget_C::WidgetBackgroundColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SymbolColor) == 0x0004CC, "Member 'UGlobalInteractableUserWidget_C::SymbolColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, BackgroundMusic) == 0x0004E0, "Member 'UGlobalInteractableUserWidget_C::BackgroundMusic' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsGamepadBeingUsed) == 0x0004E8, "Member 'UGlobalInteractableUserWidget_C::bIsGamepadBeingUsed' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, OnChangeInputDeviceUI) == 0x0004F0, "Member 'UGlobalInteractableUserWidget_C::OnChangeInputDeviceUI' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsMenu) == 0x000500, "Member 'UGlobalInteractableUserWidget_C::bIsMenu' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsActiveMenu) == 0x000501, "Member 'UGlobalInteractableUserWidget_C::bIsActiveMenu' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsUp) == 0x000508, "Member 'UGlobalInteractableUserWidget_C::KeybindingsUp' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsDown) == 0x000518, "Member 'UGlobalInteractableUserWidget_C::KeybindingsDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsLeft) == 0x000528, "Member 'UGlobalInteractableUserWidget_C::KeybindingsLeft' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsRight) == 0x000538, "Member 'UGlobalInteractableUserWidget_C::KeybindingsRight' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsSelect) == 0x000548, "Member 'UGlobalInteractableUserWidget_C::KeybindingsSelect' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsBack) == 0x000558, "Member 'UGlobalInteractableUserWidget_C::KeybindingsBack' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bAllowNavigation) == 0x000568, "Member 'UGlobalInteractableUserWidget_C::bAllowNavigation' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIsNavigationCooledDown) == 0x000569, "Member 'UGlobalInteractableUserWidget_C::bIsNavigationCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, PressedKey) == 0x000570, "Member 'UGlobalInteractableUserWidget_C::PressedKey' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bPlayFadeAnimations) == 0x000588, "Member 'UGlobalInteractableUserWidget_C::bPlayFadeAnimations' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, PlayFadeAnimationLength) == 0x00058C, "Member 'UGlobalInteractableUserWidget_C::PlayFadeAnimationLength' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SubtleColor) == 0x000590, "Member 'UGlobalInteractableUserWidget_C::SubtleColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsReset) == 0x0005A0, "Member 'UGlobalInteractableUserWidget_C::KeybindingsReset' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, KeybindingsExtra) == 0x0005B0, "Member 'UGlobalInteractableUserWidget_C::KeybindingsExtra' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIntroLogosSkippable) == 0x0005C0, "Member 'UGlobalInteractableUserWidget_C::bIntroLogosSkippable' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, DecisionButtonColor) == 0x0005C4, "Member 'UGlobalInteractableUserWidget_C::DecisionButtonColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, SliderBackgroundColor) == 0x0005D4, "Member 'UGlobalInteractableUserWidget_C::SliderBackgroundColor' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, CreditsMusic) == 0x0005E8, "Member 'UGlobalInteractableUserWidget_C::CreditsMusic' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsSelectCooledDown) == 0x0005F0, "Member 'UGlobalInteractableUserWidget_C::IsSelectCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsBackCooledDown) == 0x0005F1, "Member 'UGlobalInteractableUserWidget_C::IsBackCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsResetCooledDown) == 0x0005F2, "Member 'UGlobalInteractableUserWidget_C::IsResetCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, IsExtraCooledDown) == 0x0005F3, "Member 'UGlobalInteractableUserWidget_C::IsExtraCooledDown' has a wrong offset!");
static_assert(offsetof(UGlobalInteractableUserWidget_C, bIntroEnabled) == 0x0005F4, "Member 'UGlobalInteractableUserWidget_C::bIntroEnabled' has a wrong offset!");

}

