#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChickEggFire_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ChickEggFire_BP.ChickEggFire_BP_C
// 0x0038 (0x0258 - 0x0220)
class AChickEggFire_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMeshComponent0;                            // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Fire_loop_;                                        // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NewVar_0;                                          // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Min;                                               // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max;                                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ChickEggFire_BP(int32 EntryPoint);
	void BndEvt__ChickEggFire_BP_SkeletalMesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Fire_Stop();
	void Fire_Loop();
	void Fire();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChickEggFire_BP_C">();
	}
	static class AChickEggFire_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChickEggFire_BP_C>();
	}
};
static_assert(alignof(AChickEggFire_BP_C) == 0x000008, "Wrong alignment on AChickEggFire_BP_C");
static_assert(sizeof(AChickEggFire_BP_C) == 0x000258, "Wrong size on AChickEggFire_BP_C");
static_assert(offsetof(AChickEggFire_BP_C, UberGraphFrame) == 0x000220, "Member 'AChickEggFire_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, Arrow) == 0x000228, "Member 'AChickEggFire_BP_C::Arrow' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, SkeletalMesh) == 0x000230, "Member 'AChickEggFire_BP_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, Sphere) == 0x000238, "Member 'AChickEggFire_BP_C::Sphere' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, SkeletalMeshComponent0) == 0x000240, "Member 'AChickEggFire_BP_C::SkeletalMeshComponent0' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, Fire_loop_) == 0x000248, "Member 'AChickEggFire_BP_C::Fire_loop_' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, NewVar_0) == 0x000249, "Member 'AChickEggFire_BP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, Min) == 0x00024C, "Member 'AChickEggFire_BP_C::Min' has a wrong offset!");
static_assert(offsetof(AChickEggFire_BP_C, Max) == 0x000250, "Member 'AChickEggFire_BP_C::Max' has a wrong offset!");

}

