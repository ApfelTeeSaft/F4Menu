#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SA01_SwingTrap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SA01_SwingTrap.BP_SA01_SwingTrap_C
// 0x00A8 (0x02C8 - 0x0220)
class ABP_SA01_SwingTrap_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Four__4___Cue;                                     // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_GDC2012_Throne_Interior_Chain_04_Holder;        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          InstancedBarMesh;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BarPivot;                                          // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TrapHead;                                          // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HeadPivot;                                         // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCableComponent*                        Cable;                                             // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         PendulumMovement_NewPolar_3E54E1904E7A321C0A971F83FBD845D7; // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	ETimelineDirection                            PendulumMovement__Direction_3E54E1904E7A321C0A971F83FBD845D7; // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PendulumMovement;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         PendulumPlayRate;                                  // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWire;                                           // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BarLength;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingPolarAngle;                                // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingAzimuthalAngle;                            // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PolarAngle;                                        // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AzimuthalAngle;                                    // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPassThru;                                       // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollSphereRadius;                                  // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForceAppliedOnImpact;                              // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            TrapHeadOverride;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     TrapHeadMaterialOverride;                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TrapHeadRotation;                                  // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                TrapHeadScale;                                     // 0x02BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SA01_SwingTrap(int32 EntryPoint);
	void Stop();
	void Active();
	void ReceiveBeginPlay();
	void PendulumMovement__SoundEvent_01__EventFunc();
	void PendulumMovement__SoundEvent_02__EventFunc();
	void PendulumMovement__UpdateFunc();
	void PendulumMovement__FinishedFunc();
	void UserConstructionScript();
	void SphericalToCartesianCoordinates(float R, float Polar, float Azimuthal, struct FVector* NewCartesianCoord);
	void TrapHeadMatOverride(class UMaterialInterface* Material);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SA01_SwingTrap_C">();
	}
	static class ABP_SA01_SwingTrap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SA01_SwingTrap_C>();
	}
};
static_assert(alignof(ABP_SA01_SwingTrap_C) == 0x000008, "Wrong alignment on ABP_SA01_SwingTrap_C");
static_assert(sizeof(ABP_SA01_SwingTrap_C) == 0x0002C8, "Wrong size on ABP_SA01_SwingTrap_C");
static_assert(offsetof(ABP_SA01_SwingTrap_C, UberGraphFrame) == 0x000220, "Member 'ABP_SA01_SwingTrap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, Four__4___Cue) == 0x000228, "Member 'ABP_SA01_SwingTrap_C::Four__4___Cue' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, SM_GDC2012_Throne_Interior_Chain_04_Holder) == 0x000230, "Member 'ABP_SA01_SwingTrap_C::SM_GDC2012_Throne_Interior_Chain_04_Holder' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, InstancedBarMesh) == 0x000238, "Member 'ABP_SA01_SwingTrap_C::InstancedBarMesh' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, BarPivot) == 0x000240, "Member 'ABP_SA01_SwingTrap_C::BarPivot' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, TrapHead) == 0x000248, "Member 'ABP_SA01_SwingTrap_C::TrapHead' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, HeadPivot) == 0x000250, "Member 'ABP_SA01_SwingTrap_C::HeadPivot' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, Cable) == 0x000258, "Member 'ABP_SA01_SwingTrap_C::Cable' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, DefaultSceneRoot) == 0x000260, "Member 'ABP_SA01_SwingTrap_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, PendulumMovement_NewPolar_3E54E1904E7A321C0A971F83FBD845D7) == 0x000268, "Member 'ABP_SA01_SwingTrap_C::PendulumMovement_NewPolar_3E54E1904E7A321C0A971F83FBD845D7' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, PendulumMovement__Direction_3E54E1904E7A321C0A971F83FBD845D7) == 0x00026C, "Member 'ABP_SA01_SwingTrap_C::PendulumMovement__Direction_3E54E1904E7A321C0A971F83FBD845D7' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, PendulumMovement) == 0x000270, "Member 'ABP_SA01_SwingTrap_C::PendulumMovement' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, PendulumPlayRate) == 0x000278, "Member 'ABP_SA01_SwingTrap_C::PendulumPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, UseWire) == 0x00027C, "Member 'ABP_SA01_SwingTrap_C::UseWire' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, BarLength) == 0x000280, "Member 'ABP_SA01_SwingTrap_C::BarLength' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, StartingPolarAngle) == 0x000284, "Member 'ABP_SA01_SwingTrap_C::StartingPolarAngle' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, StartingAzimuthalAngle) == 0x000288, "Member 'ABP_SA01_SwingTrap_C::StartingAzimuthalAngle' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, PolarAngle) == 0x00028C, "Member 'ABP_SA01_SwingTrap_C::PolarAngle' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, AzimuthalAngle) == 0x000290, "Member 'ABP_SA01_SwingTrap_C::AzimuthalAngle' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, CanPassThru) == 0x000294, "Member 'ABP_SA01_SwingTrap_C::CanPassThru' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, CollSphereRadius) == 0x000298, "Member 'ABP_SA01_SwingTrap_C::CollSphereRadius' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, ForceAppliedOnImpact) == 0x00029C, "Member 'ABP_SA01_SwingTrap_C::ForceAppliedOnImpact' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, TrapHeadOverride) == 0x0002A0, "Member 'ABP_SA01_SwingTrap_C::TrapHeadOverride' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, TrapHeadMaterialOverride) == 0x0002A8, "Member 'ABP_SA01_SwingTrap_C::TrapHeadMaterialOverride' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, TrapHeadRotation) == 0x0002B0, "Member 'ABP_SA01_SwingTrap_C::TrapHeadRotation' has a wrong offset!");
static_assert(offsetof(ABP_SA01_SwingTrap_C, TrapHeadScale) == 0x0002BC, "Member 'ABP_SA01_SwingTrap_C::TrapHeadScale' has a wrong offset!");

}

