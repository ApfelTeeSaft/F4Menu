#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DynamicNode

#include "Basic.hpp"

#include "DynamicNode_classes.hpp"
#include "DynamicNode_parameters.hpp"


namespace SDK
{

// Function DynamicNode.AnimTransitionSet_DN.SetManuallyNextTransitionAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FTransitionSetData_DN            NextTransitionAnimation                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UAnimTransitionSet_DN::SetManuallyNextTransitionAnimation(const struct FTransitionSetData_DN& NextTransitionAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimTransitionSet_DN", "SetManuallyNextTransitionAnimation");

	Params::AnimTransitionSet_DN_SetManuallyNextTransitionAnimation Parms{};

	Parms.NextTransitionAnimation = std::move(NextTransitionAnimation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimChanceSet_DN.ClearNextIndex
// (Final, Native, Public, BlueprintCallable)

void UAnimChanceSet_DN::ClearNextIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "ClearNextIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimChanceSet_DN.GetDefaultAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimationAsset* UAnimChanceSet_DN::GetDefaultAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "GetDefaultAnimation");

	Params::AnimChanceSet_DN_GetDefaultAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimChanceSet_DN.OnRep_NextAnimationClient
// (Native, Public)

void UAnimChanceSet_DN::OnRep_NextAnimationClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "OnRep_NextAnimationClient");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimChanceSet_DN.RemoveParentAsset
// (Final, Native, Public, BlueprintCallable)

void UAnimChanceSet_DN::RemoveParentAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "RemoveParentAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimChanceSet_DN.SetNextAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*                  AnimSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanChangeAnimInRuntimeOutOverride                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimChanceSet_DN::SetNextAnimation(class UAnimationAsset* AnimSequence, bool CanChangeAnimInRuntimeOutOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "SetNextAnimation");

	Params::AnimChanceSet_DN_SetNextAnimation Parms{};

	Parms.AnimSequence = AnimSequence;
	Parms.CanChangeAnimInRuntimeOutOverride = CanChangeAnimInRuntimeOutOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimChanceSet_DN.SetNextIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanChangeAnimInRuntimeOutOverride                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimChanceSet_DN::SetNextIndex(int32 Param_Index, bool CanChangeAnimInRuntimeOutOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "SetNextIndex");

	Params::AnimChanceSet_DN_SetNextIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.CanChangeAnimInRuntimeOutOverride = CanChangeAnimInRuntimeOutOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimChanceSet_DN.SetParentAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimChanceSet_DN*                ParentChanceSet                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseParentDataOnlyOnce                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimChanceSet_DN::SetParentAsset(class UAnimChanceSet_DN* ParentChanceSet, bool UseParentDataOnlyOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimChanceSet_DN", "SetParentAsset");

	Params::AnimChanceSet_DN_SetParentAsset Parms{};

	Parms.ParentChanceSet = ParentChanceSet;
	Parms.UseParentDataOnlyOnce = UseParentDataOnlyOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.DebugFloatInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DebugVelue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::DebugFloatInput(float DebugVelue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "DebugFloatInput");

	Params::AnimMultiNodeInstance_DN_DebugFloatInput Parms{};

	Parms.DebugVelue = DebugVelue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.EquipThingCallBack
// (Final, Native, Protected)
// Parameters:
// uint8                                   StackPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                LinkedSequence                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EndOfTrack                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::EquipThingCallBack(uint8 StackPriority, class FName BoneName, class FName NotifyName, const class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "EquipThingCallBack");

	Params::AnimMultiNodeInstance_DN_EquipThingCallBack Parms{};

	Parms.StackPriority = StackPriority;
	Parms.BoneName = BoneName;
	Parms.NotifyName = NotifyName;
	Parms.LinkedSequence = LinkedSequence;
	Parms.EndOfTrack = EndOfTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.GetBlendSpaceInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          InBlendInput                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceGet2Multi                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::GetBlendSpaceInput(struct FVector* InBlendInput, class FName BoneName, bool GetTarget, bool ForceGet2Multi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "GetBlendSpaceInput");

	Params::AnimMultiNodeInstance_DN_GetBlendSpaceInput Parms{};

	Parms.BoneName = BoneName;
	Parms.GetTarget = GetTarget;
	Parms.ForceGet2Multi = ForceGet2Multi;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InBlendInput != nullptr)
		*InBlendInput = std::move(Parms.InBlendInput);
}


// Function DynamicNode.AnimMultiNodeInstance_DN.GetLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAnimMultiNodeInstance_DN::GetLength(class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "GetLength");

	Params::AnimMultiNodeInstance_DN_GetLength Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.ImpactHandleCallBack
// (Final, Native, Protected)
// Parameters:
// uint8                                   StackPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                LinkedSequence                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EndOfTrack                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::ImpactHandleCallBack(uint8 StackPriority, class FName BoneName, class FName NotifyName, const class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "ImpactHandleCallBack");

	Params::AnimMultiNodeInstance_DN_ImpactHandleCallBack Parms{};

	Parms.StackPriority = StackPriority;
	Parms.BoneName = BoneName;
	Parms.NotifyName = NotifyName;
	Parms.LinkedSequence = LinkedSequence;
	Parms.EndOfTrack = EndOfTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.MultiTransitionToMontageFromCurPose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromSection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CheckSameAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSyncGroups                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimMultiNodeInstance_DN::MultiTransitionToMontageFromCurPose(class UAnimMontage* AnimationAsset, float TransitionTime, bool bIsLooping, float InPlayRate, class FName PlayFromSection, float StartingPosition, bool CheckSameAsset, bool UseSyncGroups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "MultiTransitionToMontageFromCurPose");

	Params::AnimMultiNodeInstance_DN_MultiTransitionToMontageFromCurPose Parms{};

	Parms.AnimationAsset = AnimationAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.PlayFromSection = PlayFromSection;
	Parms.StartingPosition = StartingPosition;
	Parms.CheckSameAsset = CheckSameAsset;
	Parms.UseSyncGroups = UseSyncGroups;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.PlayAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartPosition                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "PlayAnim");

	Params::AnimMultiNodeInstance_DN_PlayAnim Parms{};

	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.InStartPosition = InStartPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetBlendSpaceInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InBlendInput                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Instantly                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceSetNOTMultiAsset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetBlendSpaceInput(const struct FVector& InBlendInput, class FName BoneName, bool Instantly, bool ForceSetNOTMultiAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetBlendSpaceInput");

	Params::AnimMultiNodeInstance_DN_SetBlendSpaceInput Parms{};

	Parms.InBlendInput = std::move(InBlendInput);
	Parms.BoneName = BoneName;
	Parms.Instantly = Instantly;
	Parms.ForceSetNOTMultiAsset = ForceSetNOTMultiAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetBlendSpaceInputBlendingThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   BlendingThreshold                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetBlendSpaceInputBlendingThreshold(float BlendingThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetBlendSpaceInputBlendingThreshold");

	Params::AnimMultiNodeInstance_DN_SetBlendSpaceInputBlendingThreshold Parms{};

	Parms.BlendingThreshold = BlendingThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetLooping(bool bIsLooping, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetLooping");

	Params::AnimMultiNodeInstance_DN_SetLooping Parms{};

	Parms.bIsLooping = bIsLooping;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsPlaying                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetPlaying(bool bIsPlaying, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetPlaying");

	Params::AnimMultiNodeInstance_DN_SetPlaying Parms{};

	Parms.bIsPlaying = bIsPlaying;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetPlayRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetPlayRate(float InPlayRate, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetPlayRate");

	Params::AnimMultiNodeInstance_DN_SetPlayRate Parms{};

	Parms.InPlayRate = InPlayRate;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFireNotifies                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetPosition(float InPosition, class FName BoneName, bool bFireNotifies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetPosition");

	Params::AnimMultiNodeInstance_DN_SetPosition Parms{};

	Parms.InPosition = InPosition;
	Parms.BoneName = BoneName;
	Parms.bFireNotifies = bFireNotifies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetPositionWithPreviousTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPreviousTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFireNotifies                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetPositionWithPreviousTime(float InPosition, float InPreviousTime, class FName BoneName, bool bFireNotifies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetPositionWithPreviousTime");

	Params::AnimMultiNodeInstance_DN_SetPositionWithPreviousTime Parms{};

	Parms.InPosition = InPosition;
	Parms.InPreviousTime = InPreviousTime;
	Parms.BoneName = BoneName;
	Parms.bFireNotifies = bFireNotifies;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetPreviewCurveOverride
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             PoseName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemoveIfZero                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetPreviewCurveOverride(const class FName& PoseName, float Value, bool bRemoveIfZero)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetPreviewCurveOverride");

	Params::AnimMultiNodeInstance_DN_SetPreviewCurveOverride Parms{};

	Parms.PoseName = PoseName;
	Parms.Value = Value;
	Parms.bRemoveIfZero = bRemoveIfZero;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.SetReverse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInReverse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimMultiNodeInstance_DN::SetReverse(bool bInReverse, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "SetReverse");

	Params::AnimMultiNodeInstance_DN_SetReverse Parms{};

	Parms.bInReverse = bInReverse;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.StopAllAnimation
// (Final, Native, Public, BlueprintCallable)

void UAnimMultiNodeInstance_DN::StopAllAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "StopAllAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.TransitionToAnimFromCurPose_Notify
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*                  ToNewAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTillNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CheckTheSameAsset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimMultiNodeInstance_DN::TransitionToAnimFromCurPose_Notify(class UAnimationAsset* ToNewAsset, class FName PlayFromNotify, class FName PlayTillNotify, float TransitionTime, float InPlayRate, bool CheckTheSameAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "TransitionToAnimFromCurPose_Notify");

	Params::AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_Notify Parms{};

	Parms.ToNewAsset = ToNewAsset;
	Parms.PlayFromNotify = PlayFromNotify;
	Parms.PlayTillNotify = PlayTillNotify;
	Parms.TransitionTime = TransitionTime;
	Parms.InPlayRate = InPlayRate;
	Parms.CheckTheSameAsset = CheckTheSameAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.TransitionToAnimFromCurPose_NotifyTill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*                  ToNewAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartFrom                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTillNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CheckTheSameAsset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimMultiNodeInstance_DN::TransitionToAnimFromCurPose_NotifyTill(class UAnimationAsset* ToNewAsset, float StartFrom, class FName PlayTillNotify, float TransitionTime, float InPlayRate, bool CheckTheSameAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "TransitionToAnimFromCurPose_NotifyTill");

	Params::AnimMultiNodeInstance_DN_TransitionToAnimFromCurPose_NotifyTill Parms{};

	Parms.ToNewAsset = ToNewAsset;
	Parms.StartFrom = StartFrom;
	Parms.PlayTillNotify = PlayTillNotify;
	Parms.TransitionTime = TransitionTime;
	Parms.InPlayRate = InPlayRate;
	Parms.CheckTheSameAsset = CheckTheSameAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimMultiNodeInstance_DN.TransitionToMontageFromCurPose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromSection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CheckSameAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimMultiNodeInstance_DN::TransitionToMontageFromCurPose(class UAnimMontage* AnimationAsset, float TransitionTime, bool bIsLooping, float InPlayRate, class FName PlayFromSection, float StartingPosition, bool CheckSameAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimMultiNodeInstance_DN", "TransitionToMontageFromCurPose");

	Params::AnimMultiNodeInstance_DN_TransitionToMontageFromCurPose Parms{};

	Parms.AnimationAsset = AnimationAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.PlayFromSection = PlayFromSection;
	Parms.StartingPosition = StartingPosition;
	Parms.CheckSameAsset = CheckSameAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimVariationSet_DN.AddLinkedAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimVariationSet_DN*             LinkedVariationSet                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimVariationSet_DN::AddLinkedAsset(class UAnimVariationSet_DN* LinkedVariationSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimVariationSet_DN", "AddLinkedAsset");

	Params::AnimVariationSet_DN_AddLinkedAsset Parms{};

	Parms.LinkedVariationSet = LinkedVariationSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimVariationSet_DN.GetAnimationUsingCurIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimationAsset*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimationAsset* UAnimVariationSet_DN::GetAnimationUsingCurIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimVariationSet_DN", "GetAnimationUsingCurIndex");

	Params::AnimVariationSet_DN_GetAnimationUsingCurIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimVariationSet_DN.InvalidateCurrentIndex
// (Final, Native, Public, BlueprintCallable)

void UAnimVariationSet_DN::InvalidateCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimVariationSet_DN", "InvalidateCurrentIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.AnimVariationSet_DN.IsCurrentIndexValid
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimVariationSet_DN::IsCurrentIndexValid(EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimVariationSet_DN", "IsCurrentIndexValid");

	Params::AnimVariationSet_DN_IsCurrentIndexValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimVariationSet_DN.SetCurrentIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InCurrentIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ChangeAnimInRuntime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RepeatCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimVariationSet_DN::SetCurrentIndex(int32 InCurrentIndex, bool ChangeAnimInRuntime, int32 RepeatCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimVariationSet_DN", "SetCurrentIndex");

	Params::AnimVariationSet_DN_SetCurrentIndex Parms{};

	Parms.InCurrentIndex = InCurrentIndex;
	Parms.ChangeAnimInRuntime = ChangeAnimInRuntime;
	Parms.RepeatCount = RepeatCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AnimVariationSet_DN.SetCurrentIndexOnlyIfCurrentNotValid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InCurrentIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ChangeAnimInRuntime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RepeatCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAnimVariationSet_DN::SetCurrentIndexOnlyIfCurrentNotValid(int32 InCurrentIndex, bool ChangeAnimInRuntime, int32 RepeatCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimVariationSet_DN", "SetCurrentIndexOnlyIfCurrentNotValid");

	Params::AnimVariationSet_DN_SetCurrentIndexOnlyIfCurrentNotValid Parms{};

	Parms.InCurrentIndex = InCurrentIndex;
	Parms.ChangeAnimInRuntime = ChangeAnimInRuntime;
	Parms.RepeatCount = RepeatCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.BlockMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::BlockMovement(bool Enabled, bool bLockRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "BlockMovement");

	Params::DNMovementComponent_BlockMovement Parms{};

	Parms.Enabled = Enabled;
	Parms.bLockRotation = bLockRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.Dive
// (Final, Native, Public, BlueprintCallable)

void UDNMovementComponent::Dive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "Dive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.FindAndAdjustFloor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::FindAndAdjustFloor(float Timer, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "FindAndAdjustFloor");

	Params::DNMovementComponent_FindAndAdjustFloor Parms{};

	Parms.Timer = Timer;
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.GetLastYawDelta
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDNMovementComponent::GetLastYawDelta()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "GetLastYawDelta");

	Params::DNMovementComponent_GetLastYawDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.GetLastYawDeltaAbs
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDNMovementComponent::GetLastYawDeltaAbs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "GetLastYawDeltaAbs");

	Params::DNMovementComponent_GetLastYawDeltaAbs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.GetLastYawDir
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDNMovementComponent::GetLastYawDir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "GetLastYawDir");

	Params::DNMovementComponent_GetLastYawDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.GetSurfaceSwimmingStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::GetSurfaceSwimmingStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "GetSurfaceSwimmingStatus");

	Params::DNMovementComponent_GetSurfaceSwimmingStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.IsSurfaceStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::IsSurfaceStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "IsSurfaceStatus");

	Params::DNMovementComponent_IsSurfaceStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.IsSurfaceSwimming
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::IsSurfaceSwimming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "IsSurfaceSwimming");

	Params::DNMovementComponent_IsSurfaceSwimming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.IsUnderwaterStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::IsUnderwaterStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "IsUnderwaterStatus");

	Params::DNMovementComponent_IsUnderwaterStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.IsUnderwaterSwimming
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::IsUnderwaterSwimming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "IsUnderwaterSwimming");

	Params::DNMovementComponent_IsUnderwaterSwimming Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.RemoveRotationSoft
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         RemoveRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalRotationTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::RemoveRotationSoft(const struct FRotator& RemoveRotation, float TransitionTime, float FinalRotationTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "RemoveRotationSoft");

	Params::DNMovementComponent_RemoveRotationSoft Parms{};

	Parms.RemoveRotation = std::move(RemoveRotation);
	Parms.TransitionTime = TransitionTime;
	Parms.FinalRotationTolerance = FinalRotationTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.ResetDesiredRotation
// (Final, Native, Public, BlueprintCallable)

void UDNMovementComponent::ResetDesiredRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "ResetDesiredRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.RotateUpdatedComponentSoft
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         NewActorRotation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalRotationTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::RotateUpdatedComponentSoft(const struct FRotator& NewActorRotation, float TransitionTime, float FinalRotationTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "RotateUpdatedComponentSoft");

	Params::DNMovementComponent_RotateUpdatedComponentSoft Parms{};

	Parms.NewActorRotation = std::move(NewActorRotation);
	Parms.TransitionTime = TransitionTime;
	Parms.FinalRotationTolerance = FinalRotationTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetAdjustFloorHeightSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetAdjustFloorHeightSpeed(float Timer, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetAdjustFloorHeightSpeed");

	Params::DNMovementComponent_SetAdjustFloorHeightSpeed Parms{};

	Parms.Timer = Timer;
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetDesiredRotationOffset_PropsActor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   LeftMove                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightMove                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool IsCompleted)>       DesiredRotateComplete                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AddOffsetAngle                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AutoResetIfVelocityExceed                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TryToUseTurnInPlace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetDesiredRotationOffset_PropsActor(float LeftMove, float RightMove, const TDelegate<void(bool IsCompleted)>& DesiredRotateComplete, float AddOffsetAngle, float AutoResetIfVelocityExceed, bool TryToUseTurnInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetDesiredRotationOffset_PropsActor");

	Params::DNMovementComponent_SetDesiredRotationOffset_PropsActor Parms{};

	Parms.LeftMove = LeftMove;
	Parms.RightMove = RightMove;
	Parms.DesiredRotateComplete = DesiredRotateComplete;
	Parms.AddOffsetAngle = AddOffsetAngle;
	Parms.AutoResetIfVelocityExceed = AutoResetIfVelocityExceed;
	Parms.TryToUseTurnInPlace = TryToUseTurnInPlace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetDesiredRotationOffsetYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   OffsetYaw                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AutoResetIfVelocityExceed                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TryToUseTurnInPlace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetDesiredRotationOffsetYaw(float OffsetYaw, float AutoResetIfVelocityExceed, bool TryToUseTurnInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetDesiredRotationOffsetYaw");

	Params::DNMovementComponent_SetDesiredRotationOffsetYaw Parms{};

	Parms.OffsetYaw = OffsetYaw;
	Parms.AutoResetIfVelocityExceed = AutoResetIfVelocityExceed;
	Parms.TryToUseTurnInPlace = TryToUseTurnInPlace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetDesiredRotationOffsetYaw_Delegate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   OffsetYaw                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool IsCompleted)>       DesiredRotateComplete                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AutoResetIfVelocityExceed                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TryToUseTurnInPlace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetDesiredRotationOffsetYaw_Delegate(float OffsetYaw, const TDelegate<void(bool IsCompleted)>& DesiredRotateComplete, float AutoResetIfVelocityExceed, bool TryToUseTurnInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetDesiredRotationOffsetYaw_Delegate");

	Params::DNMovementComponent_SetDesiredRotationOffsetYaw_Delegate Parms{};

	Parms.OffsetYaw = OffsetYaw;
	Parms.DesiredRotateComplete = DesiredRotateComplete;
	Parms.AutoResetIfVelocityExceed = AutoResetIfVelocityExceed;
	Parms.TryToUseTurnInPlace = TryToUseTurnInPlace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetDesiredRotationYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DesiredRotationYaw                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AutoResetIfVelocityExceed                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TryToUseTurnInPlace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetDesiredRotationYaw(float DesiredRotationYaw, float AutoResetIfVelocityExceed, bool TryToUseTurnInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetDesiredRotationYaw");

	Params::DNMovementComponent_SetDesiredRotationYaw Parms{};

	Parms.DesiredRotationYaw = DesiredRotationYaw;
	Parms.AutoResetIfVelocityExceed = AutoResetIfVelocityExceed;
	Parms.TryToUseTurnInPlace = TryToUseTurnInPlace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetDesiredRotationYaw_Delegate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   DesiredRotationYaw                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool IsCompleted)>       DesiredRotateComplete                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AutoResetIfVelocityExceed                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TryToUseTurnInPlace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetDesiredRotationYaw_Delegate(float DesiredRotationYaw, const TDelegate<void(bool IsCompleted)>& DesiredRotateComplete, float AutoResetIfVelocityExceed, bool TryToUseTurnInPlace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetDesiredRotationYaw_Delegate");

	Params::DNMovementComponent_SetDesiredRotationYaw_Delegate Parms{};

	Parms.DesiredRotationYaw = DesiredRotationYaw;
	Parms.DesiredRotateComplete = DesiredRotateComplete;
	Parms.AutoResetIfVelocityExceed = AutoResetIfVelocityExceed;
	Parms.TryToUseTurnInPlace = TryToUseTurnInPlace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetMaxWalkSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMovementSpeed                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetMaxWalkSpeed(float NewMovementSpeed, float TransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetMaxWalkSpeed");

	Params::DNMovementComponent_SetMaxWalkSpeed Parms{};

	Parms.NewMovementSpeed = NewMovementSpeed;
	Parms.TransitionTime = TransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetPauseForControllerDesiredRotationSpecifiedAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Pause                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetPauseForControllerDesiredRotationSpecifiedAngle(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetPauseForControllerDesiredRotationSpecifiedAngle");

	Params::DNMovementComponent_SetPauseForControllerDesiredRotationSpecifiedAngle Parms{};

	Parms.Pause = Pause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.SetSurfaceSwimmingStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDNMovementComponent::SetSurfaceSwimmingStatus(bool NewStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "SetSurfaceSwimmingStatus");

	Params::DNMovementComponent_SetSurfaceSwimmingStatus Parms{};

	Parms.NewStatus = NewStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.Surface
// (Final, Native, Public, BlueprintCallable)

void UDNMovementComponent::Surface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "Surface");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNMovementComponent.GetOrientRotationToMovement_Reverse_LastDotValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDNMovementComponent::GetOrientRotationToMovement_Reverse_LastDotValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "GetOrientRotationToMovement_Reverse_LastDotValue");

	Params::DNMovementComponent_GetOrientRotationToMovement_Reverse_LastDotValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.IsMovementBlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::IsMovementBlocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "IsMovementBlocked");

	Params::DNMovementComponent_IsMovementBlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNMovementComponent.IsProne
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDNMovementComponent::IsProne() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNMovementComponent", "IsProne");

	Params::DNMovementComponent_IsProne Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.AllEquipThingReady
// (Event, Public, BlueprintEvent)

void ADNCharacter::AllEquipThingReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "AllEquipThingReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.DisableControllerRotation
// (Final, Native, Public, BlueprintCallable)

void ADNCharacter::DisableControllerRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "DisableControllerRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.EndProne
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::EndProne(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "EndProne");

	Params::DNCharacter_EndProne Parms{};

	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.GetFirstPropsActor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActionPropsActor_DN*             PropsActor                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InstanceName                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::GetFirstPropsActor(EBranchesOutEnum* Branches, class AActionPropsActor_DN** PropsActor, class FName* ActorType, class FName* InstanceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetFirstPropsActor");

	Params::DNCharacter_GetFirstPropsActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (PropsActor != nullptr)
		*PropsActor = Parms.PropsActor;

	if (ActorType != nullptr)
		*ActorType = Parms.ActorType;

	if (InstanceName != nullptr)
		*InstanceName = Parms.InstanceName;
}


// Function DynamicNode.DNCharacter.GetLastLeftLegPhysicalMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* ADNCharacter::GetLastLeftLegPhysicalMaterial(EBranchesOutEnum* Branches, bool* IsValid, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetLastLeftLegPhysicalMaterial");

	Params::DNCharacter_GetLastLeftLegPhysicalMaterial Parms{};

	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetLastLeftLegPhysicalSurface
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnDefaultSurfaceIfNotFinded                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        DefaultSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPhysicalSurface ADNCharacter::GetLastLeftLegPhysicalSurface(EBranchesOutEnum* Branches, bool* IsValid, int32 LegIndex, bool ReturnDefaultSurfaceIfNotFinded, EPhysicalSurface DefaultSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetLastLeftLegPhysicalSurface");

	Params::DNCharacter_GetLastLeftLegPhysicalSurface Parms{};

	Parms.LegIndex = LegIndex;
	Parms.ReturnDefaultSurfaceIfNotFinded = ReturnDefaultSurfaceIfNotFinded;
	Parms.DefaultSurface = DefaultSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetLastRightLegPhysicalMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPhysicalMaterial* ADNCharacter::GetLastRightLegPhysicalMaterial(EBranchesOutEnum* Branches, bool* IsValid, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetLastRightLegPhysicalMaterial");

	Params::DNCharacter_GetLastRightLegPhysicalMaterial Parms{};

	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetLastRightLegPhysicalSurface
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnDefaultSurfaceIfNotFinded                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        DefaultSurface                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicalSurface                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPhysicalSurface ADNCharacter::GetLastRightLegPhysicalSurface(EBranchesOutEnum* Branches, bool* IsValid, int32 LegIndex, bool ReturnDefaultSurfaceIfNotFinded, EPhysicalSurface DefaultSurface)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetLastRightLegPhysicalSurface");

	Params::DNCharacter_GetLastRightLegPhysicalSurface Parms{};

	Parms.LegIndex = LegIndex;
	Parms.ReturnDefaultSurfaceIfNotFinded = ReturnDefaultSurfaceIfNotFinded;
	Parms.DefaultSurface = DefaultSurface;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetNearestPropsActor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActionPropsActor_DN*             PropsActor                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InstanceName                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::GetNearestPropsActor(EBranchesOutEnum* Branches, class AActionPropsActor_DN** PropsActor, class FName* ActorType, class FName* InstanceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetNearestPropsActor");

	Params::DNCharacter_GetNearestPropsActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (PropsActor != nullptr)
		*PropsActor = Parms.PropsActor;

	if (ActorType != nullptr)
		*ActorType = Parms.ActorType;

	if (InstanceName != nullptr)
		*InstanceName = Parms.InstanceName;
}


// Function DynamicNode.DNCharacter.GetNearestPropsActors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActionPropsActor_DN*>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActionPropsActor_DN*> ADNCharacter::GetNearestPropsActors(EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetNearestPropsActors");

	Params::DNCharacter_GetNearestPropsActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.K2_OnBaseChange
// (Event, Public, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OutActor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::K2_OnBaseChange(class UPrimitiveComponent* PrimitiveComponent, class AActor* OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "K2_OnBaseChange");

	Params::DNCharacter_K2_OnBaseChange Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.OutActor = OutActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DNCharacter.K2_OnEndProne
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaledHalfHeightAdjust                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::K2_OnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "K2_OnEndProne");

	Params::DNCharacter_K2_OnEndProne Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DNCharacter.K2_OnStartProne
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaledHalfHeightAdjust                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FromCrouch                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::K2_OnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust, bool FromCrouch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "K2_OnStartProne");

	Params::DNCharacter_K2_OnStartProne Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;
	Parms.FromCrouch = FromCrouch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DNCharacter.OnEndImpact
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAnimationAsset*                  PivotAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::OnEndImpact(class UAnimationAsset* PivotAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnEndImpact");

	Params::DNCharacter_OnEndImpact Parms{};

	Parms.PivotAnimation = PivotAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DNCharacter.OnEndPivot
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAnimationAsset*                  PivotAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::OnEndPivot(class UAnimationAsset* PivotAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnEndPivot");

	Params::DNCharacter_OnEndPivot Parms{};

	Parms.PivotAnimation = PivotAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DNCharacter.OnEndSwimming
// (Event, Public, BlueprintEvent)

void ADNCharacter::OnEndSwimming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnEndSwimming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.OnPivot
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAnimationAsset*                  PivotAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::OnPivot(class UAnimationAsset* PivotAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnPivot");

	Params::DNCharacter_OnPivot Parms{};

	Parms.PivotAnimation = PivotAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DNCharacter.OnRep_IsProne
// (Native, Public)

void ADNCharacter::OnRep_IsProne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnRep_IsProne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.OnRep_IsShrink
// (Native, Public)

void ADNCharacter::OnRep_IsShrink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnRep_IsShrink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.OnRep_NewControlRotation
// (Native, Protected)

void ADNCharacter::OnRep_NewControlRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnRep_NewControlRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.OnStartAutoCrouching
// (Event, Public, BlueprintEvent)

void ADNCharacter::OnStartAutoCrouching()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnStartAutoCrouching");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.OnStartFallingFromTopPosition
// (Event, Public, BlueprintEvent)

void ADNCharacter::OnStartFallingFromTopPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnStartFallingFromTopPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.OnStartInAir
// (Event, Public, BlueprintEvent)

void ADNCharacter::OnStartInAir()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnStartInAir");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.OnStartStanding
// (Event, Public, BlueprintEvent)

void ADNCharacter::OnStartStanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnStartStanding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.OnStartSwimming
// (Event, Public, BlueprintEvent)

void ADNCharacter::OnStartSwimming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OnStartSwimming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DynamicNode.DNCharacter.OverrideFaceRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         OverrideRotation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::OverrideFaceRotation(const struct FRotator& OverrideRotation, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "OverrideFaceRotation");

	Params::DNCharacter_OverrideFaceRotation Parms{};

	Parms.OverrideRotation = std::move(OverrideRotation);
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SERVER_ComputeLocallyVariables
// (Net, Native, Event, Public, NetServer)
// Parameters:
// struct FLocallyRepData_DN_Int           RepData                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ADNCharacter::SERVER_ComputeLocallyVariables(const struct FLocallyRepData_DN_Int& RepData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SERVER_ComputeLocallyVariables");

	Params::DNCharacter_SERVER_ComputeLocallyVariables Parms{};

	Parms.RepData = std::move(RepData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetAutoCrouching
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleAddHeight                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AddRadius                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleZOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CapsuleForwardOffset                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CapsuleRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InTimer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutTimer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_DrawDebug                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawDebugTimer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DrawDebugOnlySuccAttempts                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetAutoCrouching(bool Enabled, float CapsuleAddHeight, float AddRadius, float CapsuleZOffset, float CapsuleForwardOffset, const struct FRotator& CapsuleRotation, float InTimer, float OutTimer, bool Param_DrawDebug, float DrawDebugTimer, bool DrawDebugOnlySuccAttempts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetAutoCrouching");

	Params::DNCharacter_SetAutoCrouching Parms{};

	Parms.Enabled = Enabled;
	Parms.CapsuleAddHeight = CapsuleAddHeight;
	Parms.AddRadius = AddRadius;
	Parms.CapsuleZOffset = CapsuleZOffset;
	Parms.CapsuleForwardOffset = CapsuleForwardOffset;
	Parms.CapsuleRotation = std::move(CapsuleRotation);
	Parms.InTimer = InTimer;
	Parms.OutTimer = OutTimer;
	Parms.Param_DrawDebug = Param_DrawDebug;
	Parms.DrawDebugTimer = DrawDebugTimer;
	Parms.DrawDebugOnlySuccAttempts = DrawDebugOnlySuccAttempts;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetControllerRotationParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    UseControllerRotationPitch                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseControllerRotationYaw                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseControllerRotationRoll                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartSoftFaceRotationTime                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinSoftFaceRotationTime                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeBetweenStartAndFin                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetControllerRotationParams(bool UseControllerRotationPitch, bool UseControllerRotationYaw, bool UseControllerRotationRoll, float StartSoftFaceRotationTime, float FinSoftFaceRotationTime, float TransitionTimeBetweenStartAndFin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetControllerRotationParams");

	Params::DNCharacter_SetControllerRotationParams Parms{};

	Parms.UseControllerRotationPitch = UseControllerRotationPitch;
	Parms.UseControllerRotationYaw = UseControllerRotationYaw;
	Parms.UseControllerRotationRoll = UseControllerRotationRoll;
	Parms.StartSoftFaceRotationTime = StartSoftFaceRotationTime;
	Parms.FinSoftFaceRotationTime = FinSoftFaceRotationTime;
	Parms.TransitionTimeBetweenStartAndFin = TransitionTimeBetweenStartAndFin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetDampingMultiAllBodyBellow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AngularDampingFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LinearDampingFactor                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetDampingMultiAllBodyBellow(float AngularDampingFactor, float LinearDampingFactor, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetDampingMultiAllBodyBellow");

	Params::DNCharacter_SetDampingMultiAllBodyBellow Parms{};

	Parms.AngularDampingFactor = AngularDampingFactor;
	Parms.LinearDampingFactor = LinearDampingFactor;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetEnableGravityAllBodyBellow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetEnableGravityAllBodyBellow(bool Enabled, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetEnableGravityAllBodyBellow");

	Params::DNCharacter_SetEnableGravityAllBodyBellow Parms{};

	Parms.Enabled = Enabled;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetMaxSpeedFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Factor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetMaxSpeedFactor(float Factor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetMaxSpeedFactor");

	Params::DNCharacter_SetMaxSpeedFactor Parms{};

	Parms.Factor = Factor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetOverrideViewRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OverideRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ADNCharacter::SetOverrideViewRotation(bool Enabled, const struct FRotator& OverideRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetOverrideViewRotation");

	Params::DNCharacter_SetOverrideViewRotation Parms{};

	Parms.Enabled = Enabled;
	Parms.OverideRotation = std::move(OverideRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetReplicatedInputVector_AP
// (Net, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FVector                          InControllerInputVector                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetReplicatedInputVector_AP(const struct FVector& InControllerInputVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetReplicatedInputVector_AP");

	Params::DNCharacter_SetReplicatedInputVector_AP Parms{};

	Parms.InControllerInputVector = std::move(InControllerInputVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SetTimerAutoCrouching
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimerVal                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::SetTimerAutoCrouching(float TimerVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SetTimerAutoCrouching");

	Params::DNCharacter_SetTimerAutoCrouching Parms{};

	Parms.TimerVal = TimerVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.SPROXY_ComputeLocallyVariables
// (Net, Native, Event, NetMulticast, Public)
// Parameters:
// struct FLocallyRepData_DN_Int           RepData                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ADNCharacter::SPROXY_ComputeLocallyVariables(const struct FLocallyRepData_DN_Int& RepData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "SPROXY_ComputeLocallyVariables");

	Params::DNCharacter_SPROXY_ComputeLocallyVariables Parms{};

	Parms.RepData = std::move(RepData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.StartProne
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bClientSimulation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADNCharacter::StartProne(bool bClientSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "StartProne");

	Params::DNCharacter_StartProne Parms{};

	Parms.bClientSimulation = bClientSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DNCharacter.GetCurrentMaxSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    UseMaxSpeedFactor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetCurrentMaxSpeed(bool UseMaxSpeedFactor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetCurrentMaxSpeed");

	Params::DNCharacter_GetCurrentMaxSpeed Parms{};

	Parms.UseMaxSpeedFactor = UseMaxSpeedFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetDNMovementComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDNMovementComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDNMovementComponent* ADNCharacter::GetDNMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetDNMovementComponent");

	Params::DNCharacter_GetDNMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetMaxSpeedFactor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetMaxSpeedFactor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetMaxSpeedFactor");

	Params::DNCharacter_GetMaxSpeedFactor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetReplicatedCurrentAngleDeltaAbs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetReplicatedCurrentAngleDeltaAbs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetReplicatedCurrentAngleDeltaAbs");

	Params::DNCharacter_GetReplicatedCurrentAngleDeltaAbs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetReplicatedCurrentAngleDir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetReplicatedCurrentAngleDir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetReplicatedCurrentAngleDir");

	Params::DNCharacter_GetReplicatedCurrentAngleDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetReplicatedFrictionFactorChangeDir
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetReplicatedFrictionFactorChangeDir() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetReplicatedFrictionFactorChangeDir");

	Params::DNCharacter_GetReplicatedFrictionFactorChangeDir Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetReplicatedMaxAccelerationCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetReplicatedMaxAccelerationCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetReplicatedMaxAccelerationCoef");

	Params::DNCharacter_GetReplicatedMaxAccelerationCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DNCharacter.GetReplicatedMaxSpeedCoef
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ADNCharacter::GetReplicatedMaxSpeedCoef() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DNCharacter", "GetReplicatedMaxSpeedCoef");

	Params::DNCharacter_GetReplicatedMaxSpeedCoef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.AIController_DN.StopActiveMovement
// (Final, Native, Public, BlueprintCallable)

void AAIController_DN::StopActiveMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIController_DN", "StopActiveMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.CheckPropsActorZoneOverlap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Charater                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APropsActorZone_DN*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APropsActorZone_DN* AActionPropsActor_DN::CheckPropsActorZoneOverlap(EBranchesOutEnum* Branches, class ACharacter* Charater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "CheckPropsActorZoneOverlap");

	Params::ActionPropsActor_DN_CheckPropsActorZoneOverlap Parms{};

	Parms.Charater = Charater;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.ActionPropsActor_DN.CheckTargetSocketExist
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TargetSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AActionPropsActor_DN::CheckTargetSocketExist(class FName TargetSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "CheckTargetSocketExist");

	Params::ActionPropsActor_DN_CheckTargetSocketExist Parms{};

	Parms.TargetSocketName = TargetSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.ActionPropsActor_DN.DisableIntermediatePoints
// (Final, Native, Public, BlueprintCallable)

void AActionPropsActor_DN::DisableIntermediatePoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "DisableIntermediatePoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.EndMoveEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::EndMoveEvent(bool IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "EndMoveEvent");

	Params::ActionPropsActor_DN_EndMoveEvent Parms{};

	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.ActionPropsActor_DN.HandMoveBackEvent
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       CurRelativeTransform                                   (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::HandMoveBackEvent(bool IsReverse, float CurTime, const struct FTransform& CurRelativeTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "HandMoveBackEvent");

	Params::ActionPropsActor_DN_HandMoveBackEvent Parms{};

	Parms.IsReverse = IsReverse;
	Parms.CurTime = CurTime;
	Parms.CurRelativeTransform = std::move(CurRelativeTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.ActionPropsActor_DN.HandReachedTargetSocketEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   HandIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::HandReachedTargetSocketEvent(int32 HandIdx, bool IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "HandReachedTargetSocketEvent");

	Params::ActionPropsActor_DN_HandReachedTargetSocketEvent Parms{};

	Parms.HandIdx = HandIdx;
	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.ActionPropsActor_DN.IntermediatePointsReachedEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::IntermediatePointsReachedEvent(bool IsReverse, int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "IntermediatePointsReachedEvent");

	Params::ActionPropsActor_DN_IntermediatePointsReachedEvent Parms{};

	Parms.IsReverse = IsReverse;
	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.ActionPropsActor_DN.InteruptCurrentMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInterruptBehaviorFollowActor_DN        Behavior                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::InteruptCurrentMovement(EInterruptBehaviorFollowActor_DN Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "InteruptCurrentMovement");

	Params::ActionPropsActor_DN_InteruptCurrentMovement Parms{};

	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.IsDirectMode
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FromIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ToIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AActionPropsActor_DN::IsDirectMode(EBranchesOutEnum* Branches, int32 FromIndex, int32 ToIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "IsDirectMode");

	Params::ActionPropsActor_DN_IsDirectMode Parms{};

	Parms.FromIndex = FromIndex;
	Parms.ToIndex = ToIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.ActionPropsActor_DN.IsInPosition
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPropsActorPosition_DN                  NewPropsActorPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntermediatePositionIndex                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AActionPropsActor_DN::IsInPosition(EBranchesOutEnum* Branches, EPropsActorPosition_DN NewPropsActorPosition, int32 IntermediatePositionIndex, float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "IsInPosition");

	Params::ActionPropsActor_DN_IsInPosition Parms{};

	Parms.NewPropsActorPosition = NewPropsActorPosition;
	Parms.IntermediatePositionIndex = IntermediatePositionIndex;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.ActionPropsActor_DN.IsMoveComplited
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AActionPropsActor_DN::IsMoveComplited(EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "IsMoveComplited");

	Params::ActionPropsActor_DN_IsMoveComplited Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.ActionPropsActor_DN.IsNextReverse
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AActionPropsActor_DN::IsNextReverse(EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "IsNextReverse");

	Params::ActionPropsActor_DN_IsNextReverse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.ActionPropsActor_DN.ResetDirectModePairs
// (Final, Native, Public, BlueprintCallable)

void AActionPropsActor_DN::ResetDirectModePairs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "ResetDirectModePairs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.ResetHandleComponentTargetIndexData
// (Final, Native, Public, BlueprintCallable)

void AActionPropsActor_DN::ResetHandleComponentTargetIndexData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "ResetHandleComponentTargetIndexData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.ResetIntermediateTargetIndexData
// (Final, Native, Public, BlueprintCallable)

void AActionPropsActor_DN::ResetIntermediateTargetIndexData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "ResetIntermediateTargetIndexData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetActionMeshRelativeOffsetToActorOffset
// (Final, Native, Public, BlueprintCallable)

void AActionPropsActor_DN::SetActionMeshRelativeOffsetToActorOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetActionMeshRelativeOffsetToActorOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetDirectModePairsBothDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FirstIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SecondIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetDirectModePairsBothDirection(int32 FirstIndex, int32 SecondIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetDirectModePairsBothDirection");

	Params::ActionPropsActor_DN_SetDirectModePairsBothDirection Parms{};

	Parms.FirstIndex = FirstIndex;
	Parms.SecondIndex = SecondIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetDirectModePairsSingleDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FromIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ToIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetDirectModePairsSingleDirection(int32 FromIndex, int32 ToIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetDirectModePairsSingleDirection");

	Params::ActionPropsActor_DN_SetDirectModePairsSingleDirection Parms{};

	Parms.FromIndex = FromIndex;
	Parms.ToIndex = ToIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetNextTargetLocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetNextTargetLocation(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetNextTargetLocation");

	Params::ActionPropsActor_DN_SetNextTargetLocation Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPropsActorPosition_DN                  NewPropsActorPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntermediatePositionIndex                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    MoveFromIntermediateToStartPosition                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetPosition(EPropsActorPosition_DN NewPropsActorPosition, int32 IntermediatePositionIndex, bool MoveFromIntermediateToStartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetPosition");

	Params::ActionPropsActor_DN_SetPosition Parms{};

	Parms.NewPropsActorPosition = NewPropsActorPosition;
	Parms.IntermediatePositionIndex = IntermediatePositionIndex;
	Parms.MoveFromIntermediateToStartPosition = MoveFromIntermediateToStartPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TargetSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandComponentTagName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificHandleComponent(class FName TargetSocketName, class FName HandComponentTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificHandleComponent");

	Params::ActionPropsActor_DN_SetSpecificHandleComponent Parms{};

	Parms.TargetSocketName = TargetSocketName;
	Parms.HandComponentTagName = HandComponentTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponentTargetIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           TargetIndexArray                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             TargetSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandComponentTagName                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificHandleComponentTargetIndex(const TArray<int32>& TargetIndexArray, class FName TargetSocketName, class FName HandComponentTagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificHandleComponentTargetIndex");

	Params::ActionPropsActor_DN_SetSpecificHandleComponentTargetIndex Parms{};

	Parms.TargetIndexArray = std::move(TargetIndexArray);
	Parms.TargetSocketName = TargetSocketName;
	Parms.HandComponentTagName = HandComponentTagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponentUsingTargetIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificHandleComponentUsingTargetIndex(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificHandleComponentUsingTargetIndex");

	Params::ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndex Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificHandleComponentUsingTargetIndexExt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FromIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ToIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificHandleComponentUsingTargetIndexExt(int32 FromIndex, int32 ToIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificHandleComponentUsingTargetIndexExt");

	Params::ActionPropsActor_DN_SetSpecificHandleComponentUsingTargetIndexExt Parms{};

	Parms.FromIndex = FromIndex;
	Parms.ToIndex = ToIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificIntermediatePoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   IntermediatePointsIndex                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificIntermediatePoints(int32 IntermediatePointsIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificIntermediatePoints");

	Params::ActionPropsActor_DN_SetSpecificIntermediatePoints Parms{};

	Parms.IntermediatePointsIndex = IntermediatePointsIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificIntermediatePointsUsingTargetIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TargetIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificIntermediatePointsUsingTargetIndex(int32 TargetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificIntermediatePointsUsingTargetIndex");

	Params::ActionPropsActor_DN_SetSpecificIntermediatePointsUsingTargetIndex Parms{};

	Parms.TargetIndex = TargetIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificIntermediateTargetIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           TargetIndexArray                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   IntermediatePointIndex                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificIntermediateTargetIndex(const TArray<int32>& TargetIndexArray, int32 IntermediatePointIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificIntermediateTargetIndex");

	Params::ActionPropsActor_DN_SetSpecificIntermediateTargetIndex Parms{};

	Parms.TargetIndexArray = std::move(TargetIndexArray);
	Parms.IntermediatePointIndex = IntermediatePointIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetSpecificTargetSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SpecificTargetSocketName                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetSpecificTargetSocket(class FName SpecificTargetSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetSpecificTargetSocket");

	Params::ActionPropsActor_DN_SetSpecificTargetSocket Parms{};

	Parms.SpecificTargetSocketName = SpecificTargetSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetTargetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TargetAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ChangeDirectionIfNeed                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetTargetAlpha(float TargetAlpha, bool ChangeDirectionIfNeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetTargetAlpha");

	Params::ActionPropsActor_DN_SetTargetAlpha Parms{};

	Parms.TargetAlpha = TargetAlpha;
	Parms.ChangeDirectionIfNeed = ChangeDirectionIfNeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetTargetAlphaReverse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TargetAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetAlphaForReverseMode                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetTargetAlphaReverse(float TargetAlpha, float TargetAlphaForReverseMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetTargetAlphaReverse");

	Params::ActionPropsActor_DN_SetTargetAlphaReverse Parms{};

	Parms.TargetAlpha = TargetAlpha;
	Parms.TargetAlphaForReverseMode = TargetAlphaForReverseMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.SetTargetPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EPropsActorPosition_DN                  NewPropsActorPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   IntermediatePositionIndex                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::SetTargetPosition(EPropsActorPosition_DN NewPropsActorPosition, int32 IntermediatePositionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "SetTargetPosition");

	Params::ActionPropsActor_DN_SetTargetPosition Parms{};

	Parms.NewPropsActorPosition = NewPropsActorPosition;
	Parms.IntermediatePositionIndex = IntermediatePositionIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.StartHandMoveEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   HandIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ToSocketName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::StartHandMoveEvent(int32 HandIdx, bool IsReverse, class FName ToSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "StartHandMoveEvent");

	Params::ActionPropsActor_DN_StartHandMoveEvent Parms{};

	Parms.HandIdx = HandIdx;
	Parms.IsReverse = IsReverse;
	Parms.ToSocketName = ToSocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.ActionPropsActor_DN.StartMoveEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsReverse                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::StartMoveEvent(bool IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "StartMoveEvent");

	Params::ActionPropsActor_DN_StartMoveEvent Parms{};

	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.ActionPropsActor_DN.StartNextFromCurrentLocation
// (Final, Native, Public, BlueprintCallable)

void AActionPropsActor_DN::StartNextFromCurrentLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "StartNextFromCurrentLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.ActionPropsActor_DN.UpdateEvent
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntermediateAlpha                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentBlendAlpha                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AActionPropsActor_DN::UpdateEvent(float Alpha, float IntermediateAlpha, float CurrentBlendAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ActionPropsActor_DN", "UpdateEvent");

	Params::ActionPropsActor_DN_UpdateEvent Parms{};

	Parms.Alpha = Alpha;
	Parms.IntermediateAlpha = IntermediateAlpha;
	Parms.CurrentBlendAlpha = CurrentBlendAlpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DynamicNode.DynamicNodeBPLibrary.AddAdditionalRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddRotationBase                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddRotationInCrouch                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         AddRotationInFalling                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         AddRotationInAir                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         AddRotationInWater                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AddAdditionalRotation_BL(class ACharacter* OwnCharacter, const struct FRotator& AddRotationBase, float TransitionTime, const struct FRotator& AddRotationInCrouch, const struct FRotator& AddRotationInFalling, const struct FRotator& AddRotationInAir, const struct FRotator& AddRotationInWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AddAdditionalRotation_BL");

	Params::DynamicNodeBPLibrary_AddAdditionalRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AddRotationBase = std::move(AddRotationBase);
	Parms.TransitionTime = TransitionTime;
	Parms.AddRotationInCrouch = std::move(AddRotationInCrouch);
	Parms.AddRotationInFalling = std::move(AddRotationInFalling);
	Parms.AddRotationInAir = std::move(AddRotationInAir);
	Parms.AddRotationInWater = std::move(AddRotationInWater);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AlignToActor_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToRotate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PositionOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegrees                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalculateOnce                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AlignToActor_BL(class ACharacter* OwnCharacter, const class AActor* Actor, class FName BoneToRotate, const struct FVector& PositionOffset, bool OffsetRelative, float MaxDegrees, float TransitionTime, bool CalculateOnce, float RotationAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AlignToActor_BL");

	Params::DynamicNodeBPLibrary_AlignToActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Actor = Actor;
	Parms.BoneToRotate = BoneToRotate;
	Parms.PositionOffset = std::move(PositionOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.MaxDegrees = MaxDegrees;
	Parms.TransitionTime = TransitionTime;
	Parms.CalculateOnce = CalculateOnce;
	Parms.RotationAlpha = RotationAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ApplyAdditiveAnimation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AdditiveAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayOnce                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayFrom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeedIfRestart                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::ApplyAdditiveAnimation_BL(class ACharacter* OwnCharacter, class UAnimationAsset* AdditiveAnimation, float IntSpeed, bool PlayOnce, float PlayFrom, bool CanRestart, float IntSpeedIfRestart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ApplyAdditiveAnimation_BL");

	Params::DynamicNodeBPLibrary_ApplyAdditiveAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AdditiveAnimation = AdditiveAnimation;
	Parms.IntSpeed = IntSpeed;
	Parms.PlayOnce = PlayOnce;
	Parms.PlayFrom = PlayFrom;
	Parms.CanRestart = CanRestart;
	Parms.IntSpeedIfRestart = IntSpeedIfRestart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ApplyAdditiveBSAnimation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpaceBase*                  AdditiveAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeedPrevious                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BSDataToPrevious                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::ApplyAdditiveBSAnimation_BL(class ACharacter* OwnCharacter, class UBlendSpaceBase* AdditiveAnimation, float IntSpeed, float IntSpeedPrevious, const struct FVector& BSDataToPrevious)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ApplyAdditiveBSAnimation_BL");

	Params::DynamicNodeBPLibrary_ApplyAdditiveBSAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AdditiveAnimation = AdditiveAnimation;
	Parms.IntSpeed = IntSpeed;
	Parms.IntSpeedPrevious = IntSpeedPrevious;
	Parms.BSDataToPrevious = std::move(BSDataToPrevious);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ApplyAimOffset1D_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyForNextTransition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAimOffsetBlendSpace1D*           AimOffsetBlendSpace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::ApplyAimOffset1D_BL(class ACharacter* OwnCharacter, bool OnlyForNextTransition, class UAimOffsetBlendSpace1D* AimOffsetBlendSpace, float InitX)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ApplyAimOffset1D_BL");

	Params::DynamicNodeBPLibrary_ApplyAimOffset1D_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.OnlyForNextTransition = OnlyForNextTransition;
	Parms.AimOffsetBlendSpace = AimOffsetBlendSpace;
	Parms.InitX = InitX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ApplyAimOffset2D_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyForNextTransition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAimOffsetBlendSpace*             AimOffsetBlendSpace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::ApplyAimOffset2D_BL(class ACharacter* OwnCharacter, bool OnlyForNextTransition, class UAimOffsetBlendSpace* AimOffsetBlendSpace, float InitX, float InitY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ApplyAimOffset2D_BL");

	Params::DynamicNodeBPLibrary_ApplyAimOffset2D_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.OnlyForNextTransition = OnlyForNextTransition;
	Parms.AimOffsetBlendSpace = AimOffsetBlendSpace;
	Parms.InitX = InitX;
	Parms.InitY = InitY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_AllNotify_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_AllNotify_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>& AllNotifyDelegate_Multi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_AllNotify_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_AllNotify_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_AnimationChange_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class UAnimationAsset* OldLinkedSequence, class UAnimationAsset* NewLinkedSequence)>AnimationChangeNotifyDelegate_Multi                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_AnimationChange_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class UAnimationAsset* OldLinkedSequence, class UAnimationAsset* NewLinkedSequence)>& AnimationChangeNotifyDelegate_Multi)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_AnimationChange_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_AnimationChange_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationChangeNotifyDelegate_Multi = AnimationChangeNotifyDelegate_Multi;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_EndOfTrack_Once_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                AnimationTrack                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReplaceIfExist                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_EndOfTrack_Once_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)>& AllNotifyDelegate_Multi, const class UAnimSequenceBase* AnimationTrack, bool ReplaceIfExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_EndOfTrack_Once_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_EndOfTrack_Once_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;
	Parms.AnimationTrack = AnimationTrack;
	Parms.ReplaceIfExist = ReplaceIfExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotify_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReplaceIfExist                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_SpecificNotify_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>& AllNotifyDelegate_Multi, class FName NotifyName, bool ReplaceIfExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_SpecificNotify_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;
	Parms.NotifyName = NotifyName;
	Parms.ReplaceIfExist = ReplaceIfExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotify_Once_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReplaceIfExist                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_SpecificNotify_Once_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>& AllNotifyDelegate_Multi, class FName NotifyName, bool ReplaceIfExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_SpecificNotify_Once_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_SpecificNotify_Once_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;
	Parms.NotifyName = NotifyName;
	Parms.ReplaceIfExist = ReplaceIfExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotifyAndAsset_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                AnimationTrack                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReplaceIfExist                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_SpecificNotifyAndAsset_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>& AllNotifyDelegate_Multi, class FName NotifyName, const class UAnimSequenceBase* AnimationTrack, bool ReplaceIfExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_SpecificNotifyAndAsset_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;
	Parms.NotifyName = NotifyName;
	Parms.AnimationTrack = AnimationTrack;
	Parms.ReplaceIfExist = ReplaceIfExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotifyAndAsset_Once_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                AnimationTrack                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReplaceIfExist                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_SpecificNotifyAndAsset_Once_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence)>& AllNotifyDelegate_Multi, class FName NotifyName, const class UAnimSequenceBase* AnimationTrack, bool ReplaceIfExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_SpecificNotifyAndAsset_Once_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyAndAsset_Once_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;
	Parms.NotifyName = NotifyName;
	Parms.AnimationTrack = AnimationTrack;
	Parms.ReplaceIfExist = ReplaceIfExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)>AllNotifyDelegate_Multi                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                AnimationTrack                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReplaceIfExist                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL(class ACharacter* OwnCharacter, const TDelegate<void(uint8 StackPriority, class FName BoneName, class FName NotifyName, class UAnimSequenceBase* LinkedSequence, bool EndOfTrack)>& AllNotifyDelegate_Multi, class FName NotifyName, const class UAnimSequenceBase* AnimationTrack, bool ReplaceIfExist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL");

	Params::DynamicNodeBPLibrary_AssignDelegate_SpecificNotifyOrEndOfTrack_Once_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AllNotifyDelegate_Multi = AllNotifyDelegate_Multi;
	Parms.NotifyName = NotifyName;
	Parms.AnimationTrack = AnimationTrack;
	Parms.ReplaceIfExist = ReplaceIfExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.BlendMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AlphaValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FirstAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  SecondAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ThirdAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InThirdPlayRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSecondValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::BlendMachine_BL(class ACharacter* OwnCharacter, float AlphaValue, class UAnimationAsset* FirstAnimation, class UAnimationAsset* SecondAnimation, class UAnimationAsset* ThirdAnimation, float TransitionTime, float InPlayRate, float InThirdPlayRate, float MaxSecondValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "BlendMachine_BL");

	Params::DynamicNodeBPLibrary_BlendMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AlphaValue = AlphaValue;
	Parms.FirstAnimation = FirstAnimation;
	Parms.SecondAnimation = SecondAnimation;
	Parms.ThirdAnimation = ThirdAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.InPlayRate = InPlayRate;
	Parms.InThirdPlayRate = InThirdPlayRate;
	Parms.MaxSecondValue = MaxSecondValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.BlendMachine_BlendSpace2D_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BledSpaceValueX                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BledSpaceValueY                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpace*                      BlendSpaceAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::BlendMachine_BlendSpace2D_BL(class ACharacter* OwnCharacter, float BledSpaceValueX, float BledSpaceValueY, class UBlendSpace* BlendSpaceAnimation, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "BlendMachine_BlendSpace2D_BL");

	Params::DynamicNodeBPLibrary_BlendMachine_BlendSpace2D_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BledSpaceValueX = BledSpaceValueX;
	Parms.BledSpaceValueY = BledSpaceValueY;
	Parms.BlendSpaceAnimation = BlendSpaceAnimation;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.BlendMachine_BlendSpace_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BledSpaceValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpace1D*                    BlendSpaceAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::BlendMachine_BlendSpace_BL(class ACharacter* OwnCharacter, float BledSpaceValue, class UBlendSpace1D* BlendSpaceAnimation, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "BlendMachine_BlendSpace_BL");

	Params::DynamicNodeBPLibrary_BlendMachine_BlendSpace_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BledSpaceValue = BledSpaceValue;
	Parms.BlendSpaceAnimation = BlendSpaceAnimation;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.BreakEquipThing_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EnablePhysSimWhenTransition                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::BreakEquipThing_BL(class ACharacter* OwnCharacter, bool EnablePhysSimWhenTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "BreakEquipThing_BL");

	Params::DynamicNodeBPLibrary_BreakEquipThing_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EnablePhysSimWhenTransition = EnablePhysSimWhenTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.CalculateLeanVector_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   XValFactorDiection                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YValFactorAcceleration                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YValFactorBracking                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityCurve_NoBreak_VelocityThreshold                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityCurve_NoAccel_VelocityThreshold                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UDynamicNodeBPLibrary::CalculateLeanVector_BL(class ACharacter* OwnCharacter, float MinSpeed, float MaxSpeed, float XValFactorDiection, float YValFactorAcceleration, float YValFactorBracking, float VelocityCurve_NoBreak_VelocityThreshold, float VelocityCurve_NoAccel_VelocityThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CalculateLeanVector_BL");

	Params::DynamicNodeBPLibrary_CalculateLeanVector_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.MinSpeed = MinSpeed;
	Parms.MaxSpeed = MaxSpeed;
	Parms.XValFactorDiection = XValFactorDiection;
	Parms.YValFactorAcceleration = YValFactorAcceleration;
	Parms.YValFactorBracking = YValFactorBracking;
	Parms.VelocityCurve_NoBreak_VelocityThreshold = VelocityCurve_NoBreak_VelocityThreshold;
	Parms.VelocityCurve_NoAccel_VelocityThreshold = VelocityCurve_NoAccel_VelocityThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CalibrateRearSocketWeightLegsIK_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsProne                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         DeltaRotationRoot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::CalibrateRearSocketWeightLegsIK_BL(class ACharacter* OwnCharacter, bool Enabled, bool IsProne, const struct FRotator& DeltaRotationRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CalibrateRearSocketWeightLegsIK_BL");

	Params::DynamicNodeBPLibrary_CalibrateRearSocketWeightLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Enabled = Enabled;
	Parms.IsProne = IsProne;
	Parms.DeltaRotationRoot = std::move(DeltaRotationRoot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.CapsuleTraceMulti_DN
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace_DN                      DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               OutHits                                                (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::CapsuleTraceMulti_DN(class ACharacter* OwnCharacter, const struct FVector& Start, const struct FVector& End, const struct FRotator& Rotation, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace_DN DrawDebugType, TArray<struct FHitResult>* OutHits, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CapsuleTraceMulti_DN");

	Params::DynamicNodeBPLibrary_CapsuleTraceMulti_DN Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Rotation = std::move(Rotation);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHits != nullptr)
		*OutHits = std::move(Parms.OutHits);

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CapsuleTraceSingle_DN
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceComplex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EDrawDebugTrace_DN                      DrawDebugType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIgnoreSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     TraceColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     TraceHitColor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::CapsuleTraceSingle_DN(class ACharacter* OwnCharacter, const struct FVector& Start, const struct FVector& End, const struct FRotator& Rotation, float Radius, float HalfHeight, ETraceTypeQuery TraceChannel, bool bTraceComplex, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace_DN DrawDebugType, struct FHitResult* OutHit, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CapsuleTraceSingle_DN");

	Params::DynamicNodeBPLibrary_CapsuleTraceSingle_DN Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Rotation = std::move(Rotation);
	Parms.Radius = Radius;
	Parms.HalfHeight = HalfHeight;
	Parms.TraceChannel = TraceChannel;
	Parms.bTraceComplex = bTraceComplex;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.DrawDebugType = DrawDebugType;
	Parms.bIgnoreSelf = bIgnoreSelf;
	Parms.TraceColor = std::move(TraceColor);
	Parms.TraceHitColor = std::move(TraceHitColor);
	Parms.DrawTime = DrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CheckActorZoneOverlap_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APropsActorZone_DN*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APropsActorZone_DN* UDynamicNodeBPLibrary::CheckActorZoneOverlap_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CheckActorZoneOverlap_BL");

	Params::DynamicNodeBPLibrary_CheckActorZoneOverlap_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CheckSpecificTransitionZone_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETransitionZoneStatus_DN                TransitionZoneB                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QueryID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ZoneType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::CheckSpecificTransitionZone_BL(class ACharacter* OwnCharacter, ETransitionZoneStatus_DN* TransitionZoneB, int32 QueryID, class FName ZoneType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CheckSpecificTransitionZone_BL");

	Params::DynamicNodeBPLibrary_CheckSpecificTransitionZone_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.QueryID = QueryID;
	Parms.ZoneType = ZoneType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TransitionZoneB != nullptr)
		*TransitionZoneB = Parms.TransitionZoneB;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CheckTransitionZone_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETransitionZoneStatus_DN                TransitionZoneB                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   QueryID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::CheckTransitionZone_BL(class ACharacter* OwnCharacter, ETransitionZoneStatus_DN* TransitionZoneB, int32 QueryID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CheckTransitionZone_BL");

	Params::DynamicNodeBPLibrary_CheckTransitionZone_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.QueryID = QueryID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TransitionZoneB != nullptr)
		*TransitionZoneB = Parms.TransitionZoneB;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ClampZeroPoint_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Min                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Max                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinNegative                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxNegative                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::ClampZeroPoint_BL(float Value, float Min, float Max, float MinNegative, float MaxNegative)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ClampZeroPoint_BL");

	Params::DynamicNodeBPLibrary_ClampZeroPoint_BL Parms{};

	Parms.Value = Value;
	Parms.Min = Min;
	Parms.Max = Max;
	Parms.MinNegative = MinNegative;
	Parms.MaxNegative = MaxNegative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ClearDistanceIndexMap_DN
// (Final, Native, Static, Public, BlueprintCallable)

void UDynamicNodeBPLibrary::ClearDistanceIndexMap_DN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ClearDistanceIndexMap_DN");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.CreateAnimChanceSet_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnimChanceData_DN>       AnimSequenceArray                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   PauseBetweenChoices                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RandomStartIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ContainsInternalSets                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimChanceSet_DN*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimChanceSet_DN* UDynamicNodeBPLibrary::CreateAnimChanceSet_BL(class ACharacter* OwnCharacter, const TArray<struct FAnimChanceData_DN>& AnimSequenceArray, float PauseBetweenChoices, bool RandomStartIndex, bool ContainsInternalSets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CreateAnimChanceSet_BL");

	Params::DynamicNodeBPLibrary_CreateAnimChanceSet_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimSequenceArray = std::move(AnimSequenceArray);
	Parms.PauseBetweenChoices = PauseBetweenChoices;
	Parms.RandomStartIndex = RandomStartIndex;
	Parms.ContainsInternalSets = ContainsInternalSets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CreateAnimTransitionSet_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToAnimation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FTransitionSetData_DN>    AnimTransitionArray                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    UseEmptyArrayUseClassOnlyForSetManually                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimTransitionSet_DN*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimTransitionSet_DN* UDynamicNodeBPLibrary::CreateAnimTransitionSet_BL(class ACharacter* OwnCharacter, class UAnimationAsset* ToAnimation, const TArray<struct FTransitionSetData_DN>& AnimTransitionArray, bool UseEmptyArrayUseClassOnlyForSetManually)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CreateAnimTransitionSet_BL");

	Params::DynamicNodeBPLibrary_CreateAnimTransitionSet_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ToAnimation = ToAnimation;
	Parms.AnimTransitionArray = std::move(AnimTransitionArray);
	Parms.UseEmptyArrayUseClassOnlyForSetManually = UseEmptyArrayUseClassOnlyForSetManually;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CreateAnimVariationSet_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVariationSetData_DN>     AnimSequenceArray                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   CurrentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IteratingEnable                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ContainsInternalSets                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimVariationSet_DN*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimVariationSet_DN* UDynamicNodeBPLibrary::CreateAnimVariationSet_BL(class ACharacter* OwnCharacter, const TArray<struct FVariationSetData_DN>& AnimSequenceArray, int32 CurrentIndex, bool IteratingEnable, bool ContainsInternalSets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CreateAnimVariationSet_BL");

	Params::DynamicNodeBPLibrary_CreateAnimVariationSet_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimSequenceArray = std::move(AnimSequenceArray);
	Parms.CurrentIndex = CurrentIndex;
	Parms.IteratingEnable = IteratingEnable;
	Parms.ContainsInternalSets = ContainsInternalSets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CreateLoopNAnimationAsset_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LoopStartNotify                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LoopEndNotify                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartLoopingDeltaTime                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULoopNAnimationAsset_DN*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULoopNAnimationAsset_DN* UDynamicNodeBPLibrary::CreateLoopNAnimationAsset_BL(class ACharacter* OwnCharacter, class UAnimSequence* AnimSequence, class FName LoopStartNotify, class FName LoopEndNotify, float PlayRate, float TransitionTime, float StartLoopingDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CreateLoopNAnimationAsset_BL");

	Params::DynamicNodeBPLibrary_CreateLoopNAnimationAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimSequence = AnimSequence;
	Parms.LoopStartNotify = LoopStartNotify;
	Parms.LoopEndNotify = LoopEndNotify;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTime = TransitionTime;
	Parms.StartLoopingDeltaTime = StartLoopingDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CrouchMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  CrouchAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  CrouchIdleAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StandingAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseReverseStartAsEndAnimation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ToC                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_CIdle                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_SU                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::CrouchMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* CrouchAnimation, class UAnimationAsset* CrouchIdleAnimation, class UAnimationAsset* StandingAnimation, bool UseReverseStartAsEndAnimation, float TransitionTime_ToC, float TransitionTime_CIdle, float TransitionTime_SU, float PlayRate, float TransitionTimeQuickReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CrouchMachine_BL");

	Params::DynamicNodeBPLibrary_CrouchMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CrouchAnimation = CrouchAnimation;
	Parms.CrouchIdleAnimation = CrouchIdleAnimation;
	Parms.StandingAnimation = StandingAnimation;
	Parms.UseReverseStartAsEndAnimation = UseReverseStartAsEndAnimation;
	Parms.TransitionTime_ToC = TransitionTime_ToC;
	Parms.TransitionTime_CIdle = TransitionTime_CIdle;
	Parms.TransitionTime_SU = TransitionTime_SU;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.CustomStateMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAccelerationForDM                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForcePlayToStateAnimationTillEnd                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForcePlayFromStateAnimationTillEnd                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToStateAnimation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FromStateAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseReverseStartAsEndAnimation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ToS                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_Idle                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_FS                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::CustomStateMachine_BL(class ACharacter* OwnCharacter, int32 CustomIndex, bool UseAccelerationForDM, bool ForcePlayToStateAnimationTillEnd, bool ForcePlayFromStateAnimationTillEnd, class UAnimationAsset* ToStateAnimation, class UAnimationAsset* IdleAnimation, class UAnimationAsset* FromStateAnimation, bool UseReverseStartAsEndAnimation, float TransitionTime_ToS, float TransitionTime_Idle, float TransitionTime_FS, float PlayRate, float TransitionTimeQuickReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "CustomStateMachine_BL");

	Params::DynamicNodeBPLibrary_CustomStateMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CustomIndex = CustomIndex;
	Parms.UseAccelerationForDM = UseAccelerationForDM;
	Parms.ForcePlayToStateAnimationTillEnd = ForcePlayToStateAnimationTillEnd;
	Parms.ForcePlayFromStateAnimationTillEnd = ForcePlayFromStateAnimationTillEnd;
	Parms.ToStateAnimation = ToStateAnimation;
	Parms.IdleAnimation = IdleAnimation;
	Parms.FromStateAnimation = FromStateAnimation;
	Parms.UseReverseStartAsEndAnimation = UseReverseStartAsEndAnimation;
	Parms.TransitionTime_ToS = TransitionTime_ToS;
	Parms.TransitionTime_Idle = TransitionTime_Idle;
	Parms.TransitionTime_FS = TransitionTime_FS;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableAdditiveAnimation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::DisableAdditiveAnimation_BL(class ACharacter* OwnCharacter, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableAdditiveAnimation_BL");

	Params::DynamicNodeBPLibrary_DisableAdditiveAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableAdditiveBSAnimation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::DisableAdditiveBSAnimation_BL(class ACharacter* OwnCharacter, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableAdditiveBSAnimation_BL");

	Params::DynamicNodeBPLibrary_DisableAdditiveBSAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableAimOffsetForNextTr_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::DisableAimOffsetForNextTr_BL(class ACharacter* OwnCharacter, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableAimOffsetForNextTr_BL");

	Params::DynamicNodeBPLibrary_DisableAimOffsetForNextTr_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableAllAdditiveAnimation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::DisableAllAdditiveAnimation_BL(class ACharacter* OwnCharacter, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableAllAdditiveAnimation_BL");

	Params::DynamicNodeBPLibrary_DisableAllAdditiveAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableAllBlendBoneStacksPause_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableAllBlendBoneStacksPause_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableAllBlendBoneStacksPause_BL");

	Params::DynamicNodeBPLibrary_DisableAllBlendBoneStacksPause_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableAllErrorInfo_DN
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Disable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableAllErrorInfo_DN(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableAllErrorInfo_DN");

	Params::DynamicNodeBPLibrary_DisableAllErrorInfo_DN Parms{};

	Parms.Disable = Disable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableDelegateOnAnimFinBlend_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ContinueFinishStack                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableDelegateOnAnimFinBlend_BL(class ACharacter* OwnCharacter, class FName BoneName, bool ContinueFinishStack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableDelegateOnAnimFinBlend_BL");

	Params::DynamicNodeBPLibrary_DisableDelegateOnAnimFinBlend_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;
	Parms.ContinueFinishStack = ContinueFinishStack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableInfoStrings_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Disable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableInfoStrings_BL(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableInfoStrings_BL");

	Params::DynamicNodeBPLibrary_DisableInfoStrings_BL Parms{};

	Parms.Disable = Disable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableLegsIKWhenMovingDownhill_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Disable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableLegsIKWhenMovingDownhill_BL(class ACharacter* OwnCharacter, bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableLegsIKWhenMovingDownhill_BL");

	Params::DynamicNodeBPLibrary_DisableLegsIKWhenMovingDownhill_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Disable = Disable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableLookAt_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableLookAt_BL(class ACharacter* OwnCharacter, float TransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableLookAt_BL");

	Params::DynamicNodeBPLibrary_DisableLookAt_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TransitionTime = TransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableTurnInPlaceAnimations_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Disabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableTurnInPlaceAnimations_BL(class ACharacter* OwnCharacter, bool Disabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableTurnInPlaceAnimations_BL");

	Params::DynamicNodeBPLibrary_DisableTurnInPlaceAnimations_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Disabled = Disabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DisableTurnToControlRotation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Disable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::DisableTurnToControlRotation_BL(class ACharacter* OwnCharacter, bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DisableTurnToControlRotation_BL");

	Params::DynamicNodeBPLibrary_DisableTurnToControlRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Disable = Disable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.DoubleMultiTransitionToAnimFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToNewAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayFrom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTill                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FinalAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_final                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping_Final                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartPosition_Final                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate_Final                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSyncGroups                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::DoubleMultiTransitionToAnimFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* ToNewAsset, float TransitionTime, float PlayFrom, float PlayTill, class UAnimationAsset* FinalAsset, float TransitionTime_final, bool bIsLooping_Final, float InPlayRate, float InStartPosition_Final, float InPlayRate_Final, bool UseSyncGroups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DoubleMultiTransitionToAnimFromCurPose_BL");

	Params::DynamicNodeBPLibrary_DoubleMultiTransitionToAnimFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ToNewAsset = ToNewAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.PlayFrom = PlayFrom;
	Parms.PlayTill = PlayTill;
	Parms.FinalAsset = FinalAsset;
	Parms.TransitionTime_final = TransitionTime_final;
	Parms.bIsLooping_Final = bIsLooping_Final;
	Parms.InPlayRate = InPlayRate;
	Parms.InStartPosition_Final = InStartPosition_Final;
	Parms.InPlayRate_Final = InPlayRate_Final;
	Parms.UseSyncGroups = UseSyncGroups;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.DoubleTransitionToAnimFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToNewAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayFrom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTill                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FinalAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_final                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping_Final                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartPosition_Final                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate_Final                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::DoubleTransitionToAnimFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* ToNewAsset, float TransitionTime, float PlayFrom, float PlayTill, class UAnimationAsset* FinalAsset, float TransitionTime_final, bool bIsLooping_Final, float InPlayRate, float InStartPosition_Final, float InPlayRate_Final)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "DoubleTransitionToAnimFromCurPose_BL");

	Params::DynamicNodeBPLibrary_DoubleTransitionToAnimFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ToNewAsset = ToNewAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.PlayFrom = PlayFrom;
	Parms.PlayTill = PlayTill;
	Parms.FinalAsset = FinalAsset;
	Parms.TransitionTime_final = TransitionTime_final;
	Parms.bIsLooping_Final = bIsLooping_Final;
	Parms.InPlayRate = InPlayRate;
	Parms.InStartPosition_Final = InStartPosition_Final;
	Parms.InPlayRate_Final = InPlayRate_Final;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.EliminateYaw_DN
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FRotator                         Rotator                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::EliminateYaw_DN(const struct FRotator& Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "EliminateYaw_DN");

	Params::DynamicNodeBPLibrary_EliminateYaw_DN Parms{};

	Parms.Rotator = std::move(Rotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.EndAnimationStack_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::EndAnimationStack_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "EndAnimationStack_BL");

	Params::DynamicNodeBPLibrary_EndAnimationStack_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.EquipThing_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationToPlay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FEquipThingData_DN>       EquipThingData                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 WeaponIndex, class FName NotifyToAction, bool FinishTransform)>DelegatesOnComplited                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             PlayFromNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTillNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestartAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::EquipThing_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* AnimationToPlay, const TArray<struct FEquipThingData_DN>& EquipThingData, const TDelegate<void(int32 WeaponIndex, class FName NotifyToAction, bool FinishTransform)>& DelegatesOnComplited, class FName PlayFromNotify, class FName PlayTillNotify, float TransitionTime, float PlayRate, bool CanRestartAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "EquipThing_BL");

	Params::DynamicNodeBPLibrary_EquipThing_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationToPlay = AnimationToPlay;
	Parms.EquipThingData = std::move(EquipThingData);
	Parms.DelegatesOnComplited = DelegatesOnComplited;
	Parms.PlayFromNotify = PlayFromNotify;
	Parms.PlayTillNotify = PlayTillNotify;
	Parms.TransitionTime = TransitionTime;
	Parms.PlayRate = PlayRate;
	Parms.CanRestartAnimation = CanRestartAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.FindBetweenNormals_DN
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          Vector1                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Vector2                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuat                            Quat                                                   (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::FindBetweenNormals_DN(const struct FVector& Vector1, const struct FVector& Vector2, struct FQuat* Quat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "FindBetweenNormals_DN");

	Params::DynamicNodeBPLibrary_FindBetweenNormals_DN Parms{};

	Parms.Vector1 = std::move(Vector1);
	Parms.Vector2 = std::move(Vector2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Quat != nullptr)
		*Quat = std::move(Parms.Quat);

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.FinishAnimationBlendBoneAnimFin_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionEndOffset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::FinishAnimationBlendBoneAnimFin_BL(class ACharacter* OwnCharacter, float TransitionTime, float TransitionEndOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "FinishAnimationBlendBoneAnimFin_BL");

	Params::DynamicNodeBPLibrary_FinishAnimationBlendBoneAnimFin_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TransitionTime = TransitionTime;
	Parms.TransitionEndOffset = TransitionEndOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.FinishAnimationBlendBoneStack_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   StackPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::FinishAnimationBlendBoneStack_BL(class ACharacter* OwnCharacter, class FName BoneName, uint8 StackPriority, float TransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "FinishAnimationBlendBoneStack_BL");

	Params::DynamicNodeBPLibrary_FinishAnimationBlendBoneStack_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;
	Parms.StackPriority = StackPriority;
	Parms.TransitionTime = TransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.FlyMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartFlyAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleFlyAnimation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndFlyAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseOnlyAccelerationForDM                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IdlePoseVelocityTreshold                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseReverseStartAsEndAnimation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ToF                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_FIdle                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_EF                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::FlyMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* StartFlyAnimation, class UAnimationAsset* IdleFlyAnimation, class UAnimationAsset* EndFlyAnimation, bool UseOnlyAccelerationForDM, float IdlePoseVelocityTreshold, bool UseReverseStartAsEndAnimation, float TransitionTime_ToF, float TransitionTime_FIdle, float TransitionTime_EF, float PlayRate, float TransitionTimeQuickReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "FlyMachine_BL");

	Params::DynamicNodeBPLibrary_FlyMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.StartFlyAnimation = StartFlyAnimation;
	Parms.IdleFlyAnimation = IdleFlyAnimation;
	Parms.EndFlyAnimation = EndFlyAnimation;
	Parms.UseOnlyAccelerationForDM = UseOnlyAccelerationForDM;
	Parms.IdlePoseVelocityTreshold = IdlePoseVelocityTreshold;
	Parms.UseReverseStartAsEndAnimation = UseReverseStartAsEndAnimation;
	Parms.TransitionTime_ToF = TransitionTime_ToF;
	Parms.TransitionTime_FIdle = TransitionTime_FIdle;
	Parms.TransitionTime_EF = TransitionTime_EF;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ForceNextTransitionNOTMulti_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NextNOTMulti                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ForceNextTransitionNOTMulti_BL(class ACharacter* OwnCharacter, bool NextNOTMulti)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ForceNextTransitionNOTMulti_BL");

	Params::DynamicNodeBPLibrary_ForceNextTransitionNOTMulti_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NextNOTMulti = NextNOTMulti;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ForceUpdateCurMachineAnimation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Update                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ForceUpdateCurMachineAnimation_BL(class ACharacter* OwnCharacter, bool Update)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ForceUpdateCurMachineAnimation_BL");

	Params::DynamicNodeBPLibrary_ForceUpdateCurMachineAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Update = Update;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ForceUsePivotThisFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ForceUsePivotThisFrame_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ForceUsePivotThisFrame_BL");

	Params::DynamicNodeBPLibrary_ForceUsePivotThisFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.FromRagdoll_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::FromRagdoll_BL(class ACharacter* OwnCharacter, float TransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "FromRagdoll_BL");

	Params::DynamicNodeBPLibrary_FromRagdoll_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TransitionTime = TransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.FromRagdollAnim_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFacingUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVerticalPose                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationFromBackside                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationFromFrontSide                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationFromVerticalPose                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTillNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::FromRagdollAnim_BL(class ACharacter* OwnCharacter, bool IsFacingUp, bool IsVerticalPose, class UAnimationAsset* AnimationFromBackside, class UAnimationAsset* AnimationFromFrontSide, class UAnimationAsset* AnimationFromVerticalPose, class FName PlayFromNotify, class FName PlayTillNotify, float PlayRate, float TransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "FromRagdollAnim_BL");

	Params::DynamicNodeBPLibrary_FromRagdollAnim_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IsFacingUp = IsFacingUp;
	Parms.IsVerticalPose = IsVerticalPose;
	Parms.AnimationFromBackside = AnimationFromBackside;
	Parms.AnimationFromFrontSide = AnimationFromFrontSide;
	Parms.AnimationFromVerticalPose = AnimationFromVerticalPose;
	Parms.PlayFromNotify = PlayFromNotify;
	Parms.PlayTillNotify = PlayTillNotify;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTime = TransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetAimOffsetAnimaAsset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpaceBase*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlendSpaceBase* UDynamicNodeBPLibrary::GetAimOffsetAnimaAsset_BL(class ACharacter* OwnCharacter, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetAimOffsetAnimaAsset_BL");

	Params::DynamicNodeBPLibrary_GetAimOffsetAnimaAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetAnimInstanceFromCharacter_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMultiNodeInstance_DN*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMultiNodeInstance_DN* UDynamicNodeBPLibrary::GetAnimInstanceFromCharacter_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetAnimInstanceFromCharacter_BL");

	Params::DynamicNodeBPLibrary_GetAnimInstanceFromCharacter_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentAnimation_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetCurrentAnimation_BL(class ACharacter* OwnCharacter, class UAnimationAsset** AnimationAsset, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetCurrentAnimation_BL");

	Params::DynamicNodeBPLibrary_GetCurrentAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimationAsset != nullptr)
		*AnimationAsset = Parms.AnimationAsset;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentRootDeltaRotationCS_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::GetCurrentRootDeltaRotationCS_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetCurrentRootDeltaRotationCS_BL");

	Params::DynamicNodeBPLibrary_GetCurrentRootDeltaRotationCS_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentSlopeAngleCS_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::GetCurrentSlopeAngleCS_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetCurrentSlopeAngleCS_BL");

	Params::DynamicNodeBPLibrary_GetCurrentSlopeAngleCS_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentTrackInfo_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TransitionFromAnimationAsset                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InTransition                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FullLenght                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLooping                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetCurrentTrackInfo_BL(class ACharacter* OwnCharacter, class UAnimationAsset** AnimationAsset, class UAnimationAsset** TransitionFromAnimationAsset, bool* InTransition, float* FullLenght, float* CurrentTime, float* PlayRate, bool* IsLooping, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetCurrentTrackInfo_BL");

	Params::DynamicNodeBPLibrary_GetCurrentTrackInfo_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimationAsset != nullptr)
		*AnimationAsset = Parms.AnimationAsset;

	if (TransitionFromAnimationAsset != nullptr)
		*TransitionFromAnimationAsset = Parms.TransitionFromAnimationAsset;

	if (InTransition != nullptr)
		*InTransition = Parms.InTransition;

	if (FullLenght != nullptr)
		*FullLenght = Parms.FullLenght;

	if (CurrentTime != nullptr)
		*CurrentTime = Parms.CurrentTime;

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;

	if (IsLooping != nullptr)
		*IsLooping = Parms.IsLooping;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentTrackPlaytime_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::GetCurrentTrackPlaytime_BL(class ACharacter* OwnCharacter, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetCurrentTrackPlaytime_BL");

	Params::DynamicNodeBPLibrary_GetCurrentTrackPlaytime_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetCurrentTrackTimeInfo_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FullLenght                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OverallPlayTime                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetCurrentTrackTimeInfo_BL(class ACharacter* OwnCharacter, float* FullLenght, float* CurrentTime, float* OverallPlayTime, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetCurrentTrackTimeInfo_BL");

	Params::DynamicNodeBPLibrary_GetCurrentTrackTimeInfo_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FullLenght != nullptr)
		*FullLenght = Parms.FullLenght;

	if (CurrentTime != nullptr)
		*CurrentTime = Parms.CurrentTime;

	if (OverallPlayTime != nullptr)
		*OverallPlayTime = Parms.OverallPlayTime;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetEndSwimmStatus_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetEndSwimmStatus_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetEndSwimmStatus_BL");

	Params::DynamicNodeBPLibrary_GetEndSwimmStatus_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetFlyMachineMoveStatus_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAccelerationStatus_DN                  AccelerationStatus                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetFlyMachineMoveStatus_BL(class ACharacter* OwnCharacter, EAccelerationStatus_DN* AccelerationStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetFlyMachineMoveStatus_BL");

	Params::DynamicNodeBPLibrary_GetFlyMachineMoveStatus_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AccelerationStatus != nullptr)
		*AccelerationStatus = Parms.AccelerationStatus;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetGroundZeroLevelCSLegsIK_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LegZeroLevelCS_Right                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LegZeroLevelCS_Left                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetDifference                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetGroundZeroLevelCSLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, float* LegZeroLevelCS_Right, float* LegZeroLevelCS_Left, bool GetDifference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetGroundZeroLevelCSLegsIK_BL");

	Params::DynamicNodeBPLibrary_GetGroundZeroLevelCSLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.GetDifference = GetDifference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LegZeroLevelCS_Right != nullptr)
		*LegZeroLevelCS_Right = Parms.LegZeroLevelCS_Right;

	if (LegZeroLevelCS_Left != nullptr)
		*LegZeroLevelCS_Left = Parms.LegZeroLevelCS_Left;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetHandSpeedCSHandsIK_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::GetHandSpeedCSHandsIK_BL(class ACharacter* OwnCharacter, int32 HandIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetHandSpeedCSHandsIK_BL");

	Params::DynamicNodeBPLibrary_GetHandSpeedCSHandsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetHorizontalPoseMeshRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFacingUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LowerSpineBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UpperSpineBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::GetHorizontalPoseMeshRotation_BL(class ACharacter* OwnCharacter, bool IsFacingUp, class FName LowerSpineBoneName, class FName UpperSpineBoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetHorizontalPoseMeshRotation_BL");

	Params::DynamicNodeBPLibrary_GetHorizontalPoseMeshRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IsFacingUp = IsFacingUp;
	Parms.LowerSpineBoneName = LowerSpineBoneName;
	Parms.UpperSpineBoneName = UpperSpineBoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastBlendSpaceMapVelocityValue_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::GetLastBlendSpaceMapVelocityValue_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastBlendSpaceMapVelocityValue_BL");

	Params::DynamicNodeBPLibrary_GetLastBlendSpaceMapVelocityValue_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastComplexNormalLegsIK_Left_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastComplexNormalLegsIK_Left_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastComplexNormalLegsIK_Left_BL");

	Params::DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Left_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastComplexNormalLegsIK_Right_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastComplexNormalLegsIK_Right_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastComplexNormalLegsIK_Right_BL");

	Params::DynamicNodeBPLibrary_GetLastComplexNormalLegsIK_Right_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_LeftFront_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastHitPointLegsIK_LeftFront_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastHitPointLegsIK_LeftFront_BL");

	Params::DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftFront_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_LeftRear_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastHitPointLegsIK_LeftRear_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastHitPointLegsIK_LeftRear_BL");

	Params::DynamicNodeBPLibrary_GetLastHitPointLegsIK_LeftRear_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_RightFront_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastHitPointLegsIK_RightFront_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastHitPointLegsIK_RightFront_BL");

	Params::DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightFront_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastHitPointLegsIK_RightRear_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastHitPointLegsIK_RightRear_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastHitPointLegsIK_RightRear_BL");

	Params::DynamicNodeBPLibrary_GetLastHitPointLegsIK_RightRear_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastOrientationLegsIK_Left_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseZYAxis                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Inverse                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetSimpleNormal                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::GetLastOrientationLegsIK_Left_BL(class ACharacter* OwnCharacter, int32 LegIndex, bool UseZYAxis, bool Inverse, bool GetSimpleNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastOrientationLegsIK_Left_BL");

	Params::DynamicNodeBPLibrary_GetLastOrientationLegsIK_Left_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.UseZYAxis = UseZYAxis;
	Parms.Inverse = Inverse;
	Parms.GetSimpleNormal = GetSimpleNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastOrientationLegsIK_Right_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseZYAxis                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Inverse                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetSimpleNormal                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::GetLastOrientationLegsIK_Right_BL(class ACharacter* OwnCharacter, int32 LegIndex, bool UseZYAxis, bool Inverse, bool GetSimpleNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastOrientationLegsIK_Right_BL");

	Params::DynamicNodeBPLibrary_GetLastOrientationLegsIK_Right_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.UseZYAxis = UseZYAxis;
	Parms.Inverse = Inverse;
	Parms.GetSimpleNormal = GetSimpleNormal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastPrelandedDistanceToWater_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistanceToWater                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetLastPrelandedDistanceToWater_BL(class ACharacter* OwnCharacter, float* OutDistanceToWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastPrelandedDistanceToWater_BL");

	Params::DynamicNodeBPLibrary_GetLastPrelandedDistanceToWater_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDistanceToWater != nullptr)
		*OutDistanceToWater = Parms.OutDistanceToWater;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastPrelandedHeight_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LastPrelandedHeight                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetLastPrelandedHeight_BL(class ACharacter* OwnCharacter, float* LastPrelandedHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastPrelandedHeight_BL");

	Params::DynamicNodeBPLibrary_GetLastPrelandedHeight_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LastPrelandedHeight != nullptr)
		*LastPrelandedHeight = Parms.LastPrelandedHeight;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastPrelandedWaterDepth_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutWaterDepth                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetLastPrelandedWaterDepth_BL(class ACharacter* OwnCharacter, float* OutWaterDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastPrelandedWaterDepth_BL");

	Params::DynamicNodeBPLibrary_GetLastPrelandedWaterDepth_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWaterDepth != nullptr)
		*OutWaterDepth = Parms.OutWaterDepth;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastTraceNormalLegsIK_Left_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastTraceNormalLegsIK_Left_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastTraceNormalLegsIK_Left_BL");

	Params::DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Left_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLastTraceNormalLegsIK_Right_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLastTraceNormalLegsIK_Right_BL(class ACharacter* OwnCharacter, int32 LegIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLastTraceNormalLegsIK_Right_BL");

	Params::DynamicNodeBPLibrary_GetLastTraceNormalLegsIK_Right_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetLocationBeforeIKHandsIK_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetComponentSpace                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetLocationBeforeIKHandsIK_BL(class ACharacter* OwnCharacter, int32 HandIndex, bool GetComponentSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetLocationBeforeIKHandsIK_BL");

	Params::DynamicNodeBPLibrary_GetLocationBeforeIKHandsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.GetComponentSpace = GetComponentSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetNormalBy3Point_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          A_RUp                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          B_LUp                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          C_Bot                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetNormalBy3Point_BL(const struct FVector& A_RUp, const struct FVector& B_LUp, const struct FVector& C_Bot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetNormalBy3Point_BL");

	Params::DynamicNodeBPLibrary_GetNormalBy3Point_BL Parms{};

	Parms.A_RUp = std::move(A_RUp);
	Parms.B_LUp = std::move(B_LUp);
	Parms.C_Bot = std::move(C_Bot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetNormalBy4Point_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          A_RUp                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          B_LUp                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          C_RBot                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          D_LBot                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UDynamicNodeBPLibrary::GetNormalBy4Point_BL(const struct FVector& A_RUp, const struct FVector& B_LUp, const struct FVector& C_RBot, const struct FVector& D_LBot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetNormalBy4Point_BL");

	Params::DynamicNodeBPLibrary_GetNormalBy4Point_BL Parms{};

	Parms.A_RUp = std::move(A_RUp);
	Parms.B_LUp = std::move(B_LUp);
	Parms.C_RBot = std::move(C_RBot);
	Parms.D_LBot = std::move(D_LBot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetNotifyDeltaTime_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName2                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseCurrentAnimAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FromSpecificAnimAsset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::GetNotifyDeltaTime_BL(class ACharacter* OwnCharacter, class FName NotifyName, class FName NotifyName2, bool UseCurrentAnimAsset, class UAnimationAsset* FromSpecificAnimAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetNotifyDeltaTime_BL");

	Params::DynamicNodeBPLibrary_GetNotifyDeltaTime_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NotifyName = NotifyName;
	Parms.NotifyName2 = NotifyName2;
	Parms.UseCurrentAnimAsset = UseCurrentAnimAsset;
	Parms.FromSpecificAnimAsset = FromSpecificAnimAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetNotifyTime_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseCurrentAnimAsset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FromSpecificAnimAsset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::GetNotifyTime_BL(class ACharacter* OwnCharacter, class FName NotifyName, bool UseCurrentAnimAsset, class UAnimationAsset* FromSpecificAnimAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetNotifyTime_BL");

	Params::DynamicNodeBPLibrary_GetNotifyTime_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NotifyName = NotifyName;
	Parms.UseCurrentAnimAsset = UseCurrentAnimAsset;
	Parms.FromSpecificAnimAsset = FromSpecificAnimAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetPrelandedHitInfo_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetPrelandedHitInfo_BL(class ACharacter* OwnCharacter, struct FHitResult* HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetPrelandedHitInfo_BL");

	Params::DynamicNodeBPLibrary_GetPrelandedHitInfo_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function DynamicNode.DynamicNodeBPLibrary.GetPrelandedWaterHitInfo_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    IsHitFound                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetPrelandedWaterHitInfo_BL(class ACharacter* OwnCharacter, struct FHitResult* HitResult, bool* IsHitFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetPrelandedWaterHitInfo_BL");

	Params::DynamicNodeBPLibrary_GetPrelandedWaterHitInfo_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);

	if (IsHitFound != nullptr)
		*IsHitFound = Parms.IsHitFound;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetSortedDistanceArray_DN
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    UseReverse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> UDynamicNodeBPLibrary::GetSortedDistanceArray_DN(bool UseReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetSortedDistanceArray_DN");

	Params::DynamicNodeBPLibrary_GetSortedDistanceArray_DN Parms{};

	Parms.UseReverse = UseReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetSortedDistanceIndexArray_DN
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    UseReverse                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UDynamicNodeBPLibrary::GetSortedDistanceIndexArray_DN(bool UseReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetSortedDistanceIndexArray_DN");

	Params::DynamicNodeBPLibrary_GetSortedDistanceIndexArray_DN Parms{};

	Parms.UseReverse = UseReverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetStartSwimmStatus_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetStartSwimmStatus_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetStartSwimmStatus_BL");

	Params::DynamicNodeBPLibrary_GetStartSwimmStatus_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetSwimmMachineMoveStatus_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESwimmingStatus_DN                      SwimmingStatus                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::GetSwimmMachineMoveStatus_BL(class ACharacter* OwnCharacter, ESwimmingStatus_DN* SwimmingStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetSwimmMachineMoveStatus_BL");

	Params::DynamicNodeBPLibrary_GetSwimmMachineMoveStatus_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SwimmingStatus != nullptr)
		*SwimmingStatus = Parms.SwimmingStatus;
}


// Function DynamicNode.DynamicNodeBPLibrary.GetVerticalPoseMeshRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RootBoneName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UDynamicNodeBPLibrary::GetVerticalPoseMeshRotation_BL(class ACharacter* OwnCharacter, class FName RootBoneName, const struct FVector& Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "GetVerticalPoseMeshRotation_BL");

	Params::DynamicNodeBPLibrary_GetVerticalPoseMeshRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootBoneName = RootBoneName;
	Parms.Axis = std::move(Axis);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKAlignToActor_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    PreAlignHandAnimation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandAnimPlayFromNotify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimTransitionTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddHandRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ClampHandDeltaAngle                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxIterToFixClampPosition                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKAlignToActor_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class UAnimSequence* PreAlignHandAnimation, class FName HandAnimPlayFromNotify, float HandAnimTransitionTime, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, class FName HandSocketName, const struct FRotator& AddHandRotation, float ClampHandDeltaAngle, int32 MaxIterToFixClampPosition, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKAlignToActor_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKAlignToActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.PreAlignHandAnimation = PreAlignHandAnimation;
	Parms.HandAnimPlayFromNotify = HandAnimPlayFromNotify;
	Parms.HandAnimTransitionTime = HandAnimTransitionTime;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.HandSocketName = HandSocketName;
	Parms.AddHandRotation = std::move(AddHandRotation);
	Parms.ClampHandDeltaAngle = ClampHandDeltaAngle;
	Parms.MaxIterToFixClampPosition = MaxIterToFixClampPosition;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKAlignToMesh_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    PreAlignHandAnimation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandAnimPlayFromNotify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimTransitionTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   TargetMComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          MeshOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddHandRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ClampHandDeltaAngle                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxIterToFixClampPosition                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKAlignToMesh_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class UAnimSequence* PreAlignHandAnimation, class FName HandAnimPlayFromNotify, float HandAnimTransitionTime, class UMeshComponent* TargetMComponent, const struct FVector& MeshOffset, bool OffsetRelative, class FName HandSocketName, const struct FRotator& AddHandRotation, float ClampHandDeltaAngle, int32 MaxIterToFixClampPosition, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKAlignToMesh_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKAlignToMesh_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.PreAlignHandAnimation = PreAlignHandAnimation;
	Parms.HandAnimPlayFromNotify = HandAnimPlayFromNotify;
	Parms.HandAnimTransitionTime = HandAnimTransitionTime;
	Parms.TargetMComponent = TargetMComponent;
	Parms.MeshOffset = std::move(MeshOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.HandSocketName = HandSocketName;
	Parms.AddHandRotation = std::move(AddHandRotation);
	Parms.ClampHandDeltaAngle = ClampHandDeltaAngle;
	Parms.MaxIterToFixClampPosition = MaxIterToFixClampPosition;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKAlignToSocket_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    PreAlignHandAnimation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandAnimPlayFromNotify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimTransitionTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   TargetMComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TargetSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddHandRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ClampHandDeltaAngle                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxIterToFixClampPosition                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKAlignToSocket_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class UAnimSequence* PreAlignHandAnimation, class FName HandAnimPlayFromNotify, float HandAnimTransitionTime, class UMeshComponent* TargetMComponent, class FName TargetSocketName, class FName HandSocketName, const struct FRotator& AddHandRotation, float ClampHandDeltaAngle, int32 MaxIterToFixClampPosition, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKAlignToSocket_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKAlignToSocket_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.PreAlignHandAnimation = PreAlignHandAnimation;
	Parms.HandAnimPlayFromNotify = HandAnimPlayFromNotify;
	Parms.HandAnimTransitionTime = HandAnimTransitionTime;
	Parms.TargetMComponent = TargetMComponent;
	Parms.TargetSocketName = TargetSocketName;
	Parms.HandSocketName = HandSocketName;
	Parms.AddHandRotation = std::move(AddHandRotation);
	Parms.ClampHandDeltaAngle = ClampHandDeltaAngle;
	Parms.MaxIterToFixClampPosition = MaxIterToFixClampPosition;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKCheckConeAngle_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftMove                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightMove                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKCheckConeAngle_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, int32 HandIndex, float* LeftMove, float* RightMove, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, float ClampDirectionAngleLeft, float ClampDirectionAngleRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKCheckConeAngle_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKCheckConeAngle_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (LeftMove != nullptr)
		*LeftMove = Parms.LeftMove;

	if (RightMove != nullptr)
		*RightMove = Parms.RightMove;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKCheckDistance_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::HandsCCDIKCheckDistance_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, int32 HandIndex, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKCheckDistance_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKCheckDistance_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKCheckDistanceXY_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::HandsCCDIKCheckDistanceXY_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, int32 HandIndex, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKCheckDistanceXY_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKCheckDistanceXY_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKFollowActionPropsActor_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool Reverse, bool StartMove, int32 IntermediatePointsReached, bool HandMoveBack, bool EndAction)>EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    HandAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandAnimPlayFromNotify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimTransitionTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimStartMovingOffset                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActionPropsActor_DN*             ActionPropsActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToMoveBack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKFollowActionPropsActor_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(bool Reverse, bool StartMove, int32 IntermediatePointsReached, bool HandMoveBack, bool EndAction)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class UAnimSequence* HandAnimation, class FName HandAnimPlayFromNotify, float HandAnimTransitionTime, float HandAnimStartMovingOffset, class AActionPropsActor_DN* ActionPropsActor, class FName HandSocketName, const struct FRotator& AddUpperarmRotation, float TimeToMove, float TimeToMoveBack, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKFollowActionPropsActor_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.HandAnimation = HandAnimation;
	Parms.HandAnimPlayFromNotify = HandAnimPlayFromNotify;
	Parms.HandAnimTransitionTime = HandAnimTransitionTime;
	Parms.HandAnimStartMovingOffset = HandAnimStartMovingOffset;
	Parms.ActionPropsActor = ActionPropsActor;
	Parms.HandSocketName = HandSocketName;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.TimeToMoveBack = TimeToMoveBack;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKFollowActionPropsActor_TwoHands_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool Reverse, bool StartMove, int32 IntermediatePointsReached, bool HandMoveBack, bool EndAction)>EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FHandTargetSocketPairs_DN>HandIdxTargetSocketPairs                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class AActionPropsActor_DN*             ActionPropsActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToMoveBack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKFollowActionPropsActor_TwoHands_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(bool Reverse, bool StartMove, int32 IntermediatePointsReached, bool HandMoveBack, bool EndAction)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, const TArray<struct FHandTargetSocketPairs_DN>& HandIdxTargetSocketPairs, class AActionPropsActor_DN* ActionPropsActor, float TimeToMove, float TimeToMoveBack, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKFollowActionPropsActor_TwoHands_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKFollowActionPropsActor_TwoHands_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIdxTargetSocketPairs = std::move(HandIdxTargetSocketPairs);
	Parms.ActionPropsActor = ActionPropsActor;
	Parms.TimeToMove = TimeToMove;
	Parms.TimeToMoveBack = TimeToMoveBack;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKFollowCustomActor_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    HandAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandAnimPlayFromNotify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimTransitionTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   TargetMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHandsCCDIKTargetHandFollowData_DN>TargetHandDataArray                                    (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKFollowCustomActor_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class UAnimSequence* HandAnimation, class FName HandAnimPlayFromNotify, float HandAnimTransitionTime, class UMeshComponent* TargetMeshComponent, class FName HandSocketName, const TArray<struct FHandsCCDIKTargetHandFollowData_DN>& TargetHandDataArray, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKFollowCustomActor_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKFollowCustomActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.HandAnimation = HandAnimation;
	Parms.HandAnimPlayFromNotify = HandAnimPlayFromNotify;
	Parms.HandAnimTransitionTime = HandAnimTransitionTime;
	Parms.TargetMeshComponent = TargetMeshComponent;
	Parms.HandSocketName = HandSocketName;
	Parms.TargetHandDataArray = std::move(TargetHandDataArray);
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKGrabActor_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex, class FName SocketName, class AActor* Actor)>EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    GrabAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimTimerOffset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartNotifyName_Optional                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabSocketNameOverride                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         LocationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachmentRule                         RotationRule                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AttachmentTransitionDuration                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetPositionTolerance                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKGrabActor_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex, class FName SocketName, class AActor* Actor)>& EventOnComplited, int32 HandIndex, class UAnimSequence* GrabAnimation, float TransitionTime, float AnimTimerOffset, class FName StartNotifyName_Optional, class FName GrabSocketNameOverride, EAttachmentRule LocationRule, EAttachmentRule RotationRule, float AttachmentTransitionDuration, float TargetPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKGrabActor_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKGrabActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.HandIndex = HandIndex;
	Parms.GrabAnimation = GrabAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.AnimTimerOffset = AnimTimerOffset;
	Parms.StartNotifyName_Optional = StartNotifyName_Optional;
	Parms.GrabSocketNameOverride = GrabSocketNameOverride;
	Parms.LocationRule = LocationRule;
	Parms.RotationRule = RotationRule;
	Parms.AttachmentTransitionDuration = AttachmentTransitionDuration;
	Parms.TargetPositionTolerance = TargetPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKPrepareToPressButton_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetIfMoving                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKPrepareToPressButton_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, bool ResetIfMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKPrepareToPressButton_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKPrepareToPressButton_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.ResetIfMoving = ResetIfMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKPressButton_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex, bool StartPressing)>EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HideFingerWhenBack                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UsePreparePositionWhenBack                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BackMoveBoneIndex                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BackMoveDistance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToPress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToBack                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKPressButton_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex, bool StartPressing)>& EventOnComplited, int32 HandIndex, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, bool HideFingerWhenBack, bool UsePreparePositionWhenBack, int32 BackMoveBoneIndex, float BackMoveDistance, const struct FRotator& AddUpperarmRotation, float TimeToMove, float TimeToPress, float TimeToBack, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKPressButton_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKPressButton_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.HideFingerWhenBack = HideFingerWhenBack;
	Parms.UsePreparePositionWhenBack = UsePreparePositionWhenBack;
	Parms.BackMoveBoneIndex = BackMoveBoneIndex;
	Parms.BackMoveDistance = BackMoveDistance;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.TimeToPress = TimeToPress;
	Parms.TimeToBack = TimeToBack;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKPressButtonSimple_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex, bool StartPressing)>EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToPress                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToBack                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKPressButtonSimple_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex, bool StartPressing)>& EventOnComplited, int32 HandIndex, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, const struct FRotator& AddUpperarmRotation, float TimeToMove, float TimeToPress, float TimeToBack, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKPressButtonSimple_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKPressButtonSimple_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.TimeToPress = TimeToPress;
	Parms.TimeToBack = TimeToBack;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKReset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetHandAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKReset_BL(class ACharacter* OwnCharacter, int32 HandIndex, float TimeToMove, bool ResetHandAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKReset_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKReset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TimeToMove = TimeToMove;
	Parms.ResetHandAnimation = ResetHandAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKResetHandMoveWhenCharacterMove_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Reset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKResetHandMoveWhenCharacterMove_BL(class ACharacter* OwnCharacter, int32 HandIndex, bool Reset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKResetHandMoveWhenCharacterMove_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKResetHandMoveWhenCharacterMove_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.Reset = Reset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKResetPropsActor_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActionPropsActor_DN*             ActionPropsActor                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKResetPropsActor_BL(class ACharacter* OwnCharacter, int32 HandIndex, class AActionPropsActor_DN* ActionPropsActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKResetPropsActor_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKResetPropsActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.ActionPropsActor = ActionPropsActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetActorTarget_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventMoveOutOfRange                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ActorIsMovable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKSetActorTarget_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& EventMoveOutOfRange, int32 HandIndex, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, bool ActorIsMovable, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKSetActorTarget_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKSetActorTarget_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.EventMoveOutOfRange = EventMoveOutOfRange;
	Parms.HandIndex = HandIndex;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.ActorIsMovable = ActorIsMovable;
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetComponentSpaceTarget_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Target_CS                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKSetComponentSpaceTarget_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, int32 HandIndex, const struct FVector& Target_CS, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKSetComponentSpaceTarget_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKSetComponentSpaceTarget_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.HandIndex = HandIndex;
	Parms.Target_CS = std::move(Target_CS);
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetNewTrackingParams_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKSetNewTrackingParams_BL(class ACharacter* OwnCharacter, int32 HandIndex, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKSetNewTrackingParams_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKSetNewTrackingParams_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKSetWorldSpaceTarget_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Target_WS                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKSetWorldSpaceTarget_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, int32 HandIndex, const struct FVector& Target_WS, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKSetWorldSpaceTarget_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKSetWorldSpaceTarget_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.HandIndex = HandIndex;
	Parms.Target_WS = std::move(Target_WS);
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKStartGrabActor_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        EventOnComplited                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TDelegate<void(int32 HandIndex)>        MoveOutOfRangeDelegate                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    PreGrabHandAnimation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HandAnimPlayFromNotify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HandAnimTransitionTime                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ActorOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             GrabSocketName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHandsCCDIKAlignHandData_DN      AlignHandToActor                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         AddUpperarmRotation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TimeToMove                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Min                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength_Max                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FinalPositionTolerance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKStartGrabActor_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, const TDelegate<void(int32 HandIndex)>& EventOnComplited, const TDelegate<void(int32 HandIndex)>& MoveOutOfRangeDelegate, int32 HandIndex, class UAnimSequence* PreGrabHandAnimation, class FName HandAnimPlayFromNotify, float HandAnimTransitionTime, class AActor* TargetActor, const struct FVector& ActorOffset, bool OffsetRelative, class FName GrabSocketName, const struct FHandsCCDIKAlignHandData_DN& AlignHandToActor, const struct FRotator& AddUpperarmRotation, float TimeToMove, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength_Min, float CalmpDistanceHandLength_Max, float FinalPositionTolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKStartGrabActor_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKStartGrabActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EventOnComplited = EventOnComplited;
	Parms.MoveOutOfRangeDelegate = MoveOutOfRangeDelegate;
	Parms.HandIndex = HandIndex;
	Parms.PreGrabHandAnimation = PreGrabHandAnimation;
	Parms.HandAnimPlayFromNotify = HandAnimPlayFromNotify;
	Parms.HandAnimTransitionTime = HandAnimTransitionTime;
	Parms.TargetActor = TargetActor;
	Parms.ActorOffset = std::move(ActorOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.GrabSocketName = GrabSocketName;
	Parms.AlignHandToActor = std::move(AlignHandToActor);
	Parms.AddUpperarmRotation = std::move(AddUpperarmRotation);
	Parms.TimeToMove = TimeToMove;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength_Min = CalmpDistanceHandLength_Min;
	Parms.CalmpDistanceHandLength_Max = CalmpDistanceHandLength_Max;
	Parms.FinalPositionTolerance = FinalPositionTolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsCCDIKUseGrabActorRelativeSocket_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRelativeActorSocket                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ApplyRelativeTransformBeforeHandSocket                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsCCDIKUseGrabActorRelativeSocket_BL(class ACharacter* OwnCharacter, int32 HandIndex, bool UseRelativeActorSocket, class AActor* TargetActor, class FName SocketName, bool ApplyRelativeTransformBeforeHandSocket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsCCDIKUseGrabActorRelativeSocket_BL");

	Params::DynamicNodeBPLibrary_HandsCCDIKUseGrabActorRelativeSocket_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.UseRelativeActorSocket = UseRelativeActorSocket;
	Parms.TargetActor = TargetActor;
	Parms.SocketName = SocketName;
	Parms.ApplyRelativeTransformBeforeHandSocket = ApplyRelativeTransformBeforeHandSocket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKCalibrate_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         DeltaRotation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           OutRotatorStr                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKCalibrate_BL(class ACharacter* OwnCharacter, int32 HandIndex, const struct FRotator& DeltaRotation, class FString* OutRotatorStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKCalibrate_BL");

	Params::DynamicNodeBPLibrary_HandsIKCalibrate_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.DeltaRotation = std::move(DeltaRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotatorStr != nullptr)
		*OutRotatorStr = std::move(Parms.OutRotatorStr);
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKGetTransitionTime_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeTranslation                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRotation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKGetTransitionTime_BL(class ACharacter* OwnCharacter, int32 HandIndex, float* TransitionTimeTranslation, float* TransitionTimeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKGetTransitionTime_BL");

	Params::DynamicNodeBPLibrary_HandsIKGetTransitionTime_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TransitionTimeTranslation != nullptr)
		*TransitionTimeTranslation = Parms.TransitionTimeTranslation;

	if (TransitionTimeRotation != nullptr)
		*TransitionTimeRotation = Parms.TransitionTimeRotation;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKMoveToActor_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SolveUpperarm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKMoveToActor_BL(class ACharacter* OwnCharacter, int32 HandIndex, class AActor* Actor, bool SolveUpperarm, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, bool ResetOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKMoveToActor_BL");

	Params::DynamicNodeBPLibrary_HandsIKMoveToActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.Actor = Actor;
	Parms.SolveUpperarm = SolveUpperarm;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.ResetOffset = ResetOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKOverrideSpecificData_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHandsIKSpecificDataOverride_DN>HandsIKSpecificDataArray                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKOverrideSpecificData_BL(class ACharacter* OwnCharacter, int32 HandIndex, const TArray<struct FHandsIKSpecificDataOverride_DN>& HandsIKSpecificDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKOverrideSpecificData_BL");

	Params::DynamicNodeBPLibrary_HandsIKOverrideSpecificData_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.HandsIKSpecificDataArray = std::move(HandsIKSpecificDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKResetAll_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKResetAll_BL(class ACharacter* OwnCharacter, int32 HandIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKResetAll_BL");

	Params::DynamicNodeBPLibrary_HandsIKResetAll_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetInitDeltaHandRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InitRotation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetInitDeltaHandRotation_BL(class ACharacter* OwnCharacter, int32 HandIndex, const struct FRotator& InitRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetInitDeltaHandRotation_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetInitDeltaHandRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.InitRotation = std::move(InitRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetOffsetRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OffsetRotator_CS                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetOffsetRotation_BL(class ACharacter* OwnCharacter, int32 HandIndex, const struct FRotator& OffsetRotator_CS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetOffsetRotation_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetOffsetRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.OffsetRotator_CS = std::move(OffsetRotator_CS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetOffsetTranslation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Offset_CS                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SolveUpperarm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetOffsetTranslation_BL(class ACharacter* OwnCharacter, int32 HandIndex, const struct FVector& Offset_CS, bool SolveUpperarm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetOffsetTranslation_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetOffsetTranslation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.Offset_CS = std::move(Offset_CS);
	Parms.SolveUpperarm = SolveUpperarm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetTransitionTime_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeTranslation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRotation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetTransitionTime_BL(class ACharacter* OwnCharacter, int32 HandIndex, float TransitionTimeTranslation, float TransitionTimeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetTransitionTime_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetTransitionTime_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TransitionTimeTranslation = TransitionTimeTranslation;
	Parms.TransitionTimeRotation = TransitionTimeRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetTransitionTimeNext_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurTransitionTimeTranslation                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurTransitionTimeRotation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NextTransitionTimeTranslation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NextTransitionTimeRotation                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetTransitionTimeNext_BL(class ACharacter* OwnCharacter, int32 HandIndex, float CurTransitionTimeTranslation, float CurTransitionTimeRotation, float NextTransitionTimeTranslation, float NextTransitionTimeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetTransitionTimeNext_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetTransitionTimeNext_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.CurTransitionTimeTranslation = CurTransitionTimeTranslation;
	Parms.CurTransitionTimeRotation = CurTransitionTimeRotation;
	Parms.NextTransitionTimeTranslation = NextTransitionTimeTranslation;
	Parms.NextTransitionTimeRotation = NextTransitionTimeRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetWorldSpaceRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         TargetRotator_WS                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetWorldSpaceRotation_BL(class ACharacter* OwnCharacter, int32 HandIndex, const struct FRotator& TargetRotator_WS, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetWorldSpaceRotation_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetWorldSpaceRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TargetRotator_WS = std::move(TargetRotator_WS);
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKSetWorldSpaceTranslation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Target_WS                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SolveUpperarm                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalmpDistanceHandLength                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKSetWorldSpaceTranslation_BL(class ACharacter* OwnCharacter, int32 HandIndex, const struct FVector& Target_WS, bool SolveUpperarm, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, float CalmpDistanceHandLength, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKSetWorldSpaceTranslation_BL");

	Params::DynamicNodeBPLibrary_HandsIKSetWorldSpaceTranslation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.Target_WS = std::move(Target_WS);
	Parms.SolveUpperarm = SolveUpperarm;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.CalmpDistanceHandLength = CalmpDistanceHandLength;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKStopTracking_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKStopTracking_BL(class ACharacter* OwnCharacter, int32 HandIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKStopTracking_BL");

	Params::DynamicNodeBPLibrary_HandsIKStopTracking_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HandsIKTurnToActor_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleLeft                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClampDirectionAngleRight                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::HandsIKTurnToActor_BL(class ACharacter* OwnCharacter, int32 HandIndex, class AActor* Actor, float ClampDirectionAngleLeft, float ClampDirectionAngleRight, bool ResetOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HandsIKTurnToActor_BL");

	Params::DynamicNodeBPLibrary_HandsIKTurnToActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.Actor = Actor;
	Parms.ClampDirectionAngleLeft = ClampDirectionAngleLeft;
	Parms.ClampDirectionAngleRight = ClampDirectionAngleRight;
	Parms.ResetOffset = ResetOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.HasDefferedTransitionAnimation_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::HasDefferedTransitionAnimation_BL(class ACharacter* OwnCharacter, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "HasDefferedTransitionAnimation_BL");

	Params::DynamicNodeBPLibrary_HasDefferedTransitionAnimation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IfWaterDepthMoreThan_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TestWaterDepth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::IfWaterDepthMoreThan_BL(class ACharacter* OwnCharacter, float TestWaterDepth, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IfWaterDepthMoreThan_BL");

	Params::DynamicNodeBPLibrary_IfWaterDepthMoreThan_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TestWaterDepth = TestWaterDepth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.ImpactHandle_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ImpactAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTill_Notify                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpulseAmplitude                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideImpactDirection                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OverrideImpactDirectionVector                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::ImpactHandle_BL(class ACharacter* OwnCharacter, class UAnimationAsset* ImpactAnimation, class FName PlayTill_Notify, float TransitionTime, float ImpulseAmplitude, bool bOverrideImpactDirection, const struct FVector& OverrideImpactDirectionVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ImpactHandle_BL");

	Params::DynamicNodeBPLibrary_ImpactHandle_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ImpactAnimation = ImpactAnimation;
	Parms.PlayTill_Notify = PlayTill_Notify;
	Parms.TransitionTime = TransitionTime;
	Parms.ImpulseAmplitude = ImpulseAmplitude;
	Parms.bOverrideImpactDirection = bOverrideImpactDirection;
	Parms.OverrideImpactDirectionVector = std::move(OverrideImpactDirectionVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.InsertDistanceIndexMap_DN
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ClearMapBeforeInsert                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::InsertDistanceIndexMap_DN(float Distance, int32 Param_Index, bool ClearMapBeforeInsert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "InsertDistanceIndexMap_DN");

	Params::DynamicNodeBPLibrary_InsertDistanceIndexMap_DN Parms{};

	Parms.Distance = Distance;
	Parms.Param_Index = Param_Index;
	Parms.ClearMapBeforeInsert = ClearMapBeforeInsert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsAimOffsetEnabled_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsAimOffsetEnabled_BL(class ACharacter* OwnCharacter, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsAimOffsetEnabled_BL");

	Params::DynamicNodeBPLibrary_IsAimOffsetEnabled_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsAnimationSelectedInAnimationStack_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsAnimationSelectedInAnimationStack_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsAnimationSelectedInAnimationStack_BL");

	Params::DynamicNodeBPLibrary_IsAnimationSelectedInAnimationStack_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsAnimationStackActive_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsAnimationStackActive_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsAnimationStackActive_BL");

	Params::DynamicNodeBPLibrary_IsAnimationStackActive_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsAssetPlaying_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsAssetPlaying_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class FName BoneName, class UAnimationAsset* AnimationAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsAssetPlaying_BL");

	Params::DynamicNodeBPLibrary_IsAssetPlaying_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;
	Parms.AnimationAsset = AnimationAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsBoxesIntersect_DN
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBox                             Box1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FBox                             Box2                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsBoxesIntersect_DN(const struct FBox& Box1, const struct FBox& Box2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsBoxesIntersect_DN");

	Params::DynamicNodeBPLibrary_IsBoxesIntersect_DN Parms{};

	Parms.Box1 = std::move(Box1);
	Parms.Box2 = std::move(Box2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsCharacterInWaterVolume_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthOut                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsCharacterInWaterVolume_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, float* DepthOut, float DepthLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsCharacterInWaterVolume_BL");

	Params::DynamicNodeBPLibrary_IsCharacterInWaterVolume_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.DepthLimit = DepthLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	if (DepthOut != nullptr)
		*DepthOut = Parms.DepthOut;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsCharacterInWaterVolumePure_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthOut                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsCharacterInWaterVolumePure_BL(class ACharacter* OwnCharacter, float* DepthOut, float DepthLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsCharacterInWaterVolumePure_BL");

	Params::DynamicNodeBPLibrary_IsCharacterInWaterVolumePure_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.DepthLimit = DepthLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DepthOut != nullptr)
		*DepthOut = Parms.DepthOut;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsDelegateOnAnimFinBlendBound_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsDelegateOnAnimFinBlendBound_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsDelegateOnAnimFinBlendBound_BL");

	Params::DynamicNodeBPLibrary_IsDelegateOnAnimFinBlendBound_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsDiving_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::IsDiving_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsDiving_BL");

	Params::DynamicNodeBPLibrary_IsDiving_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsEquipUnequip_Active_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsEquipUnequip_Active_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsEquipUnequip_Active_BL");

	Params::DynamicNodeBPLibrary_IsEquipUnequip_Active_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsFacingUp_3Bone_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PelvisBoneName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Spine_1BoneName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Spine_2BoneName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsFacingUp_3Bone_BL(class ACharacter* OwnCharacter, class FName PelvisBoneName, class FName Spine_1BoneName, class FName Spine_2BoneName, const struct FVector& Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsFacingUp_3Bone_BL");

	Params::DynamicNodeBPLibrary_IsFacingUp_3Bone_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.PelvisBoneName = PelvisBoneName;
	Parms.Spine_1BoneName = Spine_1BoneName;
	Parms.Spine_2BoneName = Spine_2BoneName;
	Parms.Axis = std::move(Axis);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsFacingUp_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PelvisBoneName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsFacingUp_BL(class ACharacter* OwnCharacter, class FName PelvisBoneName, const struct FVector& Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsFacingUp_BL");

	Params::DynamicNodeBPLibrary_IsFacingUp_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.PelvisBoneName = PelvisBoneName;
	Parms.Axis = std::move(Axis);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsImpactAnimationPlay_BL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsImpactAnimationPlay_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsImpactAnimationPlay_BL");

	Params::DynamicNodeBPLibrary_IsImpactAnimationPlay_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsJumpInWater_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::IsJumpInWater_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsJumpInWater_BL");

	Params::DynamicNodeBPLibrary_IsJumpInWater_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsLookAtActor_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesEOutEnum_DN                    Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CheckPendingDisabled                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsLookAtActor_BL(class ACharacter* OwnCharacter, EBranchesEOutEnum_DN* Branches, class AActor* Actor, bool CheckPendingDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsLookAtActor_BL");

	Params::DynamicNodeBPLibrary_IsLookAtActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Actor = Actor;
	Parms.CheckPendingDisabled = CheckPendingDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsLookAtEnable_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesEOutEnum_DN                    Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CheckPendingDisabled                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsLookAtEnable_BL(class ACharacter* OwnCharacter, EBranchesEOutEnum_DN* Branches, bool CheckPendingDisabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsLookAtEnable_BL");

	Params::DynamicNodeBPLibrary_IsLookAtEnable_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CheckPendingDisabled = CheckPendingDisabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsPrelanded_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::IsPrelanded_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsPrelanded_BL");

	Params::DynamicNodeBPLibrary_IsPrelanded_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsShallowWaterMoving_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsShallowWaterMoving_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsShallowWaterMoving_BL");

	Params::DynamicNodeBPLibrary_IsShallowWaterMoving_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsShallowWaterMovingEnd_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::IsShallowWaterMovingEnd_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsShallowWaterMovingEnd_BL");

	Params::DynamicNodeBPLibrary_IsShallowWaterMovingEnd_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsSurfacing_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::IsSurfacing_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsSurfacing_BL");

	Params::DynamicNodeBPLibrary_IsSurfacing_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsVerticalPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LowerSpineBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UpperSpineBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VerticalFactorOut                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VerticalFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsVerticalPose_BL(class ACharacter* OwnCharacter, class FName LowerSpineBoneName, class FName UpperSpineBoneName, float* VerticalFactorOut, float VerticalFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsVerticalPose_BL");

	Params::DynamicNodeBPLibrary_IsVerticalPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LowerSpineBoneName = LowerSpineBoneName;
	Parms.UpperSpineBoneName = UpperSpineBoneName;
	Parms.VerticalFactor = VerticalFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (VerticalFactorOut != nullptr)
		*VerticalFactorOut = Parms.VerticalFactorOut;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.IsVerticalPoseRayTrace_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LowerSpineBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             UpperSpineBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VerticalFactorOut                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VerticalFactor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowDebug                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::IsVerticalPoseRayTrace_BL(class ACharacter* OwnCharacter, class FName LowerSpineBoneName, class FName UpperSpineBoneName, float TraceHeight, float* VerticalFactorOut, float VerticalFactor, bool ShowDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "IsVerticalPoseRayTrace_BL");

	Params::DynamicNodeBPLibrary_IsVerticalPoseRayTrace_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LowerSpineBoneName = LowerSpineBoneName;
	Parms.UpperSpineBoneName = UpperSpineBoneName;
	Parms.TraceHeight = TraceHeight;
	Parms.VerticalFactor = VerticalFactor;
	Parms.ShowDebug = ShowDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (VerticalFactorOut != nullptr)
		*VerticalFactorOut = Parms.VerticalFactorOut;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartJumpAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FallingAnimation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  LandedAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartJumpPlayTillNotify                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LandedPlayFromNotify                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LandedPlayTillNotify                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_SJ                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_FLoop                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_L                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MovementSpeedWhenDisableLanded                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::JumpMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* StartJumpAnimation, class UAnimationAsset* FallingAnimation, class UAnimationAsset* LandedAnimation, class FName StartJumpPlayTillNotify, class FName LandedPlayFromNotify, class FName LandedPlayTillNotify, float TransitionTime_SJ, float TransitionTime_FLoop, float TransitionTime_L, float PlayRate, float MovementSpeedWhenDisableLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachine_BL");

	Params::DynamicNodeBPLibrary_JumpMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.StartJumpAnimation = StartJumpAnimation;
	Parms.FallingAnimation = FallingAnimation;
	Parms.LandedAnimation = LandedAnimation;
	Parms.StartJumpPlayTillNotify = StartJumpPlayTillNotify;
	Parms.LandedPlayFromNotify = LandedPlayFromNotify;
	Parms.LandedPlayTillNotify = LandedPlayTillNotify;
	Parms.TransitionTime_SJ = TransitionTime_SJ;
	Parms.TransitionTime_FLoop = TransitionTime_FLoop;
	Parms.TransitionTime_L = TransitionTime_L;
	Parms.PlayRate = PlayRate;
	Parms.MovementSpeedWhenDisableLanded = MovementSpeedWhenDisableLanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachine_BlockMovementUntilLandedFin_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  LandedAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BlockMovementAndRotation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::JumpMachine_BlockMovementUntilLandedFin_BL(class ACharacter* OwnCharacter, class UAnimationAsset* LandedAnimation, bool BlockMovementAndRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachine_BlockMovementUntilLandedFin_BL");

	Params::DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LandedAnimation = LandedAnimation;
	Parms.BlockMovementAndRotation = BlockMovementAndRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BlockMovementAndRotation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL(class ACharacter* OwnCharacter, bool BlockMovementAndRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL");

	Params::DynamicNodeBPLibrary_JumpMachine_BlockMovementUntilLandedFin_OneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BlockMovementAndRotation = BlockMovementAndRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineExt_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartJumpAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FallingAnimation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  LongFallingAnimation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  PreLandedAnimationOptional                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  LandedAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartJumpPlayTillNotify                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LandedPlayFromNotify                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LandedPlayTillNotify                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_SJ                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_FLoop                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_LFLoop                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_PL_Optional                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_L                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MovementSpeedWhenDisableLanded                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LongFallingThresholdVelocity                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LongFallingThresholdUseOnlyZVel                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreLandedHeightOptional                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PreLandedVelocityTresholdOptional                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::JumpMachineExt_BL(class ACharacter* OwnCharacter, class UAnimationAsset* StartJumpAnimation, class UAnimationAsset* FallingAnimation, class UAnimationAsset* LongFallingAnimation, class UAnimationAsset* PreLandedAnimationOptional, class UAnimationAsset* LandedAnimation, class FName StartJumpPlayTillNotify, class FName LandedPlayFromNotify, class FName LandedPlayTillNotify, float TransitionTime_SJ, float TransitionTime_FLoop, float TransitionTime_LFLoop, float TransitionTime_PL_Optional, float TransitionTime_L, float PlayRate, float MovementSpeedWhenDisableLanded, float LongFallingThresholdVelocity, bool LongFallingThresholdUseOnlyZVel, float PreLandedHeightOptional, float PreLandedVelocityTresholdOptional)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachineExt_BL");

	Params::DynamicNodeBPLibrary_JumpMachineExt_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.StartJumpAnimation = StartJumpAnimation;
	Parms.FallingAnimation = FallingAnimation;
	Parms.LongFallingAnimation = LongFallingAnimation;
	Parms.PreLandedAnimationOptional = PreLandedAnimationOptional;
	Parms.LandedAnimation = LandedAnimation;
	Parms.StartJumpPlayTillNotify = StartJumpPlayTillNotify;
	Parms.LandedPlayFromNotify = LandedPlayFromNotify;
	Parms.LandedPlayTillNotify = LandedPlayTillNotify;
	Parms.TransitionTime_SJ = TransitionTime_SJ;
	Parms.TransitionTime_FLoop = TransitionTime_FLoop;
	Parms.TransitionTime_LFLoop = TransitionTime_LFLoop;
	Parms.TransitionTime_PL_Optional = TransitionTime_PL_Optional;
	Parms.TransitionTime_L = TransitionTime_L;
	Parms.PlayRate = PlayRate;
	Parms.MovementSpeedWhenDisableLanded = MovementSpeedWhenDisableLanded;
	Parms.LongFallingThresholdVelocity = LongFallingThresholdVelocity;
	Parms.LongFallingThresholdUseOnlyZVel = LongFallingThresholdUseOnlyZVel;
	Parms.PreLandedHeightOptional = PreLandedHeightOptional;
	Parms.PreLandedVelocityTresholdOptional = PreLandedVelocityTresholdOptional;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineExt_MoveTracePoint_OneFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityVectorDistance                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ZDecreaseFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::JumpMachineExt_MoveTracePoint_OneFrame_BL(class ACharacter* OwnCharacter, float VelocityVectorDistance, float ZDecreaseFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachineExt_MoveTracePoint_OneFrame_BL");

	Params::DynamicNodeBPLibrary_JumpMachineExt_MoveTracePoint_OneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.VelocityVectorDistance = VelocityVectorDistance;
	Parms.ZDecreaseFactor = ZDecreaseFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineExt_SetTraceOffset_OneFrame_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceOffsetWS                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::JumpMachineExt_SetTraceOffset_OneFrame_BL(class ACharacter* OwnCharacter, const struct FVector& TraceOffsetWS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachineExt_SetTraceOffset_OneFrame_BL");

	Params::DynamicNodeBPLibrary_JumpMachineExt_SetTraceOffset_OneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TraceOffsetWS = std::move(TraceOffsetWS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.JumpMachineSimple_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  JumpAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartJumpPlayFromNotify                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartJumpPlayTillNotify                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LandedPlayFromNotify                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LandedPlayTillNotify                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_SJ                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_FLoop                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_L                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MovementSpeedWhenDisableLanded                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::JumpMachineSimple_BL(class ACharacter* OwnCharacter, class UAnimationAsset* JumpAnimation, class FName StartJumpPlayFromNotify, class FName StartJumpPlayTillNotify, class FName LandedPlayFromNotify, class FName LandedPlayTillNotify, float TransitionTime_SJ, float TransitionTime_FLoop, float TransitionTime_L, float PlayRate, float MovementSpeedWhenDisableLanded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "JumpMachineSimple_BL");

	Params::DynamicNodeBPLibrary_JumpMachineSimple_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.JumpAnimation = JumpAnimation;
	Parms.StartJumpPlayFromNotify = StartJumpPlayFromNotify;
	Parms.StartJumpPlayTillNotify = StartJumpPlayTillNotify;
	Parms.LandedPlayFromNotify = LandedPlayFromNotify;
	Parms.LandedPlayTillNotify = LandedPlayTillNotify;
	Parms.TransitionTime_SJ = TransitionTime_SJ;
	Parms.TransitionTime_FLoop = TransitionTime_FLoop;
	Parms.TransitionTime_L = TransitionTime_L;
	Parms.PlayRate = PlayRate;
	Parms.MovementSpeedWhenDisableLanded = MovementSpeedWhenDisableLanded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.LayMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  LieDownAnimation                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  GetUpAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseReverseStartAsEndAnimation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ToLD                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_LIdle                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_GU                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::LayMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* LieDownAnimation, class UAnimationAsset* IdleAnimation, class UAnimationAsset* GetUpAnimation, bool UseReverseStartAsEndAnimation, float TransitionTime_ToLD, float TransitionTime_LIdle, float TransitionTime_GU, float PlayRate, float TransitionTimeQuickReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LayMachine_BL");

	Params::DynamicNodeBPLibrary_LayMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LieDownAnimation = LieDownAnimation;
	Parms.IdleAnimation = IdleAnimation;
	Parms.GetUpAnimation = GetUpAnimation;
	Parms.UseReverseStartAsEndAnimation = UseReverseStartAsEndAnimation;
	Parms.TransitionTime_ToLD = TransitionTime_ToLD;
	Parms.TransitionTime_LIdle = TransitionTime_LIdle;
	Parms.TransitionTime_GU = TransitionTime_GU;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.LookAtActor_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AnchorBone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToRotate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PositionOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UsePinch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegrees                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Clamp_MaxYawToLookAt_Degrees                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableLookAtWhenMaxYaw                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalculateOnce                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::LookAtActor_BL(class ACharacter* OwnCharacter, const class AActor* Actor, class FName AnchorBone, class FName BoneToRotate, const struct FVector& PositionOffset, bool OffsetRelative, bool UsePinch, float MaxDegrees, float Clamp_MaxYawToLookAt_Degrees, bool DisableLookAtWhenMaxYaw, float TransitionTime, bool CalculateOnce, float RotationAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LookAtActor_BL");

	Params::DynamicNodeBPLibrary_LookAtActor_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Actor = Actor;
	Parms.AnchorBone = AnchorBone;
	Parms.BoneToRotate = BoneToRotate;
	Parms.PositionOffset = std::move(PositionOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.UsePinch = UsePinch;
	Parms.MaxDegrees = MaxDegrees;
	Parms.Clamp_MaxYawToLookAt_Degrees = Clamp_MaxYawToLookAt_Degrees;
	Parms.DisableLookAtWhenMaxYaw = DisableLookAtWhenMaxYaw;
	Parms.TransitionTime = TransitionTime;
	Parms.CalculateOnce = CalculateOnce;
	Parms.RotationAlpha = RotationAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.LookAtActorBone_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AnchorBone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToRotate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToLookAt                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PositionOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UsePinch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegrees                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Clamp_MaxYawToLookAt_Degrees                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableLookAtWhenMaxYaw                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalculateOnce                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::LookAtActorBone_BL(class ACharacter* OwnCharacter, const class AActor* Actor, class FName AnchorBone, class FName BoneToRotate, class FName BoneToLookAt, const struct FVector& PositionOffset, bool OffsetRelative, bool UsePinch, float MaxDegrees, float Clamp_MaxYawToLookAt_Degrees, bool DisableLookAtWhenMaxYaw, float TransitionTime, bool CalculateOnce, float RotationAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LookAtActorBone_BL");

	Params::DynamicNodeBPLibrary_LookAtActorBone_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Actor = Actor;
	Parms.AnchorBone = AnchorBone;
	Parms.BoneToRotate = BoneToRotate;
	Parms.BoneToLookAt = BoneToLookAt;
	Parms.PositionOffset = std::move(PositionOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.UsePinch = UsePinch;
	Parms.MaxDegrees = MaxDegrees;
	Parms.Clamp_MaxYawToLookAt_Degrees = Clamp_MaxYawToLookAt_Degrees;
	Parms.DisableLookAtWhenMaxYaw = DisableLookAtWhenMaxYaw;
	Parms.TransitionTime = TransitionTime;
	Parms.CalculateOnce = CalculateOnce;
	Parms.RotationAlpha = RotationAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.LookAtBone_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AnchorBone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToRotate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToLookAt                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PositionOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OffsetRelative                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UsePinch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegrees                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalculateOnce                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::LookAtBone_BL(class ACharacter* OwnCharacter, class FName AnchorBone, class FName BoneToRotate, class FName BoneToLookAt, const struct FVector& PositionOffset, bool OffsetRelative, bool UsePinch, float MaxDegrees, float TransitionTime, bool CalculateOnce, float RotationAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LookAtBone_BL");

	Params::DynamicNodeBPLibrary_LookAtBone_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnchorBone = AnchorBone;
	Parms.BoneToRotate = BoneToRotate;
	Parms.BoneToLookAt = BoneToLookAt;
	Parms.PositionOffset = std::move(PositionOffset);
	Parms.OffsetRelative = OffsetRelative;
	Parms.UsePinch = UsePinch;
	Parms.MaxDegrees = MaxDegrees;
	Parms.TransitionTime = TransitionTime;
	Parms.CalculateOnce = CalculateOnce;
	Parms.RotationAlpha = RotationAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.LookAtSetAssetInitialDeltaRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InitialDeltaRotation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::LookAtSetAssetInitialDeltaRotation_BL(class ACharacter* OwnCharacter, class UAnimationAsset* AnimationAsset, const struct FRotator& InitialDeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LookAtSetAssetInitialDeltaRotation_BL");

	Params::DynamicNodeBPLibrary_LookAtSetAssetInitialDeltaRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.InitialDeltaRotation = std::move(InitialDeltaRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.LookAtSetInitialDeltaRotation_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InitialDeltaRotation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::LookAtSetInitialDeltaRotation_BL(class ACharacter* OwnCharacter, const struct FRotator& InitialDeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LookAtSetInitialDeltaRotation_BL");

	Params::DynamicNodeBPLibrary_LookAtSetInitialDeltaRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.InitialDeltaRotation = std::move(InitialDeltaRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.LookAtSetMeshVectors_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ForwardVector                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          UpVector                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::LookAtSetMeshVectors_BL(class ACharacter* OwnCharacter, const struct FVector& ForwardVector, const struct FVector& UpVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "LookAtSetMeshVectors_BL");

	Params::DynamicNodeBPLibrary_LookAtSetMeshVectors_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ForwardVector = std::move(ForwardVector);
	Parms.UpVector = std::move(UpVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.MontageSetup_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BreakIfMovementStatusChanged                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BreakIfStartMovingSecAfterStart                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CanRestartMontageSecAfterStart                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::MontageSetup_BL(class ACharacter* OwnCharacter, class UAnimMontage* AnimationAsset, bool BreakIfMovementStatusChanged, float BreakIfStartMovingSecAfterStart, float CanRestartMontageSecAfterStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MontageSetup_BL");

	Params::DynamicNodeBPLibrary_MontageSetup_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.BreakIfMovementStatusChanged = BreakIfMovementStatusChanged;
	Parms.BreakIfStartMovingSecAfterStart = BreakIfStartMovingSecAfterStart;
	Parms.CanRestartMontageSecAfterStart = CanRestartMontageSecAfterStart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.MoveHandTowardSpineHandsIK_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MoveDistance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpinePosOffsetCS                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::MoveHandTowardSpineHandsIK_BL(class ACharacter* OwnCharacter, int32 HandIndex, float MoveDistance, const struct FVector& SpinePosOffsetCS, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MoveHandTowardSpineHandsIK_BL");

	Params::DynamicNodeBPLibrary_MoveHandTowardSpineHandsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.MoveDistance = MoveDistance;
	Parms.SpinePosOffsetCS = std::move(SpinePosOffsetCS);
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.MoveMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IdleAssetIsPose_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  MoveAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  RunAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeIdle                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeMove                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRun                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RunPlayRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxWalkSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DropPlayRateWhenSmallVel                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DropPlayRateCoef                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDropRateValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpactHandleMoveCoef                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RandomStartPosition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::MoveMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* IdleAnimation, class FName IdleAssetIsPose_Notify, class UAnimationAsset* MoveAnimation, class UAnimationAsset* RunAnimation, float TransitionTimeIdle, float TransitionTimeMove, float TransitionTimeRun, float PlayRate, float RunPlayRate, float MaxWalkSpeed, bool DropPlayRateWhenSmallVel, float DropPlayRateCoef, float MinDropRateValue, float ImpactHandleMoveCoef, bool RandomStartPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MoveMachine_BL");

	Params::DynamicNodeBPLibrary_MoveMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IdleAnimation = IdleAnimation;
	Parms.IdleAssetIsPose_Notify = IdleAssetIsPose_Notify;
	Parms.MoveAnimation = MoveAnimation;
	Parms.RunAnimation = RunAnimation;
	Parms.TransitionTimeIdle = TransitionTimeIdle;
	Parms.TransitionTimeMove = TransitionTimeMove;
	Parms.TransitionTimeRun = TransitionTimeRun;
	Parms.PlayRate = PlayRate;
	Parms.RunPlayRate = RunPlayRate;
	Parms.MaxWalkSpeed = MaxWalkSpeed;
	Parms.DropPlayRateWhenSmallVel = DropPlayRateWhenSmallVel;
	Parms.DropPlayRateCoef = DropPlayRateCoef;
	Parms.MinDropRateValue = MinDropRateValue;
	Parms.ImpactHandleMoveCoef = ImpactHandleMoveCoef;
	Parms.RandomStartPosition = RandomStartPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineExt_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IdleAssetIsPose_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartMoveAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartMovePlayTill_Notify                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  MoveAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MovePlayFrom_Notify                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndMoveAnimationOptional                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EndMovePlayFrom_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  RunAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeSM                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeM                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeEM                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRun                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RunPlayRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxWalkSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartStoppingCoef                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::MoveMachineExt_BL(class ACharacter* OwnCharacter, class UAnimationAsset* IdleAnimation, class FName IdleAssetIsPose_Notify, class UAnimationAsset* StartMoveAnimation, class FName StartMovePlayTill_Notify, class UAnimationAsset* MoveAnimation, class FName MovePlayFrom_Notify, class UAnimationAsset* EndMoveAnimationOptional, class FName EndMovePlayFrom_Notify, class UAnimationAsset* RunAnimation, float TransitionTime, float TransitionTimeSM, float TransitionTimeM, float TransitionTimeEM, float TransitionTimeRun, float PlayRate, float RunPlayRate, float MaxWalkSpeed, float StartStoppingCoef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MoveMachineExt_BL");

	Params::DynamicNodeBPLibrary_MoveMachineExt_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IdleAnimation = IdleAnimation;
	Parms.IdleAssetIsPose_Notify = IdleAssetIsPose_Notify;
	Parms.StartMoveAnimation = StartMoveAnimation;
	Parms.StartMovePlayTill_Notify = StartMovePlayTill_Notify;
	Parms.MoveAnimation = MoveAnimation;
	Parms.MovePlayFrom_Notify = MovePlayFrom_Notify;
	Parms.EndMoveAnimationOptional = EndMoveAnimationOptional;
	Parms.EndMovePlayFrom_Notify = EndMovePlayFrom_Notify;
	Parms.RunAnimation = RunAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.TransitionTimeSM = TransitionTimeSM;
	Parms.TransitionTimeM = TransitionTimeM;
	Parms.TransitionTimeEM = TransitionTimeEM;
	Parms.TransitionTimeRun = TransitionTimeRun;
	Parms.PlayRate = PlayRate;
	Parms.RunPlayRate = RunPlayRate;
	Parms.MaxWalkSpeed = MaxWalkSpeed;
	Parms.StartStoppingCoef = StartStoppingCoef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineExtMulti_2Legs_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IdleAssetIsPose_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartMoveAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartMovePlayTill_Notify                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  MoveAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MovePlayFrom_Notify                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndMoveAnimationOptional_Right                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndMoveAnimationOptional_Left                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EndMovePlayFrom_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  RunAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeSM                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeM                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeEM                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRun                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RunPlayRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxWalkSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartStoppingCoef                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SyncAnimations                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::MoveMachineExtMulti_2Legs_BL(class ACharacter* OwnCharacter, class UAnimationAsset* IdleAnimation, class FName IdleAssetIsPose_Notify, class UAnimationAsset* StartMoveAnimation, class FName StartMovePlayTill_Notify, class UAnimationAsset* MoveAnimation, class FName MovePlayFrom_Notify, class UAnimationAsset* EndMoveAnimationOptional_Right, class UAnimationAsset* EndMoveAnimationOptional_Left, class FName EndMovePlayFrom_Notify, class UAnimationAsset* RunAnimation, float TransitionTime, float TransitionTimeSM, float TransitionTimeM, float TransitionTimeEM, float TransitionTimeRun, float PlayRate, float RunPlayRate, float MaxWalkSpeed, float StartStoppingCoef, bool SyncAnimations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MoveMachineExtMulti_2Legs_BL");

	Params::DynamicNodeBPLibrary_MoveMachineExtMulti_2Legs_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IdleAnimation = IdleAnimation;
	Parms.IdleAssetIsPose_Notify = IdleAssetIsPose_Notify;
	Parms.StartMoveAnimation = StartMoveAnimation;
	Parms.StartMovePlayTill_Notify = StartMovePlayTill_Notify;
	Parms.MoveAnimation = MoveAnimation;
	Parms.MovePlayFrom_Notify = MovePlayFrom_Notify;
	Parms.EndMoveAnimationOptional_Right = EndMoveAnimationOptional_Right;
	Parms.EndMoveAnimationOptional_Left = EndMoveAnimationOptional_Left;
	Parms.EndMovePlayFrom_Notify = EndMovePlayFrom_Notify;
	Parms.RunAnimation = RunAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.TransitionTimeSM = TransitionTimeSM;
	Parms.TransitionTimeM = TransitionTimeM;
	Parms.TransitionTimeEM = TransitionTimeEM;
	Parms.TransitionTimeRun = TransitionTimeRun;
	Parms.PlayRate = PlayRate;
	Parms.RunPlayRate = RunPlayRate;
	Parms.MaxWalkSpeed = MaxWalkSpeed;
	Parms.StartStoppingCoef = StartStoppingCoef;
	Parms.SyncAnimations = SyncAnimations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineExtMulti_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IdleAssetIsPose_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartMoveAnimation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StartMovePlayTill_Notify                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  MoveAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MovePlayFrom_Notify                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndMoveAnimationOptional                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EndMovePlayFrom_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  RunAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeSM                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeM                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeEM                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRun                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RunPlayRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxWalkSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartStoppingCoef                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SyncAnimations                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::MoveMachineExtMulti_BL(class ACharacter* OwnCharacter, class UAnimationAsset* IdleAnimation, class FName IdleAssetIsPose_Notify, class UAnimationAsset* StartMoveAnimation, class FName StartMovePlayTill_Notify, class UAnimationAsset* MoveAnimation, class FName MovePlayFrom_Notify, class UAnimationAsset* EndMoveAnimationOptional, class FName EndMovePlayFrom_Notify, class UAnimationAsset* RunAnimation, float TransitionTime, float TransitionTimeSM, float TransitionTimeM, float TransitionTimeEM, float TransitionTimeRun, float PlayRate, float RunPlayRate, float MaxWalkSpeed, float StartStoppingCoef, bool SyncAnimations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MoveMachineExtMulti_BL");

	Params::DynamicNodeBPLibrary_MoveMachineExtMulti_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IdleAnimation = IdleAnimation;
	Parms.IdleAssetIsPose_Notify = IdleAssetIsPose_Notify;
	Parms.StartMoveAnimation = StartMoveAnimation;
	Parms.StartMovePlayTill_Notify = StartMovePlayTill_Notify;
	Parms.MoveAnimation = MoveAnimation;
	Parms.MovePlayFrom_Notify = MovePlayFrom_Notify;
	Parms.EndMoveAnimationOptional = EndMoveAnimationOptional;
	Parms.EndMovePlayFrom_Notify = EndMovePlayFrom_Notify;
	Parms.RunAnimation = RunAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.TransitionTimeSM = TransitionTimeSM;
	Parms.TransitionTimeM = TransitionTimeM;
	Parms.TransitionTimeEM = TransitionTimeEM;
	Parms.TransitionTimeRun = TransitionTimeRun;
	Parms.PlayRate = PlayRate;
	Parms.RunPlayRate = RunPlayRate;
	Parms.MaxWalkSpeed = MaxWalkSpeed;
	Parms.StartStoppingCoef = StartStoppingCoef;
	Parms.SyncAnimations = SyncAnimations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MoveMachineMulti_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IdleAssetIsPose_Notify                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  MoveAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  RunAnimation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeIdle                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeMove                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRun                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RunPlayRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxWalkSpeed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DropPlayRateWhenSmallVel                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DropPlayRateCoef                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinDropRateValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ImpactHandleMoveCoef                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SyncAnimations                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::MoveMachineMulti_BL(class ACharacter* OwnCharacter, class UAnimationAsset* IdleAnimation, class FName IdleAssetIsPose_Notify, class UAnimationAsset* MoveAnimation, class UAnimationAsset* RunAnimation, float TransitionTimeIdle, float TransitionTimeMove, float TransitionTimeRun, float PlayRate, float RunPlayRate, float MaxWalkSpeed, bool DropPlayRateWhenSmallVel, float DropPlayRateCoef, float MinDropRateValue, float ImpactHandleMoveCoef, bool SyncAnimations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MoveMachineMulti_BL");

	Params::DynamicNodeBPLibrary_MoveMachineMulti_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.IdleAnimation = IdleAnimation;
	Parms.IdleAssetIsPose_Notify = IdleAssetIsPose_Notify;
	Parms.MoveAnimation = MoveAnimation;
	Parms.RunAnimation = RunAnimation;
	Parms.TransitionTimeIdle = TransitionTimeIdle;
	Parms.TransitionTimeMove = TransitionTimeMove;
	Parms.TransitionTimeRun = TransitionTimeRun;
	Parms.PlayRate = PlayRate;
	Parms.RunPlayRate = RunPlayRate;
	Parms.MaxWalkSpeed = MaxWalkSpeed;
	Parms.DropPlayRateWhenSmallVel = DropPlayRateWhenSmallVel;
	Parms.DropPlayRateCoef = DropPlayRateCoef;
	Parms.MinDropRateValue = MinDropRateValue;
	Parms.ImpactHandleMoveCoef = ImpactHandleMoveCoef;
	Parms.SyncAnimations = SyncAnimations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MultiDoubleMultiTransitionToAnimFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToNewAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayFrom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTill                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  FinalAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_final                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping_Final                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InStartPosition_Final                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate_Final                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSyncGroups_1                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSyncGroups_2                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::MultiDoubleMultiTransitionToAnimFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* ToNewAsset, float TransitionTime, float PlayFrom, float PlayTill, class UAnimationAsset* FinalAsset, float TransitionTime_final, bool bIsLooping_Final, float InPlayRate, float InStartPosition_Final, float InPlayRate_Final, bool UseSyncGroups_1, bool UseSyncGroups_2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MultiDoubleMultiTransitionToAnimFromCurPose_BL");

	Params::DynamicNodeBPLibrary_MultiDoubleMultiTransitionToAnimFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ToNewAsset = ToNewAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.PlayFrom = PlayFrom;
	Parms.PlayTill = PlayTill;
	Parms.FinalAsset = FinalAsset;
	Parms.TransitionTime_final = TransitionTime_final;
	Parms.bIsLooping_Final = bIsLooping_Final;
	Parms.InPlayRate = InPlayRate;
	Parms.InStartPosition_Final = InStartPosition_Final;
	Parms.InPlayRate_Final = InPlayRate_Final;
	Parms.UseSyncGroups_1 = UseSyncGroups_1;
	Parms.UseSyncGroups_2 = UseSyncGroups_2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MultiTransitionToAnimFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SyncAnimations                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestartCheckTransition                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TryStartFrom                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::MultiTransitionToAnimFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* AnimationAsset, float TransitionTime, bool bIsLooping, float InPlayRate, bool SyncAnimations, bool CanRestart, bool CanRestartCheckTransition, float TryStartFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MultiTransitionToAnimFromCurPose_BL");

	Params::DynamicNodeBPLibrary_MultiTransitionToAnimFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.SyncAnimations = SyncAnimations;
	Parms.CanRestart = CanRestart;
	Parms.CanRestartCheckTransition = CanRestartCheckTransition;
	Parms.TryStartFrom = TryStartFrom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.MultiTransitionToMontageFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromSection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSyncGroups                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::MultiTransitionToMontageFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimMontage* AnimationAsset, float TransitionTime, bool bIsLooping, float InPlayRate, class FName PlayFromSection, float StartingPosition, bool CanRestart, bool UseSyncGroups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "MultiTransitionToMontageFromCurPose_BL");

	Params::DynamicNodeBPLibrary_MultiTransitionToMontageFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.PlayFromSection = PlayFromSection;
	Parms.StartingPosition = StartingPosition;
	Parms.CanRestart = CanRestart;
	Parms.UseSyncGroups = UseSyncGroups;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.PauseAllBlendBoneStacks_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PauseTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::PauseAllBlendBoneStacks_BL(class ACharacter* OwnCharacter, float PauseTime, float TransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PauseAllBlendBoneStacks_BL");

	Params::DynamicNodeBPLibrary_PauseAllBlendBoneStacks_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.PauseTime = PauseTime;
	Parms.TransitionTime = TransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.PauseLookAt_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::PauseLookAt_BL(class ACharacter* OwnCharacter, bool Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PauseLookAt_BL");

	Params::DynamicNodeBPLibrary_PauseLookAt_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Stop = Stop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.PauseLookAtIfUsedTurnToControlRotation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::PauseLookAtIfUsedTurnToControlRotation_BL(class ACharacter* OwnCharacter, bool Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PauseLookAtIfUsedTurnToControlRotation_BL");

	Params::DynamicNodeBPLibrary_PauseLookAtIfUsedTurnToControlRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Stop = Stop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.PauseToZeroLookAt_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::PauseToZeroLookAt_BL(class ACharacter* OwnCharacter, bool Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PauseToZeroLookAt_BL");

	Params::DynamicNodeBPLibrary_PauseToZeroLookAt_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Stop = Stop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.PauseToZeroLookAtIfUsedTurnToControlRotation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::PauseToZeroLookAtIfUsedTurnToControlRotation_BL(class ACharacter* OwnCharacter, bool Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PauseToZeroLookAtIfUsedTurnToControlRotation_BL");

	Params::DynamicNodeBPLibrary_PauseToZeroLookAtIfUsedTurnToControlRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Stop = Stop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.PivotMachine_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  PivotAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AccVelocityDirThreshold                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinVelocityThreshold                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinTimeToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RotationRateWhenPivot                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AccelerationWhenPivot                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalculateDirOnce                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayPivotIfZeroAcc                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::PivotMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* PivotAnimation, float TransitionTime, float AccVelocityDirThreshold, float MinVelocityThreshold, float MinTimeToPlay, const struct FRotator& RotationRateWhenPivot, float AccelerationWhenPivot, bool CalculateDirOnce, bool PlayPivotIfZeroAcc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PivotMachine_BL");

	Params::DynamicNodeBPLibrary_PivotMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.PivotAnimation = PivotAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.AccVelocityDirThreshold = AccVelocityDirThreshold;
	Parms.MinVelocityThreshold = MinVelocityThreshold;
	Parms.MinTimeToPlay = MinTimeToPlay;
	Parms.RotationRateWhenPivot = std::move(RotationRateWhenPivot);
	Parms.AccelerationWhenPivot = AccelerationWhenPivot;
	Parms.CalculateDirOnce = CalculateDirOnce;
	Parms.PlayPivotIfZeroAcc = PlayPivotIfZeroAcc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.PivotMachineExt_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  PivotAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AccVelocityDirThreshold                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinVelocityThreshold                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinTimeToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         RotationRateWhenPivot                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AccelerationWhenPivot                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InterpToRotationRateWhenPivot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InterpToAccelerationWhenPivot                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalculateDirOnce                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayPivotIfZeroAcc                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::PivotMachineExt_BL(class ACharacter* OwnCharacter, class UAnimationAsset* PivotAnimation, float TransitionTime, float AccVelocityDirThreshold, float MinVelocityThreshold, float MinTimeToPlay, const struct FRotator& RotationRateWhenPivot, float AccelerationWhenPivot, float InterpTime, const struct FRotator& InterpToRotationRateWhenPivot, float InterpToAccelerationWhenPivot, bool CalculateDirOnce, bool PlayPivotIfZeroAcc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PivotMachineExt_BL");

	Params::DynamicNodeBPLibrary_PivotMachineExt_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.PivotAnimation = PivotAnimation;
	Parms.TransitionTime = TransitionTime;
	Parms.AccVelocityDirThreshold = AccVelocityDirThreshold;
	Parms.MinVelocityThreshold = MinVelocityThreshold;
	Parms.MinTimeToPlay = MinTimeToPlay;
	Parms.RotationRateWhenPivot = std::move(RotationRateWhenPivot);
	Parms.AccelerationWhenPivot = AccelerationWhenPivot;
	Parms.InterpTime = InterpTime;
	Parms.InterpToRotationRateWhenPivot = std::move(InterpToRotationRateWhenPivot);
	Parms.InterpToAccelerationWhenPivot = InterpToAccelerationWhenPivot;
	Parms.CalculateDirOnce = CalculateDirOnce;
	Parms.PlayPivotIfZeroAcc = PlayPivotIfZeroAcc;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.PreSetup_DAZCharacterLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::PreSetup_DAZCharacterLegsIK_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "PreSetup_DAZCharacterLegsIK_BL");

	Params::DynamicNodeBPLibrary_PreSetup_DAZCharacterLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ProneMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartProneAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartProneFromCrouchingAnimation                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndProneAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndProneToCrouchingAnimation                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseReverseStartAsEndAnimation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_To                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_Idle                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_From                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::ProneMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* StartProneAnimation, class UAnimationAsset* StartProneFromCrouchingAnimation, class UAnimationAsset* IdleAnimation, class UAnimationAsset* EndProneAnimation, class UAnimationAsset* EndProneToCrouchingAnimation, bool UseReverseStartAsEndAnimation, float TransitionTime_To, float TransitionTime_Idle, float TransitionTime_From, float PlayRate, float TransitionTimeQuickReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ProneMachine_BL");

	Params::DynamicNodeBPLibrary_ProneMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.StartProneAnimation = StartProneAnimation;
	Parms.StartProneFromCrouchingAnimation = StartProneFromCrouchingAnimation;
	Parms.IdleAnimation = IdleAnimation;
	Parms.EndProneAnimation = EndProneAnimation;
	Parms.EndProneToCrouchingAnimation = EndProneToCrouchingAnimation;
	Parms.UseReverseStartAsEndAnimation = UseReverseStartAsEndAnimation;
	Parms.TransitionTime_To = TransitionTime_To;
	Parms.TransitionTime_Idle = TransitionTime_Idle;
	Parms.TransitionTime_From = TransitionTime_From;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.RebuildNodes_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::RebuildNodes_BL(class ACharacter* OwnCharacter, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "RebuildNodes_BL");

	Params::DynamicNodeBPLibrary_RebuildNodes_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ReleaseAnimationStack_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdditionalTransitionTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalculatedMinTransitionTime                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalculatedMaxTransitionTime                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ReleaseAnimationStack_BL(class ACharacter* OwnCharacter, float AdditionalTransitionTime, float CalculatedMinTransitionTime, float CalculatedMaxTransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ReleaseAnimationStack_BL");

	Params::DynamicNodeBPLibrary_ReleaseAnimationStack_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AdditionalTransitionTime = AdditionalTransitionTime;
	Parms.CalculatedMinTransitionTime = CalculatedMinTransitionTime;
	Parms.CalculatedMaxTransitionTime = CalculatedMaxTransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ReleaseAnimationStackAnimFin_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionEndOffset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ReleaseAnimationStackAnimFin_BL(class ACharacter* OwnCharacter, float TransitionTime, float TransitionEndOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ReleaseAnimationStackAnimFin_BL");

	Params::DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TransitionTime = TransitionTime;
	Parms.TransitionEndOffset = TransitionEndOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ReleaseAnimationStackAnimFin_LevelToRelease_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionEndOffset                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   LevelToRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ReleaseAnimationStackAnimFin_LevelToRelease_BL(class ACharacter* OwnCharacter, float TransitionTime, float TransitionEndOffset, uint8 LevelToRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ReleaseAnimationStackAnimFin_LevelToRelease_BL");

	Params::DynamicNodeBPLibrary_ReleaseAnimationStackAnimFin_LevelToRelease_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TransitionTime = TransitionTime;
	Parms.TransitionEndOffset = TransitionEndOffset;
	Parms.LevelToRelease = LevelToRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ReleaseLevelPriorityAnimationStack_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   LevelToRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdditionalTransitionTime                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalculatedMinTransitionTime                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CalculatedMaxTransitionTime                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ReleaseLevelPriorityAnimationStack_BL(class ACharacter* OwnCharacter, uint8 LevelToRelease, float AdditionalTransitionTime, float CalculatedMinTransitionTime, float CalculatedMaxTransitionTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ReleaseLevelPriorityAnimationStack_BL");

	Params::DynamicNodeBPLibrary_ReleaseLevelPriorityAnimationStack_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LevelToRelease = LevelToRelease;
	Parms.AdditionalTransitionTime = AdditionalTransitionTime;
	Parms.CalculatedMinTransitionTime = CalculatedMinTransitionTime;
	Parms.CalculatedMaxTransitionTime = CalculatedMaxTransitionTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ResetPivot_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::ResetPivot_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ResetPivot_BL");

	Params::DynamicNodeBPLibrary_ResetPivot_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.ResetStartFromOverrideNextMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ResetStartFromOverrideNextMachine_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ResetStartFromOverrideNextMachine_BL");

	Params::DynamicNodeBPLibrary_ResetStartFromOverrideNextMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SeatMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  SeatDownAnimation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  GetUpAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseReverseStartAsEndAnimation                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ToSD                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_SIdle                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_GU                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::SeatMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* SeatDownAnimation, class UAnimationAsset* IdleAnimation, class UAnimationAsset* GetUpAnimation, bool UseReverseStartAsEndAnimation, float TransitionTime_ToSD, float TransitionTime_SIdle, float TransitionTime_GU, float PlayRate, float TransitionTimeQuickReturn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SeatMachine_BL");

	Params::DynamicNodeBPLibrary_SeatMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.SeatDownAnimation = SeatDownAnimation;
	Parms.IdleAnimation = IdleAnimation;
	Parms.GetUpAnimation = GetUpAnimation;
	Parms.UseReverseStartAsEndAnimation = UseReverseStartAsEndAnimation;
	Parms.TransitionTime_ToSD = TransitionTime_ToSD;
	Parms.TransitionTime_SIdle = TransitionTime_SIdle;
	Parms.TransitionTime_GU = TransitionTime_GU;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAcclerationCurve_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ForAnimAsset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      VelocityAccelerationCurve                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAcclerationCurve_BL(class ACharacter* OwnCharacter, class UAnimationAsset* ForAnimAsset, class UCurveFloat* VelocityAccelerationCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAcclerationCurve_BL");

	Params::DynamicNodeBPLibrary_SetAcclerationCurve_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ForAnimAsset = ForAnimAsset;
	Parms.VelocityAccelerationCurve = VelocityAccelerationCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAdditiveBlendSpaceData_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BSData                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntBSSpeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::SetAdditiveBlendSpaceData_BL(class ACharacter* OwnCharacter, const struct FVector& BSData, float IntBSSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAdditiveBlendSpaceData_BL");

	Params::DynamicNodeBPLibrary_SetAdditiveBlendSpaceData_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BSData = std::move(BSData);
	Parms.IntBSSpeed = IntBSSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAimOffsetAnimationArray_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBlendSpaceBase*                  AimOffsetBlendSpace                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimationAsset*>          AnimAssetArray                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ApplyAimAuto                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAimOffsetAnimationArray_BL(class ACharacter* OwnCharacter, class UBlendSpaceBase* AimOffsetBlendSpace, const TArray<class UAnimationAsset*>& AnimAssetArray, bool ApplyAimAuto)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAimOffsetAnimationArray_BL");

	Params::DynamicNodeBPLibrary_SetAimOffsetAnimationArray_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AimOffsetBlendSpace = AimOffsetBlendSpace;
	Parms.AnimAssetArray = std::move(AnimAssetArray);
	Parms.ApplyAimAuto = ApplyAimAuto;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAimOffsetAutoUpdate_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnimOffsetAutoUpdateData_DN>AnimOffsetDataArray                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAimOffsetAutoUpdate_BL(class ACharacter* OwnCharacter, const TArray<struct FAnimOffsetAutoUpdateData_DN>& AnimOffsetDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAimOffsetAutoUpdate_BL");

	Params::DynamicNodeBPLibrary_SetAimOffsetAutoUpdate_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimOffsetDataArray = std::move(AnimOffsetDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaAnimalRotatorCSLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha_Right                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha_Left                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAlphaAnimalRotatorCSLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, float Alpha_Right, float Alpha_Left)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAlphaAnimalRotatorCSLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetAlphaAnimalRotatorCSLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.Alpha_Right = Alpha_Right;
	Parms.Alpha_Left = Alpha_Left;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaHandsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAlphaHandsIK_BL(class ACharacter* OwnCharacter, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAlphaHandsIK_BL");

	Params::DynamicNodeBPLibrary_SetAlphaHandsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaHandsIKSpecificHand_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TranslationAlpha                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeedForChangeAlpha                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAlphaHandsIKSpecificHand_BL(class ACharacter* OwnCharacter, int32 HandIndex, float TranslationAlpha, float RotationAlpha, float IntSpeedForChangeAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAlphaHandsIKSpecificHand_BL");

	Params::DynamicNodeBPLibrary_SetAlphaHandsIKSpecificHand_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.TranslationAlpha = TranslationAlpha;
	Parms.RotationAlpha = RotationAlpha;
	Parms.IntSpeedForChangeAlpha = IntSpeedForChangeAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAlphaLegsIK_BL(class ACharacter* OwnCharacter, float Alpha, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAlphaLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetAlphaLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Alpha = Alpha;
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAlphaProneIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EnableLegsIK                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LegsMoveBotMulti                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAlphaProneIK_BL(class ACharacter* OwnCharacter, float Alpha, float IntSpeed, bool EnableLegsIK, float LegsMoveBotMulti)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAlphaProneIK_BL");

	Params::DynamicNodeBPLibrary_SetAlphaProneIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Alpha = Alpha;
	Parms.IntSpeed = IntSpeed;
	Parms.EnableLegsIK = EnableLegsIK;
	Parms.LegsMoveBotMulti = LegsMoveBotMulti;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAltAlgorithmLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AltAlgorithmEnable                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAltAlgorithmLegsIK_BL(class ACharacter* OwnCharacter, int32 AltAlgorithmEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAltAlgorithmLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetAltAlgorithmLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AltAlgorithmEnable = AltAlgorithmEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAnimationCurve_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAccelerationCurve                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AccelerationCurveName                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseOverrideVelocityCurve                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OverrideVelocityCurveName                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseMaxSpeedCurve                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MaxSpeedCurveName                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAnimationCurve_BL(class ACharacter* OwnCharacter, bool UseAccelerationCurve, class FName AccelerationCurveName, bool UseOverrideVelocityCurve, class FName OverrideVelocityCurveName, bool UseMaxSpeedCurve, class FName MaxSpeedCurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAnimationCurve_BL");

	Params::DynamicNodeBPLibrary_SetAnimationCurve_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.UseAccelerationCurve = UseAccelerationCurve;
	Parms.AccelerationCurveName = AccelerationCurveName;
	Parms.UseOverrideVelocityCurve = UseOverrideVelocityCurve;
	Parms.OverrideVelocityCurveName = OverrideVelocityCurveName;
	Parms.UseMaxSpeedCurve = UseMaxSpeedCurve;
	Parms.MaxSpeedCurveName = MaxSpeedCurveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetAnimationStackLimit_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StackPriorityLimit                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetAnimationStackLimit_BL(class ACharacter* OwnCharacter, bool Enabled, int32 StackPriorityLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetAnimationStackLimit_BL");

	Params::DynamicNodeBPLibrary_SetAnimationStackLimit_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Enabled = Enabled;
	Parms.StackPriorityLimit = StackPriorityLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetBS2DModeOneFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBlendSpace2DMode_DN                    BlendSpace2DMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetBS2DModeOneFrame_BL(class ACharacter* OwnCharacter, EBlendSpace2DMode_DN BlendSpace2DMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetBS2DModeOneFrame_BL");

	Params::DynamicNodeBPLibrary_SetBS2DModeOneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BlendSpace2DMode = BlendSpace2DMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetBSBlendSpeed_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetBSBlendSpeed_BL(class ACharacter* OwnCharacter, float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetBSBlendSpeed_BL");

	Params::DynamicNodeBPLibrary_SetBSBlendSpeed_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetBSMapVelocityInputOneFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           MapVelocityData                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetBSMapVelocityInputOneFrame_BL(class ACharacter* OwnCharacter, const TArray<float>& MapVelocityData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetBSMapVelocityInputOneFrame_BL");

	Params::DynamicNodeBPLibrary_SetBSMapVelocityInputOneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.MapVelocityData = std::move(MapVelocityData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetCurrentStateToFalling_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetCurrentStateToFalling_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetCurrentStateToFalling_BL");

	Params::DynamicNodeBPLibrary_SetCurrentStateToFalling_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetCurrentStateToSwimming_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetCurrentStateToSwimming_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetCurrentStateToSwimming_BL");

	Params::DynamicNodeBPLibrary_SetCurrentStateToSwimming_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetCustomBSDirectionInputOneFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CustomBSDirection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetCustomBSDirectionInputOneFrame_BL(class ACharacter* OwnCharacter, float CustomBSDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetCustomBSDirectionInputOneFrame_BL");

	Params::DynamicNodeBPLibrary_SetCustomBSDirectionInputOneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CustomBSDirection = CustomBSDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetCustomBSVelocityInputOneFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CustomBSVelocity                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetCustomBSVelocityInputOneFrame_BL(class ACharacter* OwnCharacter, float CustomBSVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetCustomBSVelocityInputOneFrame_BL");

	Params::DynamicNodeBPLibrary_SetCustomBSVelocityInputOneFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CustomBSVelocity = CustomBSVelocity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetCustomStatusThisFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CustomIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CustomStatus                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetCustomStatusThisFrame_BL(class ACharacter* OwnCharacter, int32 CustomIndex, bool CustomStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetCustomStatusThisFrame_BL");

	Params::DynamicNodeBPLibrary_SetCustomStatusThisFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CustomIndex = CustomIndex;
	Parms.CustomStatus = CustomStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetDownVectorCSLegsIK_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DownVectorCS                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetDownVectorCSLegsIK_BL(class ACharacter* OwnCharacter, const struct FVector& DownVectorCS, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetDownVectorCSLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetDownVectorCSLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.DownVectorCS = std::move(DownVectorCS);
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKAllPairs_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetEnableLegsIKAllPairs_BL(class ACharacter* OwnCharacter, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetEnableLegsIKAllPairs_BL");

	Params::DynamicNodeBPLibrary_SetEnableLegsIKAllPairs_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKAutoShrinkMode_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EnableAutoShrinkMode                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShrinkingModeSpeedCoeff                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShrinkingModeStartOffsetSec                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetEnableLegsIKAutoShrinkMode_BL(class ACharacter* OwnCharacter, bool EnableAutoShrinkMode, float ShrinkingModeSpeedCoeff, float ShrinkingModeStartOffsetSec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetEnableLegsIKAutoShrinkMode_BL");

	Params::DynamicNodeBPLibrary_SetEnableLegsIKAutoShrinkMode_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.EnableAutoShrinkMode = EnableAutoShrinkMode;
	Parms.ShrinkingModeSpeedCoeff = ShrinkingModeSpeedCoeff;
	Parms.ShrinkingModeStartOffsetSec = ShrinkingModeStartOffsetSec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKIdleProcessing_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetEnableLegsIKIdleProcessing_BL(class ACharacter* OwnCharacter, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetEnableLegsIKIdleProcessing_BL");

	Params::DynamicNodeBPLibrary_SetEnableLegsIKIdleProcessing_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetEnableLegsIKPairs_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FLegIndexEnabled_DN>      LegIndexEnabled                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   BlendSpeed                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetEnableLegsIKPairs_BL(class ACharacter* OwnCharacter, const TArray<struct FLegIndexEnabled_DN>& LegIndexEnabled, float BlendSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetEnableLegsIKPairs_BL");

	Params::DynamicNodeBPLibrary_SetEnableLegsIKPairs_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndexEnabled = std::move(LegIndexEnabled);
	Parms.BlendSpeed = BlendSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetFootPredictionEnabledLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FootPredictionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootPredictionCoeff                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetFootPredictionEnabledLegsIK_BL(class ACharacter* OwnCharacter, bool FootPredictionMode, float FootPredictionCoeff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetFootPredictionEnabledLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetFootPredictionEnabledLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.FootPredictionMode = FootPredictionMode;
	Parms.FootPredictionCoeff = FootPredictionCoeff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetFootRotationAlphaLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftLegAlpha                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightLegAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetFootRotationAlphaLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, float LeftLegAlpha, float RightLegAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetFootRotationAlphaLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetFootRotationAlphaLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.LeftLegAlpha = LeftLegAlpha;
	Parms.RightLegAlpha = RightLegAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetFootRotationEnableProneIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetFootRotationEnableProneIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetFootRotationEnableProneIK_BL");

	Params::DynamicNodeBPLibrary_SetFootRotationEnableProneIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetFootRotationParamsLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootClampUpCoeff                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootAngelClampDegreeBack                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootAngelClampDegreeForward                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetFootRotationParamsLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, float FootClampUpCoeff, float FootAngelClampDegreeBack, float FootAngelClampDegreeForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetFootRotationParamsLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetFootRotationParamsLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.FootClampUpCoeff = FootClampUpCoeff;
	Parms.FootAngelClampDegreeBack = FootAngelClampDegreeBack;
	Parms.FootAngelClampDegreeForward = FootAngelClampDegreeForward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetForceShareTimeNextTransition_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceSkipStartFromAssets                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetForceShareTimeNextTransition_BL(class ACharacter* OwnCharacter, class FName BoneName, bool ForceSkipStartFromAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetForceShareTimeNextTransition_BL");

	Params::DynamicNodeBPLibrary_SetForceShareTimeNextTransition_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;
	Parms.ForceSkipStartFromAssets = ForceSkipStartFromAssets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetGroundDeltaLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GroundDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetGroundDeltaLegsIK_BL(class ACharacter* OwnCharacter, float GroundDelta, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetGroundDeltaLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetGroundDeltaLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.GroundDelta = GroundDelta;
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetGroundDeltaOverrideLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGroundDeltaLegsOverride_DN>SetGroundOverride                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetGroundDeltaOverrideLegsIK_BL(class ACharacter* OwnCharacter, const TArray<struct FGroundDeltaLegsOverride_DN>& SetGroundOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetGroundDeltaOverrideLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetGroundDeltaOverrideLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.SetGroundOverride = std::move(SetGroundOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetGroundZeroLevelCSLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LegZeroLevelCS_Right                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LegZeroLevelCS_Left                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetGroundZeroLevelCSLegsIK_BL(class ACharacter* OwnCharacter, bool Enabled, int32 LegIndex, float LegZeroLevelCS_Right, float LegZeroLevelCS_Left)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetGroundZeroLevelCSLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetGroundZeroLevelCSLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Enabled = Enabled;
	Parms.LegIndex = LegIndex;
	Parms.LegZeroLevelCS_Right = LegZeroLevelCS_Right;
	Parms.LegZeroLevelCS_Left = LegZeroLevelCS_Left;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetHandsIKRootBones_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HandIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IkHandBoneName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetHandsIKRootBones_BL(class ACharacter* OwnCharacter, int32 HandIndex, class FName IkHandBoneName, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetHandsIKRootBones_BL");

	Params::DynamicNodeBPLibrary_SetHandsIKRootBones_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandIndex = HandIndex;
	Parms.IkHandBoneName = IkHandBoneName;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetInstantlyAlphaProneIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    EnableLegsIK                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LegsMoveBotMulti                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetInstantlyAlphaProneIK_BL(class ACharacter* OwnCharacter, float Alpha, bool EnableLegsIK, float LegsMoveBotMulti)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetInstantlyAlphaProneIK_BL");

	Params::DynamicNodeBPLibrary_SetInstantlyAlphaProneIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Alpha = Alpha;
	Parms.EnableLegsIK = EnableLegsIK;
	Parms.LegsMoveBotMulti = LegsMoveBotMulti;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLayStatusThisFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LieStatus                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLayStatusThisFrame_BL(class ACharacter* OwnCharacter, bool LieStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLayStatusThisFrame_BL");

	Params::DynamicNodeBPLibrary_SetLayStatusThisFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LieStatus = LieStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKDontMoveBodyMode_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DontMoveBodyMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ApplyOnlyWnehDownVector                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLegsIKDontMoveBodyMode_BL(class ACharacter* OwnCharacter, bool DontMoveBodyMode, bool ApplyOnlyWnehDownVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLegsIKDontMoveBodyMode_BL");

	Params::DynamicNodeBPLibrary_SetLegsIKDontMoveBodyMode_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.DontMoveBodyMode = DontMoveBodyMode;
	Parms.ApplyOnlyWnehDownVector = ApplyOnlyWnehDownVector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKLineTraceDistance_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceUpValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceDownValue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLegsIKLineTraceDistance_BL(class ACharacter* OwnCharacter, float TraceUpValue, float TraceDownValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLegsIKLineTraceDistance_BL");

	Params::DynamicNodeBPLibrary_SetLegsIKLineTraceDistance_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TraceUpValue = TraceUpValue;
	Parms.TraceDownValue = TraceDownValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKRootBones_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IkFootRightBoneName                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             IkFootLeftBoneName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLegsIKRootBones_BL(class ACharacter* OwnCharacter, int32 LegIndex, class FName IkFootRightBoneName, class FName IkFootLeftBoneName, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLegsIKRootBones_BL");

	Params::DynamicNodeBPLibrary_SetLegsIKRootBones_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.IkFootRightBoneName = IkFootRightBoneName;
	Parms.IkFootLeftBoneName = IkFootLeftBoneName;
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKShrinkAlpha_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShrinkAlpha                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLegsIKShrinkAlpha_BL(class ACharacter* OwnCharacter, float ShrinkAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLegsIKShrinkAlpha_BL");

	Params::DynamicNodeBPLibrary_SetLegsIKShrinkAlpha_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ShrinkAlpha = ShrinkAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKTraceChannel_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceTypeQuery                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLegsIKTraceChannel_BL(class ACharacter* OwnCharacter, ETraceTypeQuery TraceTypeQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLegsIKTraceChannel_BL");

	Params::DynamicNodeBPLibrary_SetLegsIKTraceChannel_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TraceTypeQuery = TraceTypeQuery;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLegsIKUseDynamicZPosition_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseZDynamic                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLegsIKUseDynamicZPosition_BL(class ACharacter* OwnCharacter, bool UseZDynamic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLegsIKUseDynamicZPosition_BL");

	Params::DynamicNodeBPLibrary_SetLegsIKUseDynamicZPosition_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.UseZDynamic = UseZDynamic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetLevelToReleaseForAnimFin_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   LevelToRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetLevelToReleaseForAnimFin_BL(class ACharacter* OwnCharacter, uint8 LevelToRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetLevelToReleaseForAnimFin_BL");

	Params::DynamicNodeBPLibrary_SetLevelToReleaseForAnimFin_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LevelToRelease = LevelToRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetMaxLiftLegsLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxLiftLegs                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetMaxLiftLegsLegsIK_BL(class ACharacter* OwnCharacter, float MaxLiftLegs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetMaxLiftLegsLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetMaxLiftLegsLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.MaxLiftLegs = MaxLiftLegs;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetMaxLiftLegsOverrideLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FMaxLiftLegsOverride_DN>  MaxLiftLegsOverride                                    (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetMaxLiftLegsOverrideLegsIK_BL(class ACharacter* OwnCharacter, const TArray<struct FMaxLiftLegsOverride_DN>& MaxLiftLegsOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetMaxLiftLegsOverrideLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetMaxLiftLegsOverrideLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.MaxLiftLegsOverride = std::move(MaxLiftLegsOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetMaxSpeedCurve_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ForAnimAsset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      VelocityCurve                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetMaxSpeedCurve_BL(class ACharacter* OwnCharacter, class UAnimationAsset* ForAnimAsset, class UCurveFloat* VelocityCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetMaxSpeedCurve_BL");

	Params::DynamicNodeBPLibrary_SetMaxSpeedCurve_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ForAnimAsset = ForAnimAsset;
	Parms.VelocityCurve = VelocityCurve;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetMaxSpeedCurveAlpha_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSpeedCurveAlpha                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetMaxSpeedCurveAlpha_BL(class ACharacter* OwnCharacter, float MaxSpeedCurveAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetMaxSpeedCurveAlpha_BL");

	Params::DynamicNodeBPLibrary_SetMaxSpeedCurveAlpha_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.MaxSpeedCurveAlpha = MaxSpeedCurveAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetMaxSpeedCurveVelocityDirectionThreshold_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityDirectionThreshold                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetValueIfGoBeyond                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetMaxSpeedCurveVelocityDirectionThreshold_BL(class ACharacter* OwnCharacter, float VelocityDirectionThreshold, bool ResetValueIfGoBeyond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetMaxSpeedCurveVelocityDirectionThreshold_BL");

	Params::DynamicNodeBPLibrary_SetMaxSpeedCurveVelocityDirectionThreshold_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.VelocityDirectionThreshold = VelocityDirectionThreshold;
	Parms.ResetValueIfGoBeyond = ResetValueIfGoBeyond;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetNextPoseOfsset_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         AddRootRotation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          AddRootTranslation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetNextPoseOfsset_BL(class ACharacter* OwnCharacter, const struct FRotator& AddRootRotation, const struct FVector& AddRootTranslation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetNextPoseOfsset_BL");

	Params::DynamicNodeBPLibrary_SetNextPoseOfsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AddRootRotation = std::move(AddRootRotation);
	Parms.AddRootTranslation = std::move(AddRootTranslation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetNextTransitionTime_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NextTransitionTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAddToInsteadOfOverriding                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetNextTransitionTime_BL(class ACharacter* OwnCharacter, float NextTransitionTime, float Timer, bool UseAddToInsteadOfOverriding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetNextTransitionTime_BL");

	Params::DynamicNodeBPLibrary_SetNextTransitionTime_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NextTransitionTime = NextTransitionTime;
	Parms.Timer = Timer;
	Parms.UseAddToInsteadOfOverriding = UseAddToInsteadOfOverriding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetNextTransitionTimeOnlyOnce_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NextTransitionTime                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAddToInsteadOfOverriding                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetNextTransitionTimeOnlyOnce_BL(class ACharacter* OwnCharacter, float NextTransitionTime, float Timer, int32 MaxCount, bool UseAddToInsteadOfOverriding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetNextTransitionTimeOnlyOnce_BL");

	Params::DynamicNodeBPLibrary_SetNextTransitionTimeOnlyOnce_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NextTransitionTime = NextTransitionTime;
	Parms.Timer = Timer;
	Parms.MaxCount = MaxCount;
	Parms.UseAddToInsteadOfOverriding = UseAddToInsteadOfOverriding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetOffsetAnimalRotatorCSLegsIK_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OffsetAnimalRotatorCS_Right                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OffsetAnimalRotatorCS_Left                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetOffsetAnimalRotatorCSLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, const struct FVector& OffsetAnimalRotatorCS_Right, const struct FVector& OffsetAnimalRotatorCS_Left)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetOffsetAnimalRotatorCSLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetOffsetAnimalRotatorCSLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.OffsetAnimalRotatorCS_Right = std::move(OffsetAnimalRotatorCS_Right);
	Parms.OffsetAnimalRotatorCS_Left = std::move(OffsetAnimalRotatorCS_Left);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetPhysicalMaterialCalculationLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CalcEnable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetPhysicalMaterialCalculationLegsIK_BL(class ACharacter* OwnCharacter, bool CalcEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetPhysicalMaterialCalculationLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetPhysicalMaterialCalculationLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.CalcEnable = CalcEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetPlayingForCurrentAsset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToSpecificAnimationAsset                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyForSpecificAnimationAsset                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlaying                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StopMultiTransition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::SetPlayingForCurrentAsset_BL(class ACharacter* OwnCharacter, class UAnimationAsset* ToSpecificAnimationAsset, bool OnlyForSpecificAnimationAsset, bool bPlaying, class FName BoneName, bool StopMultiTransition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetPlayingForCurrentAsset_BL");

	Params::DynamicNodeBPLibrary_SetPlayingForCurrentAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ToSpecificAnimationAsset = ToSpecificAnimationAsset;
	Parms.OnlyForSpecificAnimationAsset = OnlyForSpecificAnimationAsset;
	Parms.bPlaying = bPlaying;
	Parms.BoneName = BoneName;
	Parms.StopMultiTransition = StopMultiTransition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetPlayRateForCurrentAsset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  ToSpecificAnimationAsset                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyForSpecificAnimationAsset                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::SetPlayRateForCurrentAsset_BL(class ACharacter* OwnCharacter, class UAnimationAsset* ToSpecificAnimationAsset, bool OnlyForSpecificAnimationAsset, float PlayRate, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetPlayRateForCurrentAsset_BL");

	Params::DynamicNodeBPLibrary_SetPlayRateForCurrentAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.ToSpecificAnimationAsset = ToSpecificAnimationAsset;
	Parms.OnlyForSpecificAnimationAsset = OnlyForSpecificAnimationAsset;
	Parms.PlayRate = PlayRate;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetPlayRateOverrideNextMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetPlayRateOverrideNextMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* Animation, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetPlayRateOverrideNextMachine_BL");

	Params::DynamicNodeBPLibrary_SetPlayRateOverrideNextMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Animation = Animation;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetPluginInfoTimer_DN
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableAllInfo                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetPluginInfoTimer_DN(class ACharacter* OwnCharacter, float Timer, bool DisableAllInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetPluginInfoTimer_DN");

	Params::DynamicNodeBPLibrary_SetPluginInfoTimer_DN Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Timer = Timer;
	Parms.DisableAllInfo = DisableAllInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetProneIKTraceChannel_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETraceTypeQuery                         TraceTypeQuery                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetProneIKTraceChannel_BL(class ACharacter* OwnCharacter, ETraceTypeQuery TraceTypeQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetProneIKTraceChannel_BL");

	Params::DynamicNodeBPLibrary_SetProneIKTraceChannel_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TraceTypeQuery = TraceTypeQuery;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetRearSocketWeightLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftRearSocketWeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightRearSocketWeight                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERearSocketWeightSlopeType_DN           SlopeType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetRearSocketWeightLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, float LeftRearSocketWeight, float RightRearSocketWeight, ERearSocketWeightSlopeType_DN SlopeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetRearSocketWeightLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetRearSocketWeightLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.LeftRearSocketWeight = LeftRearSocketWeight;
	Parms.RightRearSocketWeight = RightRearSocketWeight;
	Parms.SlopeType = SlopeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetRearSocketWeightProneIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LeftRearSocketWeight                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RightRearSocketWeight                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ERearSocketWeightSlopeType_DN           SlopeType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetRearSocketWeightProneIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, float LeftRearSocketWeight, float RightRearSocketWeight, ERearSocketWeightSlopeType_DN SlopeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetRearSocketWeightProneIK_BL");

	Params::DynamicNodeBPLibrary_SetRearSocketWeightProneIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.LeftRearSocketWeight = LeftRearSocketWeight;
	Parms.RightRearSocketWeight = RightRearSocketWeight;
	Parms.SlopeType = SlopeType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetSeatStatusThisFrame_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SeatStatus                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetSeatStatusThisFrame_BL(class ACharacter* OwnCharacter, bool SeatStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetSeatStatusThisFrame_BL");

	Params::DynamicNodeBPLibrary_SetSeatStatusThisFrame_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.SeatStatus = SeatStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetSeparateMaxLowerRoot_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SeparateMaxLowerRoot                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetSeparateMaxLowerRoot_BL(class ACharacter* OwnCharacter, bool Enabled, float SeparateMaxLowerRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetSeparateMaxLowerRoot_BL");

	Params::DynamicNodeBPLibrary_SetSeparateMaxLowerRoot_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Enabled = Enabled;
	Parms.SeparateMaxLowerRoot = SeparateMaxLowerRoot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetStartFromMap_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>                           StartFromArray                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetStartFromMap_BL(class ACharacter* OwnCharacter, class UAnimationAsset* Animation, const TArray<float>& StartFromArray, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetStartFromMap_BL");

	Params::DynamicNodeBPLibrary_SetStartFromMap_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Animation = Animation;
	Parms.StartFromArray = std::move(StartFromArray);
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetStartFromOverrideNextMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  Animation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayFrom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayOnce                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetStartFromOverrideNextMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* Animation, float PlayFrom, bool PlayOnce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetStartFromOverrideNextMachine_BL");

	Params::DynamicNodeBPLibrary_SetStartFromOverrideNextMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Animation = Animation;
	Parms.PlayFrom = PlayFrom;
	Parms.PlayOnce = PlayOnce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTransitionTimeLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeLegs                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeLegsRotation                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeRoot                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MovingTransitionCoeff                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTransitionTimeLegsIK_BL(class ACharacter* OwnCharacter, float TransitionTimeLegs, float TransitionTimeLegsRotation, float TransitionTimeRoot, float MovingTransitionCoeff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTransitionTimeLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetTransitionTimeLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TransitionTimeLegs = TransitionTimeLegs;
	Parms.TransitionTimeLegsRotation = TransitionTimeLegsRotation;
	Parms.TransitionTimeRoot = TransitionTimeRoot;
	Parms.MovingTransitionCoeff = MovingTransitionCoeff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimations_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceLeftAnimation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceRightAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimitBlend                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedFrom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeAnimBlendSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FastBlendSpeedFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAngleRotationThredhold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OneFrameRotationThredhold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptivePlayRate                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptivePlayRateFactor                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAdaptivePlayRateLimit                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAdaptivePlayRateLimit                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptiveAnimationEnd                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptiveAnimationEndYawThreshold                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAlphaWhenMoving                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTurnInPlaceAnimations_BL(class ACharacter* OwnCharacter, class UAnimationAsset* TurnInPlaceLeftAnimation, class UAnimationAsset* TurnInPlaceRightAnimation, float SpeedLimit, float SpeedLimitBlend, float BlendSpeedIn, float BlendSpeedFrom, float ChangeAnimBlendSpeed, float FastBlendSpeedFactor, float MinAngleRotationThredhold, float OneFrameRotationThredhold, bool UseAdaptivePlayRate, float AdaptivePlayRateFactor, float MinAdaptivePlayRateLimit, float MaxAdaptivePlayRateLimit, bool UseAdaptiveAnimationEnd, float AdaptiveAnimationEndYawThreshold, float MaxAlphaWhenMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTurnInPlaceAnimations_BL");

	Params::DynamicNodeBPLibrary_SetTurnInPlaceAnimations_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TurnInPlaceLeftAnimation = TurnInPlaceLeftAnimation;
	Parms.TurnInPlaceRightAnimation = TurnInPlaceRightAnimation;
	Parms.SpeedLimit = SpeedLimit;
	Parms.SpeedLimitBlend = SpeedLimitBlend;
	Parms.BlendSpeedIn = BlendSpeedIn;
	Parms.BlendSpeedFrom = BlendSpeedFrom;
	Parms.ChangeAnimBlendSpeed = ChangeAnimBlendSpeed;
	Parms.FastBlendSpeedFactor = FastBlendSpeedFactor;
	Parms.MinAngleRotationThredhold = MinAngleRotationThredhold;
	Parms.OneFrameRotationThredhold = OneFrameRotationThredhold;
	Parms.UseAdaptivePlayRate = UseAdaptivePlayRate;
	Parms.AdaptivePlayRateFactor = AdaptivePlayRateFactor;
	Parms.MinAdaptivePlayRateLimit = MinAdaptivePlayRateLimit;
	Parms.MaxAdaptivePlayRateLimit = MaxAdaptivePlayRateLimit;
	Parms.UseAdaptiveAnimationEnd = UseAdaptiveAnimationEnd;
	Parms.AdaptiveAnimationEndYawThreshold = AdaptiveAnimationEndYawThreshold;
	Parms.MaxAlphaWhenMoving = MaxAlphaWhenMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsForAsset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceLeftAnimation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceRightAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimitBlend                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedFrom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeAnimBlendSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FastBlendSpeedFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAngleRotationThredhold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OneFrameRotationThredhold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptivePlayRate                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptivePlayRateFactor                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAdaptivePlayRateLimit                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAdaptivePlayRateLimit                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptiveAnimationEnd                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptiveAnimationEndYawThreshold                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAlphaWhenMoving                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTurnInPlaceAnimationsForAsset_BL(class ACharacter* OwnCharacter, class UAnimationAsset* AnimationAsset, class UAnimationAsset* TurnInPlaceLeftAnimation, class UAnimationAsset* TurnInPlaceRightAnimation, float SpeedLimit, float SpeedLimitBlend, float BlendSpeedIn, float BlendSpeedFrom, float ChangeAnimBlendSpeed, float FastBlendSpeedFactor, float MinAngleRotationThredhold, float OneFrameRotationThredhold, bool UseAdaptivePlayRate, float AdaptivePlayRateFactor, float MinAdaptivePlayRateLimit, float MaxAdaptivePlayRateLimit, bool UseAdaptiveAnimationEnd, float AdaptiveAnimationEndYawThreshold, float MaxAlphaWhenMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTurnInPlaceAnimationsForAsset_BL");

	Params::DynamicNodeBPLibrary_SetTurnInPlaceAnimationsForAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TurnInPlaceLeftAnimation = TurnInPlaceLeftAnimation;
	Parms.TurnInPlaceRightAnimation = TurnInPlaceRightAnimation;
	Parms.SpeedLimit = SpeedLimit;
	Parms.SpeedLimitBlend = SpeedLimitBlend;
	Parms.BlendSpeedIn = BlendSpeedIn;
	Parms.BlendSpeedFrom = BlendSpeedFrom;
	Parms.ChangeAnimBlendSpeed = ChangeAnimBlendSpeed;
	Parms.FastBlendSpeedFactor = FastBlendSpeedFactor;
	Parms.MinAngleRotationThredhold = MinAngleRotationThredhold;
	Parms.OneFrameRotationThredhold = OneFrameRotationThredhold;
	Parms.UseAdaptivePlayRate = UseAdaptivePlayRate;
	Parms.AdaptivePlayRateFactor = AdaptivePlayRateFactor;
	Parms.MinAdaptivePlayRateLimit = MinAdaptivePlayRateLimit;
	Parms.MaxAdaptivePlayRateLimit = MaxAdaptivePlayRateLimit;
	Parms.UseAdaptiveAnimationEnd = UseAdaptiveAnimationEnd;
	Parms.AdaptiveAnimationEndYawThreshold = AdaptiveAnimationEndYawThreshold;
	Parms.MaxAlphaWhenMoving = MaxAlphaWhenMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponent2_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceLeftAnimation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceRightAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedFrom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeAnimBlendSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FastBlendSpeedFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRateFixed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptiveAnimationEnd                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptiveAnimationEndYawThreshold                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTurnInPlaceAnimationsOverrideDNMComponent2_BL(class ACharacter* OwnCharacter, class UAnimationAsset* TurnInPlaceLeftAnimation, class UAnimationAsset* TurnInPlaceRightAnimation, float SpeedLimit, float BlendSpeedIn, float BlendSpeedFrom, float ChangeAnimBlendSpeed, float FastBlendSpeedFactor, float PlayRateFixed, bool UseAdaptiveAnimationEnd, float AdaptiveAnimationEndYawThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTurnInPlaceAnimationsOverrideDNMComponent2_BL");

	Params::DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent2_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TurnInPlaceLeftAnimation = TurnInPlaceLeftAnimation;
	Parms.TurnInPlaceRightAnimation = TurnInPlaceRightAnimation;
	Parms.SpeedLimit = SpeedLimit;
	Parms.BlendSpeedIn = BlendSpeedIn;
	Parms.BlendSpeedFrom = BlendSpeedFrom;
	Parms.ChangeAnimBlendSpeed = ChangeAnimBlendSpeed;
	Parms.FastBlendSpeedFactor = FastBlendSpeedFactor;
	Parms.PlayRateFixed = PlayRateFixed;
	Parms.UseAdaptiveAnimationEnd = UseAdaptiveAnimationEnd;
	Parms.AdaptiveAnimationEndYawThreshold = AdaptiveAnimationEndYawThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponent_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceLeftAnimation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceRightAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedFrom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeAnimBlendSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FastBlendSpeedFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRateFixed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptiveAnimationEnd                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptiveAnimationEndYawThreshold                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTurnInPlaceAnimationsOverrideDNMComponent_BL(class ACharacter* OwnCharacter, class UAnimationAsset* TurnInPlaceLeftAnimation, class UAnimationAsset* TurnInPlaceRightAnimation, float SpeedLimit, float BlendSpeedIn, float BlendSpeedFrom, float ChangeAnimBlendSpeed, float FastBlendSpeedFactor, float PlayRateFixed, bool UseAdaptiveAnimationEnd, float AdaptiveAnimationEndYawThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTurnInPlaceAnimationsOverrideDNMComponent_BL");

	Params::DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponent_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.TurnInPlaceLeftAnimation = TurnInPlaceLeftAnimation;
	Parms.TurnInPlaceRightAnimation = TurnInPlaceRightAnimation;
	Parms.SpeedLimit = SpeedLimit;
	Parms.BlendSpeedIn = BlendSpeedIn;
	Parms.BlendSpeedFrom = BlendSpeedFrom;
	Parms.ChangeAnimBlendSpeed = ChangeAnimBlendSpeed;
	Parms.FastBlendSpeedFactor = FastBlendSpeedFactor;
	Parms.PlayRateFixed = PlayRateFixed;
	Parms.UseAdaptiveAnimationEnd = UseAdaptiveAnimationEnd;
	Parms.AdaptiveAnimationEndYawThreshold = AdaptiveAnimationEndYawThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceLeftAnimation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceRightAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedFrom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeAnimBlendSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FastBlendSpeedFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRateFixed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptiveAnimationEnd                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptiveAnimationEndYawThreshold                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL(class ACharacter* OwnCharacter, class UAnimationAsset* AnimationAsset, class UAnimationAsset* TurnInPlaceLeftAnimation, class UAnimationAsset* TurnInPlaceRightAnimation, float SpeedLimit, float BlendSpeedIn, float BlendSpeedFrom, float ChangeAnimBlendSpeed, float FastBlendSpeedFactor, float PlayRateFixed, bool UseAdaptiveAnimationEnd, float AdaptiveAnimationEndYawThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL");

	Params::DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset2_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TurnInPlaceLeftAnimation = TurnInPlaceLeftAnimation;
	Parms.TurnInPlaceRightAnimation = TurnInPlaceRightAnimation;
	Parms.SpeedLimit = SpeedLimit;
	Parms.BlendSpeedIn = BlendSpeedIn;
	Parms.BlendSpeedFrom = BlendSpeedFrom;
	Parms.ChangeAnimBlendSpeed = ChangeAnimBlendSpeed;
	Parms.FastBlendSpeedFactor = FastBlendSpeedFactor;
	Parms.PlayRateFixed = PlayRateFixed;
	Parms.UseAdaptiveAnimationEnd = UseAdaptiveAnimationEnd;
	Parms.AdaptiveAnimationEndYawThreshold = AdaptiveAnimationEndYawThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceLeftAnimation                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  TurnInPlaceRightAnimation                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpeedLimit                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedIn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendSpeedFrom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeAnimBlendSpeed                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FastBlendSpeedFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRateFixed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAdaptiveAnimationEnd                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdaptiveAnimationEndYawThreshold                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL(class ACharacter* OwnCharacter, class UAnimationAsset* AnimationAsset, class UAnimationAsset* TurnInPlaceLeftAnimation, class UAnimationAsset* TurnInPlaceRightAnimation, float SpeedLimit, float BlendSpeedIn, float BlendSpeedFrom, float ChangeAnimBlendSpeed, float FastBlendSpeedFactor, float PlayRateFixed, bool UseAdaptiveAnimationEnd, float AdaptiveAnimationEndYawThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL");

	Params::DynamicNodeBPLibrary_SetTurnInPlaceAnimationsOverrideDNMComponentForAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TurnInPlaceLeftAnimation = TurnInPlaceLeftAnimation;
	Parms.TurnInPlaceRightAnimation = TurnInPlaceRightAnimation;
	Parms.SpeedLimit = SpeedLimit;
	Parms.BlendSpeedIn = BlendSpeedIn;
	Parms.BlendSpeedFrom = BlendSpeedFrom;
	Parms.ChangeAnimBlendSpeed = ChangeAnimBlendSpeed;
	Parms.FastBlendSpeedFactor = FastBlendSpeedFactor;
	Parms.PlayRateFixed = PlayRateFixed;
	Parms.UseAdaptiveAnimationEnd = UseAdaptiveAnimationEnd;
	Parms.AdaptiveAnimationEndYawThreshold = AdaptiveAnimationEndYawThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetUpdateFrameRateLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetUpdateFrameRateLegsIK_BL(class ACharacter* OwnCharacter, float UpdateFrameRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetUpdateFrameRateLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetUpdateFrameRateLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.UpdateFrameRate = UpdateFrameRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupDelegateOnAnimBlendBoneFinBlend_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UAnimationAsset* Sequence, class FName BoneName)>AnimBlendBoneFinDelegate                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupDelegateOnAnimBlendBoneFinBlend_BL(class ACharacter* OwnCharacter, const TDelegate<void(class UAnimationAsset* Sequence, class FName BoneName)>& AnimBlendBoneFinDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupDelegateOnAnimBlendBoneFinBlend_BL");

	Params::DynamicNodeBPLibrary_SetupDelegateOnAnimBlendBoneFinBlend_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimBlendBoneFinDelegate = AnimBlendBoneFinDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupDelegateOnAnimFinBlend_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class UAnimationAsset* Sequence)>AnimFinDelegate                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupDelegateOnAnimFinBlend_BL(class ACharacter* OwnCharacter, const TDelegate<void(class UAnimationAsset* Sequence)>& AnimFinDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupDelegateOnAnimFinBlend_BL");

	Params::DynamicNodeBPLibrary_SetupDelegateOnAnimFinBlend_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimFinDelegate = AnimFinDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupHandsCCDIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHandsCCDIKData_DN>       HandsCCDIKData                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupHandsCCDIK_BL(class ACharacter* OwnCharacter, const TArray<struct FHandsCCDIKData_DN>& HandsCCDIKData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupHandsCCDIK_BL");

	Params::DynamicNodeBPLibrary_SetupHandsCCDIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandsCCDIKData = std::move(HandsCCDIKData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupHandsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHandsIKData_DN>          HandsIKData                                            (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupHandsIK_BL(class ACharacter* OwnCharacter, const TArray<struct FHandsIKData_DN>& HandsIKData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupHandsIK_BL");

	Params::DynamicNodeBPLibrary_SetupHandsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.HandsIKData = std::move(HandsIKData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIK_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairs_DN                RootLegsPairs                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FRootLegsPairs_DN>        FrontLegsPairs                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FootPredictionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootPredictionCoeff                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignRootToGround                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignFrontRearPlane                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LowBodyMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IkLegs                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StairsLegDownCoeff                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootAngelClampDegree                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootClampUpCoeff                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRootTrace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceAlpha                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIK_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairs_DN& RootLegsPairs, const TArray<struct FRootLegsPairs_DN>& FrontLegsPairs, float UpdateFrameRate, bool FootPredictionMode, float FootPredictionCoeff, bool ShowTraceDebug, bool AlignRootToGround, bool AlignFrontRearPlane, bool LowBodyMode, bool IkLegs, float StairsLegDownCoeff, float FootAngelClampDegree, float FootClampUpCoeff, bool UseRootTrace, float RootTraceRate, float RootTraceAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIK_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairs = std::move(RootLegsPairs);
	Parms.FrontLegsPairs = std::move(FrontLegsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.FootPredictionMode = FootPredictionMode;
	Parms.FootPredictionCoeff = FootPredictionCoeff;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.AlignRootToGround = AlignRootToGround;
	Parms.AlignFrontRearPlane = AlignFrontRearPlane;
	Parms.LowBodyMode = LowBodyMode;
	Parms.IkLegs = IkLegs;
	Parms.StairsLegDownCoeff = StairsLegDownCoeff;
	Parms.FootAngelClampDegree = FootAngelClampDegree;
	Parms.FootClampUpCoeff = FootClampUpCoeff;
	Parms.UseRootTrace = UseRootTrace;
	Parms.RootTraceRate = RootTraceRate;
	Parms.RootTraceAlpha = RootTraceAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKAnimals_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairs_DN                RootLegsPairs                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FootPredictionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootPredictionCoeff                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LowBodyMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IkLegs                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StairsLegDownCoeff                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootAngelClampDegree                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootClampUpCoeff                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKAnimals_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairs_DN& RootLegsPairs, float UpdateFrameRate, bool FootPredictionMode, float FootPredictionCoeff, bool ShowTraceDebug, bool LowBodyMode, bool IkLegs, float StairsLegDownCoeff, float FootAngelClampDegree, float FootClampUpCoeff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKAnimals_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKAnimals_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairs = std::move(RootLegsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.FootPredictionMode = FootPredictionMode;
	Parms.FootPredictionCoeff = FootPredictionCoeff;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.LowBodyMode = LowBodyMode;
	Parms.IkLegs = IkLegs;
	Parms.StairsLegDownCoeff = StairsLegDownCoeff;
	Parms.FootAngelClampDegree = FootAngelClampDegree;
	Parms.FootClampUpCoeff = FootClampUpCoeff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKAnimalsSimple_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairsSimple_DN          RootLegsPairs                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FootPredictionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootPredictionCoeff                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LowBodyMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IkLegs                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StairsLegDownCoeff                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKAnimalsSimple_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairsSimple_DN& RootLegsPairs, float UpdateFrameRate, bool FootPredictionMode, float FootPredictionCoeff, bool ShowTraceDebug, bool LowBodyMode, bool IkLegs, float StairsLegDownCoeff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKAnimalsSimple_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKAnimalsSimple_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairs = std::move(RootLegsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.FootPredictionMode = FootPredictionMode;
	Parms.FootPredictionCoeff = FootPredictionCoeff;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.LowBodyMode = LowBodyMode;
	Parms.IkLegs = IkLegs;
	Parms.StairsLegDownCoeff = StairsLegDownCoeff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKHumanoids_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairs_DN                RootLegsPairs                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FootPredictionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootPredictionCoeff                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootAngelClampDegree                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootClampUpCoeff                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKHumanoids_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairs_DN& RootLegsPairs, float UpdateFrameRate, bool FootPredictionMode, float FootPredictionCoeff, bool ShowTraceDebug, float FootAngelClampDegree, float FootClampUpCoeff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKHumanoids_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKHumanoids_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairs = std::move(RootLegsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.FootPredictionMode = FootPredictionMode;
	Parms.FootPredictionCoeff = FootPredictionCoeff;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.FootAngelClampDegree = FootAngelClampDegree;
	Parms.FootClampUpCoeff = FootClampUpCoeff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKSimple_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairsSimple_DN          RootLegsPairs                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FRootLegsPairsSimple_DN>  FrontLegsPairs                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FootPredictionMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FootPredictionCoeff                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignRootToGround                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignOnlyFrontRearPlane                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LowBodyMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IkLegs                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StairsLegDownCoeff                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRootTrace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceAlpha                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKSimple_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairsSimple_DN& RootLegsPairs, const TArray<struct FRootLegsPairsSimple_DN>& FrontLegsPairs, float UpdateFrameRate, bool FootPredictionMode, float FootPredictionCoeff, bool ShowTraceDebug, bool AlignRootToGround, bool AlignOnlyFrontRearPlane, bool LowBodyMode, bool IkLegs, float StairsLegDownCoeff, bool UseRootTrace, float RootTraceRate, float RootTraceAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKSimple_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKSimple_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairs = std::move(RootLegsPairs);
	Parms.FrontLegsPairs = std::move(FrontLegsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.FootPredictionMode = FootPredictionMode;
	Parms.FootPredictionCoeff = FootPredictionCoeff;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.AlignRootToGround = AlignRootToGround;
	Parms.AlignOnlyFrontRearPlane = AlignOnlyFrontRearPlane;
	Parms.LowBodyMode = LowBodyMode;
	Parms.IkLegs = IkLegs;
	Parms.StairsLegDownCoeff = StairsLegDownCoeff;
	Parms.UseRootTrace = UseRootTrace;
	Parms.RootTraceRate = RootTraceRate;
	Parms.RootTraceAlpha = RootTraceAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKSpiders_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairsSSimple_DN         RootLegsPairsSSimple                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LowBodyMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IkLegs                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignOnlyFrontRearPlane                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRootTrace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceAlpha                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKSpiders_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairsSSimple_DN& RootLegsPairsSSimple, float UpdateFrameRate, bool ShowTraceDebug, bool LowBodyMode, bool IkLegs, bool AlignOnlyFrontRearPlane, bool UseRootTrace, float RootTraceRate, float RootTraceAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKSpiders_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKSpiders_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairsSSimple = std::move(RootLegsPairsSSimple);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.LowBodyMode = LowBodyMode;
	Parms.IkLegs = IkLegs;
	Parms.AlignOnlyFrontRearPlane = AlignOnlyFrontRearPlane;
	Parms.UseRootTrace = UseRootTrace;
	Parms.RootTraceRate = RootTraceRate;
	Parms.RootTraceAlpha = RootTraceAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKSpidersSimple_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootLegsPairsSimple_DN          RootLegsPairs                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LowBodyMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IkLegs                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignOnlyFrontRearPlane                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRootTrace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceAlpha                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKSpidersSimple_BL(class ACharacter* OwnCharacter, const struct FRootLegsPairsSimple_DN& RootLegsPairs, float UpdateFrameRate, bool ShowTraceDebug, bool LowBodyMode, bool IkLegs, bool AlignOnlyFrontRearPlane, bool UseRootTrace, float RootTraceRate, float RootTraceAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKSpidersSimple_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKSpidersSimple_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootLegsPairs = std::move(RootLegsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.LowBodyMode = LowBodyMode;
	Parms.IkLegs = IkLegs;
	Parms.AlignOnlyFrontRearPlane = AlignOnlyFrontRearPlane;
	Parms.UseRootTrace = UseRootTrace;
	Parms.RootTraceRate = RootTraceRate;
	Parms.RootTraceAlpha = RootTraceAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupLegsIKWorms_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootSSocketPairs_DN             RootSocketsPairs                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignOnlyFrontRearPlane                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseRootTrace                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceRate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RootTraceAlpha                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupLegsIKWorms_BL(class ACharacter* OwnCharacter, const struct FRootSSocketPairs_DN& RootSocketsPairs, float UpdateFrameRate, bool ShowTraceDebug, bool AlignOnlyFrontRearPlane, bool UseRootTrace, float RootTraceRate, float RootTraceAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupLegsIKWorms_BL");

	Params::DynamicNodeBPLibrary_SetupLegsIKWorms_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootSocketsPairs = std::move(RootSocketsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.AlignOnlyFrontRearPlane = AlignOnlyFrontRearPlane;
	Parms.UseRootTrace = UseRootTrace;
	Parms.RootTraceRate = RootTraceRate;
	Parms.RootTraceAlpha = RootTraceAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SetupProneIK_BL
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRootSSocketPairs_DN             RootSocketsPairs                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   UpdateFrameRate                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowTraceDebug                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlignOnlyFrontRearPlane                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SideAngleClamp                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalAngleClamp                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         MeshRotator                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::SetupProneIK_BL(class ACharacter* OwnCharacter, const struct FRootSSocketPairs_DN& RootSocketsPairs, float UpdateFrameRate, bool ShowTraceDebug, bool AlignOnlyFrontRearPlane, float SideAngleClamp, float TotalAngleClamp, const struct FRotator& MeshRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SetupProneIK_BL");

	Params::DynamicNodeBPLibrary_SetupProneIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RootSocketsPairs = std::move(RootSocketsPairs);
	Parms.UpdateFrameRate = UpdateFrameRate;
	Parms.ShowTraceDebug = ShowTraceDebug;
	Parms.AlignOnlyFrontRearPlane = AlignOnlyFrontRearPlane;
	Parms.SideAngleClamp = SideAngleClamp;
	Parms.TotalAngleClamp = TotalAngleClamp;
	Parms.MeshRotator = std::move(MeshRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.ShiftTracePointLegsIK_BL
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DeltaVectorCSLeft                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DeltaVectorCSRight                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::ShiftTracePointLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, const struct FVector& DeltaVectorCSLeft, const struct FVector& DeltaVectorCSRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "ShiftTracePointLegsIK_BL");

	Params::DynamicNodeBPLibrary_ShiftTracePointLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.DeltaVectorCSLeft = std::move(DeltaVectorCSLeft);
	Parms.DeltaVectorCSRight = std::move(DeltaVectorCSRight);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.SlopeDetection_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlopeStatus_DN                         SlopeStatus                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayTraceNomalThreshold                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlopeUpThresholdIn                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlopeUpThresholdOut                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlopeDownThresholdIn                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlopeDownThresholdOut                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinTimeOnSlopeToPlay                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlopeUpMinTimeToPlay                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SlopeDownMinTimeToPlay                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChangeSlopeDirMinTimeToPlay                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayDistance                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RayHeightFactor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Use4Rays                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Use4RaysHalfWidth                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UpdateRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowDebug                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDynamicNodeBPLibrary::SlopeDetection_BL(class ACharacter* OwnCharacter, ESlopeStatus_DN* SlopeStatus, float RayTraceNomalThreshold, float SlopeUpThresholdIn, float SlopeUpThresholdOut, float SlopeDownThresholdIn, float SlopeDownThresholdOut, float MinTimeOnSlopeToPlay, float SlopeUpMinTimeToPlay, float SlopeDownMinTimeToPlay, float ChangeSlopeDirMinTimeToPlay, float RayDistance, float RayHeightFactor, bool Use4Rays, float Use4RaysHalfWidth, int32 UpdateRate, bool ShowDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SlopeDetection_BL");

	Params::DynamicNodeBPLibrary_SlopeDetection_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.RayTraceNomalThreshold = RayTraceNomalThreshold;
	Parms.SlopeUpThresholdIn = SlopeUpThresholdIn;
	Parms.SlopeUpThresholdOut = SlopeUpThresholdOut;
	Parms.SlopeDownThresholdIn = SlopeDownThresholdIn;
	Parms.SlopeDownThresholdOut = SlopeDownThresholdOut;
	Parms.MinTimeOnSlopeToPlay = MinTimeOnSlopeToPlay;
	Parms.SlopeUpMinTimeToPlay = SlopeUpMinTimeToPlay;
	Parms.SlopeDownMinTimeToPlay = SlopeDownMinTimeToPlay;
	Parms.ChangeSlopeDirMinTimeToPlay = ChangeSlopeDirMinTimeToPlay;
	Parms.RayDistance = RayDistance;
	Parms.RayHeightFactor = RayHeightFactor;
	Parms.Use4Rays = Use4Rays;
	Parms.Use4RaysHalfWidth = Use4RaysHalfWidth;
	Parms.UpdateRate = UpdateRate;
	Parms.ShowDebug = ShowDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SlopeStatus != nullptr)
		*SlopeStatus = Parms.SlopeStatus;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.StartAnimationStack_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   StackPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BoneBlendAlpha                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseTransitionZones                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::StartAnimationStack_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, uint8 StackPriority, class FName BoneName, float BoneBlendAlpha, float BlendTime, bool UseTransitionZones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "StartAnimationStack_BL");

	Params::DynamicNodeBPLibrary_StartAnimationStack_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.StackPriority = StackPriority;
	Parms.BoneName = BoneName;
	Parms.BoneBlendAlpha = BoneBlendAlpha;
	Parms.BlendTime = BlendTime;
	Parms.UseTransitionZones = UseTransitionZones;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function DynamicNode.DynamicNodeBPLibrary.SwimmMachine_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  StartSwimmingAnimation                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleAnimation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  IdleSurfaceAnimation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  EndSwimmingAnimation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  JumpOutOfWaterAnimation                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseOnlyAccelerationForDM                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShallowWaterImmersionDepth                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SurfaceSwimmImmersionDepth                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutOfWaterImmersionDepth                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IdlePoseVelocityTreshold                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ToS                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_SIdle                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime_ES                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTimeQuickReturn                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PrelandedInWaterAddPlaySec                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAnimationReturnTypes_DN                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimationReturnTypes_DN UDynamicNodeBPLibrary::SwimmMachine_BL(class ACharacter* OwnCharacter, class UAnimationAsset* StartSwimmingAnimation, class UAnimationAsset* IdleAnimation, class UAnimationAsset* IdleSurfaceAnimation, class UAnimationAsset* EndSwimmingAnimation, class UAnimationAsset* JumpOutOfWaterAnimation, bool UseOnlyAccelerationForDM, float ShallowWaterImmersionDepth, float SurfaceSwimmImmersionDepth, float OutOfWaterImmersionDepth, float IdlePoseVelocityTreshold, float TransitionTime_ToS, float TransitionTime_SIdle, float TransitionTime_ES, float PlayRate, float TransitionTimeQuickReturn, float PrelandedInWaterAddPlaySec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "SwimmMachine_BL");

	Params::DynamicNodeBPLibrary_SwimmMachine_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.StartSwimmingAnimation = StartSwimmingAnimation;
	Parms.IdleAnimation = IdleAnimation;
	Parms.IdleSurfaceAnimation = IdleSurfaceAnimation;
	Parms.EndSwimmingAnimation = EndSwimmingAnimation;
	Parms.JumpOutOfWaterAnimation = JumpOutOfWaterAnimation;
	Parms.UseOnlyAccelerationForDM = UseOnlyAccelerationForDM;
	Parms.ShallowWaterImmersionDepth = ShallowWaterImmersionDepth;
	Parms.SurfaceSwimmImmersionDepth = SurfaceSwimmImmersionDepth;
	Parms.OutOfWaterImmersionDepth = OutOfWaterImmersionDepth;
	Parms.IdlePoseVelocityTreshold = IdlePoseVelocityTreshold;
	Parms.TransitionTime_ToS = TransitionTime_ToS;
	Parms.TransitionTime_SIdle = TransitionTime_SIdle;
	Parms.TransitionTime_ES = TransitionTime_ES;
	Parms.PlayRate = PlayRate;
	Parms.TransitionTimeQuickReturn = TransitionTimeQuickReturn;
	Parms.PrelandedInWaterAddPlaySec = PrelandedInWaterAddPlaySec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.TransitionToAnimFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTillNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartFrom                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::TransitionToAnimFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* AnimationAsset, float TransitionTime, bool bIsLooping, float InPlayRate, class FName PlayFromNotify, class FName PlayTillNotify, bool CanRestart, float StartFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "TransitionToAnimFromCurPose_BL");

	Params::DynamicNodeBPLibrary_TransitionToAnimFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.PlayFromNotify = PlayFromNotify;
	Parms.PlayTillNotify = PlayTillNotify;
	Parms.CanRestart = CanRestart;
	Parms.StartFrom = StartFrom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.TransitionToMontageFromCurPose_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimationAsset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLooping                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayFromSection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestart                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::TransitionToMontageFromCurPose_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimMontage* AnimationAsset, float TransitionTime, bool bIsLooping, float InPlayRate, class FName PlayFromSection, float StartingPosition, bool CanRestart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "TransitionToMontageFromCurPose_BL");

	Params::DynamicNodeBPLibrary_TransitionToMontageFromCurPose_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationAsset = AnimationAsset;
	Parms.TransitionTime = TransitionTime;
	Parms.bIsLooping = bIsLooping;
	Parms.InPlayRate = InPlayRate;
	Parms.PlayFromSection = PlayFromSection;
	Parms.StartingPosition = StartingPosition;
	Parms.CanRestart = CanRestart;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.TurnToControlRotation_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AnchorBone                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneToRotate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UsePinch                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMulti                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchUpperGap                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchBottomGap                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchOffset                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDegrees                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotationAlpha                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::TurnToControlRotation_BL(class ACharacter* OwnCharacter, class FName AnchorBone, class FName BoneToRotate, bool UsePinch, float PitchMulti, float PitchUpperGap, float PitchBottomGap, float PitchOffset, float MaxDegrees, float TransitionTime, float RotationAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "TurnToControlRotation_BL");

	Params::DynamicNodeBPLibrary_TurnToControlRotation_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnchorBone = AnchorBone;
	Parms.BoneToRotate = BoneToRotate;
	Parms.UsePinch = UsePinch;
	Parms.PitchMulti = PitchMulti;
	Parms.PitchUpperGap = PitchUpperGap;
	Parms.PitchBottomGap = PitchBottomGap;
	Parms.PitchOffset = PitchOffset;
	Parms.MaxDegrees = MaxDegrees;
	Parms.TransitionTime = TransitionTime;
	Parms.RotationAlpha = RotationAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UnassignDelegate_AllNotify_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UnassignDelegate_AllNotify_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UnassignDelegate_AllNotify_BL");

	Params::DynamicNodeBPLibrary_UnassignDelegate_AllNotify_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UnassignDelegate_AnimationChange_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UnassignDelegate_AnimationChange_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UnassignDelegate_AnimationChange_BL");

	Params::DynamicNodeBPLibrary_UnassignDelegate_AnimationChange_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UnassignDelegate_SpecificNotify_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UnassignDelegate_SpecificNotify_BL(class ACharacter* OwnCharacter, class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UnassignDelegate_SpecificNotify_BL");

	Params::DynamicNodeBPLibrary_UnassignDelegate_SpecificNotify_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NotifyName = NotifyName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UnAssignDelegate_SpecificNotifyAndAsset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NotifyName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                AnimationTrack                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UnAssignDelegate_SpecificNotifyAndAsset_BL(class ACharacter* OwnCharacter, class FName NotifyName, const class UAnimSequenceBase* AnimationTrack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UnAssignDelegate_SpecificNotifyAndAsset_BL");

	Params::DynamicNodeBPLibrary_UnAssignDelegate_SpecificNotifyAndAsset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.NotifyName = NotifyName;
	Parms.AnimationTrack = AnimationTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UnEquipThing_BL
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBranchesOutEnum                        Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimationAsset*                  AnimationToPlay                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FUnEquipThingData_DN>     UnEquipThingData                                       (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TDelegate<void(int32 WeaponIndex, class FName NotifyToAction, bool FinishTransform)>DelegatesOnComplited                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             PlayFromNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             PlayTillNotify                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TransitionTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CanRestartAnimation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::UnEquipThing_BL(class ACharacter* OwnCharacter, EBranchesOutEnum* Branches, class UAnimationAsset* AnimationToPlay, const TArray<struct FUnEquipThingData_DN>& UnEquipThingData, const TDelegate<void(int32 WeaponIndex, class FName NotifyToAction, bool FinishTransform)>& DelegatesOnComplited, class FName PlayFromNotify, class FName PlayTillNotify, float TransitionTime, float PlayRate, bool CanRestartAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UnEquipThing_BL");

	Params::DynamicNodeBPLibrary_UnEquipThing_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.AnimationToPlay = AnimationToPlay;
	Parms.UnEquipThingData = std::move(UnEquipThingData);
	Parms.DelegatesOnComplited = DelegatesOnComplited;
	Parms.PlayFromNotify = PlayFromNotify;
	Parms.PlayTillNotify = PlayTillNotify;
	Parms.TransitionTime = TransitionTime;
	Parms.PlayRate = PlayRate;
	Parms.CanRestartAnimation = CanRestartAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.Update_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::Update_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "Update_BL");

	Params::DynamicNodeBPLibrary_Update_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UpdateAimOffset_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   XVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::UpdateAimOffset_BL(class ACharacter* OwnCharacter, class FName BoneName, float XVal, float YVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UpdateAimOffset_BL");

	Params::DynamicNodeBPLibrary_UpdateAimOffset_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;
	Parms.XVal = XVal;
	Parms.YVal = YVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.UpdateAimOffsetSmooth_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   XVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IntSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDynamicNodeBPLibrary::UpdateAimOffsetSmooth_BL(class ACharacter* OwnCharacter, class FName BoneName, float XVal, float YVal, float IntSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UpdateAimOffsetSmooth_BL");

	Params::DynamicNodeBPLibrary_UpdateAimOffsetSmooth_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.BoneName = BoneName;
	Parms.XVal = XVal;
	Parms.YVal = YVal;
	Parms.IntSpeed = IntSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DynamicNode.DynamicNodeBPLibrary.UseMeshSpaceNextBlendBone_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMeshSpace                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UseMeshSpaceNextBlendBone_BL(class ACharacter* OwnCharacter, bool bMeshSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UseMeshSpaceNextBlendBone_BL");

	Params::DynamicNodeBPLibrary_UseMeshSpaceNextBlendBone_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.bMeshSpace = bMeshSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UseNextIKFunctionFoProneIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UseNextIKFunctionFoProneIK_BL(class ACharacter* OwnCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UseNextIKFunctionFoProneIK_BL");

	Params::DynamicNodeBPLibrary_UseNextIKFunctionFoProneIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UseSmoothBlendOut_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Use                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UseSmoothBlendOut_BL(class ACharacter* OwnCharacter, bool Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UseSmoothBlendOut_BL");

	Params::DynamicNodeBPLibrary_UseSmoothBlendOut_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.Use = Use;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UseSphereTraceLegsIK_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LegIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseSphereTrace                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SphereRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UseSphereTraceLegsIK_BL(class ACharacter* OwnCharacter, int32 LegIndex, bool UseSphereTrace, float SphereRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UseSphereTraceLegsIK_BL");

	Params::DynamicNodeBPLibrary_UseSphereTraceLegsIK_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.LegIndex = LegIndex;
	Parms.UseSphereTrace = UseSphereTrace;
	Parms.SphereRadius = SphereRadius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DynamicNode.DynamicNodeBPLibrary.UseTurnInPlaceOnlyForSelectedAssets_BL
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacter*                       OwnCharacter                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyForSelectedTurnAssets                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnlyForSelectedTurnInPlaceAssets                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDynamicNodeBPLibrary::UseTurnInPlaceOnlyForSelectedAssets_BL(class ACharacter* OwnCharacter, bool OnlyForSelectedTurnAssets, bool OnlyForSelectedTurnInPlaceAssets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicNodeBPLibrary", "UseTurnInPlaceOnlyForSelectedAssets_BL");

	Params::DynamicNodeBPLibrary_UseTurnInPlaceOnlyForSelectedAssets_BL Parms{};

	Parms.OwnCharacter = OwnCharacter;
	Parms.OnlyForSelectedTurnAssets = OnlyForSelectedTurnAssets;
	Parms.OnlyForSelectedTurnInPlaceAssets = OnlyForSelectedTurnInPlaceAssets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

