#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALTF4_Tuto_PC

#include "Basic.hpp"

#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function ALTF4_Tuto_PC.ALTF4_Tuto_PC_C.ExecuteUbergraph_ALTF4_Tuto_PC
// 0x0058 (0x0058 - 0x0000)
struct ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0010(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x0028(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_2;                        // 0x0040(0x0018)(HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC) == 0x000008, "Wrong alignment on ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC");
static_assert(sizeof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC) == 0x000058, "Wrong size on ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC");
static_assert(offsetof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC, EntryPoint) == 0x000000, "Member 'ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC::EntryPoint' has a wrong offset!");
static_assert(offsetof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC, K2Node_InputKeyEvent_Key) == 0x000010, "Member 'ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC, K2Node_InputKeyEvent_Key_1) == 0x000028, "Member 'ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC, K2Node_InputKeyEvent_Key_2) == 0x000040, "Member 'ALTF4_Tuto_PC_C_ExecuteUbergraph_ALTF4_Tuto_PC::K2Node_InputKeyEvent_Key_2' has a wrong offset!");

// Function ALTF4_Tuto_PC.ALTF4_Tuto_PC_C.InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0");
static_assert(sizeof(ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0");
static_assert(offsetof(ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'ALTF4_Tuto_PC_C_InpActEvt_Gamepad_Special_Right_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function ALTF4_Tuto_PC.ALTF4_Tuto_PC_C.InpActEvt_P_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1");
static_assert(sizeof(ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1");
static_assert(offsetof(ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'ALTF4_Tuto_PC_C_InpActEvt_P_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function ALTF4_Tuto_PC.ALTF4_Tuto_PC_C.InpActEvt_Escape_K2Node_InputKeyEvent_2
// 0x0018 (0x0018 - 0x0000)
struct ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2) == 0x000008, "Wrong alignment on ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2");
static_assert(sizeof(ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2) == 0x000018, "Wrong size on ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2");
static_assert(offsetof(ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2, Key) == 0x000000, "Member 'ALTF4_Tuto_PC_C_InpActEvt_Escape_K2Node_InputKeyEvent_2::Key' has a wrong offset!");

}

