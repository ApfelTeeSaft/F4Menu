#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuizDoor_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function QuizDoor_BP.QuizDoor_BP_C.ExecuteUbergraph_QuizDoor_BP
// 0x0400 (0x0400 - 0x0000)
struct QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0004(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         ___int_Variable;                                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_IsClosed_Variable;                         // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_Has_Been_Initd_Variable_1;                 // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B3[0x5];                                       // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x00D8(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ALTF4_Pawn_SoloPlay_C*              K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0174(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_2;  // 0x0200(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ___bool_IsClosed_Variable_1;                       // 0x028C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28D[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0290(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x02B0(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ALTF4_Pawn_SoloPlay_C*              K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play_1;    // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABrige_BP_C*>                    CallFunc_GetAllActorsOfClassWithTag_OutActors;     // 0x0350(0x0010)(ReferenceParm)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_3;  // 0x0360(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABrige_BP_C*                            CallFunc_Array_Get_Item;                           // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP) == 0x000008, "Wrong alignment on QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP");
static_assert(sizeof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP) == 0x000400, "Wrong size on QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, EntryPoint) == 0x000000, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000004, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, ___int_Variable) == 0x000090, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::___int_Variable' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_RLerp_ReturnValue) == 0x000094, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_RLerp_ReturnValue_1) == 0x0000A4, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, ___bool_Has_Been_Initd_Variable) == 0x0000B0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::___bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, ___bool_IsClosed_Variable) == 0x0000B1, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::___bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, ___bool_Has_Been_Initd_Variable_1) == 0x0000B2, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::___bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0000B8, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0000C0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0000C8, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0000D0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x0000D4, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_SweepResult_1) == 0x0000D8, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play) == 0x000168, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_DynamicCast_bSuccess) == 0x000170, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000174, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult_2) == 0x000200, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, ___bool_IsClosed_Variable_1) == 0x00028C, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::___bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000290, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OtherActor) == 0x000298, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OtherComp) == 0x0002A0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0002A8, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_bFromSweep) == 0x0002AC, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_ComponentBoundEvent_SweepResult) == 0x0002B0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play_1) == 0x000340, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_DynamicCast_AsBP_ALTF4_Pawn_Solo_Play_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, K2Node_DynamicCast_bSuccess_1) == 0x000348, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_GetAllActorsOfClassWithTag_OutActors) == 0x000350, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_GetAllActorsOfClassWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_K2_SetRelativeRotation_SweepHitResult_3) == 0x000360, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_K2_SetRelativeRotation_SweepHitResult_3' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_Array_Get_Item) == 0x0003F0, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_Array_Length_ReturnValue) == 0x0003F8, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP, CallFunc_Less_IntInt_ReturnValue) == 0x0003FC, "Member 'QuizDoor_BP_C_ExecuteUbergraph_QuizDoor_BP::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function QuizDoor_BP.QuizDoor_BP_C.BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_False_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function QuizDoor_BP.QuizDoor_BP_C.BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'QuizDoor_BP_C_BndEvt__QuizDoor_BP_Ture_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

}

